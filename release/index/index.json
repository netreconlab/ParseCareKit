{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockaddressbutton",
            "title" : "OCKAddressButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: Content?, highlightOptions: Set<HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/contentview",
                "title" : "let contentView: Content?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/handlesselection",
                "title" : "var handlesSelection: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoptions",
                "title" : "let highlightOptions: Set<HighlightOption>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/ishighlighted",
                "title" : "var isHighlighted: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/isselected",
                "title" : "var isSelected: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/sethighlighted(_:animated:)",
                "title" : "func setHighlighted(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setstyleforhighlightedstate(_:)",
                "title" : "func setStyleForHighlightedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/touchesended(_:with:)",
                "title" : "func touchesEnded(Set<UITouch>, with: UIEvent?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/delayonselect(delay:)",
                    "title" : "case delayOnSelect(delay: TimeInterval)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/fade(alpha:)",
                    "title" : "case fade(alpha: CGFloat)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/overlay(alpha:)",
                    "title" : "case overlay(alpha: CGFloat)",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultdelayonselect",
                    "title" : "static var defaultDelayOnSelect: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultfade",
                    "title" : "static var defaultFade: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultoverlay",
                    "title" : "static var defaultOverlay: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption",
                "title" : "OCKAnimatedButton.HighlightOption",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimatedbutton",
            "title" : "OCKAnimatedButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/logbuttonscollectionview",
                "title" : "var logButtonsCollectionView: UICollectionView!",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/collectionview(_:cellforitemat:)",
                "title" : "func collectionView(UICollectionView, cellForItemAt: IndexPath) -> UICollectionViewCell",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/collectionview(_:numberofitemsinsection:)",
                "title" : "func collectionView(UICollectionView, numberOfItemsInSection: Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/defaultcelltype",
                "title" : "OCKButtonLogTaskView.DefaultCellType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/defaultcellidentifier",
                "title" : "static let defaultCellIdentifier: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview",
            "title" : "OCKButtonLogTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/init(type:)",
                "title" : "init(type: OCKCartesianGraphView.PlotType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/delegate",
                "title" : "var delegate: OCKChartViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/graphview",
                "title" : "let graphView: OCKCartesianGraphView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcartesianchartview",
            "title" : "OCKCartesianChartView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/init(type:)",
                "title" : "init(type: PlotType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/dataseries",
                "title" : "var dataSeries: [OCKDataSeries]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/horizontalaxismarkers",
                "title" : "var horizontalAxisMarkers: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/numberformatter",
                "title" : "var numberFormatter: NumberFormatter",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/selectedindex",
                "title" : "var selectedIndex: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/xmaximum",
                "title" : "var xMaximum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/xminimum",
                "title" : "var xMinimum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/ymaximum",
                "title" : "var yMaximum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/yminimum",
                "title" : "var yMinimum: CGFloat?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/graphbounds()",
                "title" : "func graphBounds() -> CGRect",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/bar",
                    "title" : "case bar",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/line",
                    "title" : "case line",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/scatter",
                    "title" : "case scatter",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype",
                "title" : "OCKCartesianGraphView.PlotType",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcartesiangraphview",
            "title" : "OCKCartesianGraphView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/checkmarkbutton",
                "title" : "let checkmarkButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchecklistitembutton",
            "title" : "OCKChecklistItemButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/items",
                "title" : "var items: [OCKChecklistItemButton]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/appenditem(withtitle:animated:)",
                "title" : "func appendItem(withTitle: String, animated: Bool) -> OCKChecklistItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/clearitems(animated:)",
                "title" : "func clearItems(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/insertitem(withtitle:at:animated:)",
                "title" : "func insertItem(withTitle: String, at: Int, animated: Bool) -> OCKChecklistItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/removeitem(at:animated:)",
                "title" : "func removeItem(at: Int, animated: Bool) -> OCKChecklistItemButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/updateitem(at:withtitle:)",
                "title" : "func updateItem(at: Int, withTitle: String) -> OCKChecklistItemButton?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchecklisttaskview",
            "title" : "OCKChecklistTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/layoutsubviews()",
                "title" : "func layoutSubviews()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcheckmarkbutton",
            "title" : "OCKCheckmarkButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/completionstate",
                "title" : "var completionState: OCKCompletionState",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/ring",
                "title" : "let ring: OCKCompletionRingView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/setstate(_:animated:)",
                "title" : "func setState(OCKCompletionState, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionringbutton",
            "title" : "OCKCompletionRingButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/duration",
                "title" : "var duration: TimeInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/linewidth",
                "title" : "var lineWidth: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/progress",
                "title" : "var progress: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/strokecolor",
                "title" : "var strokeColor: UIColor",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/setprogress(_:animated:)",
                "title" : "func setProgress(CGFloat, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionringview",
            "title" : "OCKCompletionRingView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/init(type:)",
                "title" : "init(type: Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/call",
                    "title" : "case call",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/email",
                    "title" : "case email",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/message",
                    "title" : "case message",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/type",
                "title" : "OCKContactButton.Type",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactbutton",
            "title" : "OCKContactButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/init(html:css:)",
                    "title" : "init(html: String, css: String?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/css",
                    "title" : "let css: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/html",
                    "title" : "let html: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml",
                "title" : "OCKDetailView.StyledHTML",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/init(html:imageoverlaystyle:showsclosebutton:)",
                "title" : "init(html: StyledHTML?, imageOverlayStyle: UIUserInterfaceStyle, showsCloseButton: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/bodylabel",
                "title" : "let bodyLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/closebutton",
                "title" : "var closeButton: UIButton?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/html",
                "title" : "var html: StyledHTML?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/imagelabel",
                "title" : "var imageLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/imageview",
                "title" : "var imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/layoutsubviews()",
                "title" : "func layoutSubviews()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/scrollviewdidscroll(_:)",
                "title" : "func scrollViewDidScroll(UIScrollView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdetailview",
            "title" : "OCKDetailView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/addressbutton",
                "title" : "let addressButton: OCKAddressButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/callbutton",
                "title" : "let callButton: OCKContactButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/emailbutton",
                "title" : "let emailButton: OCKContactButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/messagebutton",
                "title" : "let messageButton: OCKContactButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/defaultimage",
                "title" : "static let defaultImage: UIImage",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdetailedcontactview",
            "title" : "OCKDetailedContactView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/init(imageoverlaystyle:)",
                "title" : "init(imageOverlayStyle: UIUserInterfaceStyle)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/cardview",
                "title" : "var cardView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/contentview",
                "title" : "var contentView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/delegate",
                "title" : "var delegate: OCKFeaturedContentViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/imageview",
                "title" : "var imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/label",
                "title" : "var label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/enablecardstyling(_:style:)",
                    "title" : "func enableCardStyling(Bool, style: OCKStyler)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/ockcardable-implementations",
                "title" : "OCKCardable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockfeaturedcontentview",
            "title" : "OCKFeaturedContentView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/completionbutton",
                "title" : "let completionButton: OCKLabeledCheckmarkButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/prepareforreuse()",
                "title" : "func prepareForReuse()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockgridtaskcell",
            "title" : "OCKGridTaskCell",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/collectionview",
                "title" : "var collectionView: UICollectionView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/collectionview(_:didselectitemat:)",
                "title" : "func collectionView(UICollectionView, didSelectItemAt: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/defaultcelltype",
                "title" : "OCKGridTaskView.DefaultCellType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/defaultcellidentifier",
                "title" : "static let defaultCellIdentifier: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockgridtaskview",
            "title" : "OCKGridTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsdetaildisclosure",
                    "title" : "var showsDetailDisclosure: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsiconimage",
                    "title" : "var showsIconImage: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsseparator",
                    "title" : "var showsSeparator: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockheaderview\/configuration",
                "title" : "OCKHeaderView.Configuration",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init(configurationhandler:)",
                "title" : "init(configurationHandler: (inout Configuration) -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/detaildisclosureimage",
                "title" : "let detailDisclosureImage: UIImageView?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/iconimageview",
                "title" : "let iconImageView: UIImageView?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockheaderview",
            "title" : "OCKHeaderView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/completionbutton",
                "title" : "let completionButton: OCKLabeledButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockinstructionstaskview",
            "title" : "OCKInstructionsTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init(textstyle:weight:)",
                "title" : "init(textStyle: UIFont.TextStyle, weight: UIFont.Weight)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/animatestextchanges",
                "title" : "var animatesTextChanges: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/text",
                "title" : "var text: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ocklabel\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ocklabel\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ocklabel\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabel",
            "title" : "OCKLabel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabeledbutton",
            "title" : "OCKLabeledButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/checkmarkbutton",
                "title" : "let checkmarkButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton",
            "title" : "OCKLabeledCheckmarkButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklocalization\/localized(_:tablename:bundle:value:comment:)",
                "title" : "static func localized(String, tableName: String?, bundle: Bundle?, value: String, comment: String) -> String",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklocalization",
            "title" : "OCKLocalization",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/logbutton",
                "title" : "let logButton: OCKLabeledButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/prepareforreuse()",
                "title" : "func prepareForReuse()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogbuttoncell",
            "title" : "OCKLogButtonCell",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogitembutton",
            "title" : "OCKLogItemButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/items",
                "title" : "var items: [OCKLogItemButton]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/appenditem(withtitle:detail:animated:)",
                "title" : "func appendItem(withTitle: String?, detail: String?, animated: Bool) -> OCKLogItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/clearitems(animated:)",
                "title" : "func clearItems(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/insertitem(withtitle:detail:at:animated:)",
                "title" : "func insertItem(withTitle: String?, detail: String?, at: Int, animated: Bool) -> OCKLogItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/removeitem(at:animated:)",
                "title" : "func removeItem(at: Int, animated: Bool) -> OCKLogItemButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/updateitem(at:withtitle:detail:)",
                "title" : "func updateItem(at: Int, withTitle: String?, detail: String?) -> OCKLogItemButton?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogtaskview",
            "title" : "OCKLogTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockseparatorview",
            "title" : "OCKSeparatorView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocksimplecontactview",
            "title" : "OCKSimpleContactView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/completionbutton",
                "title" : "let completionButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocksimpletaskview",
            "title" : "OCKSimpleTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/init(style:)",
                "title" : "init(style: Style)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/arrangedsubviews",
                "title" : "var arrangedSubviews: [UIView]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/showsouterseparators",
                "title" : "var showsOuterSeparators: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.property",
                "title" : "let style: Style",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/addarrangedsubview(_:)",
                "title" : "func addArrangedSubview(UIView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/addarrangedsubview(_:animated:)",
                "title" : "func addArrangedSubview(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/clear(animated:)",
                "title" : "func clear(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/insertarrangedsubview(_:at:)",
                "title" : "func insertArrangedSubview(UIView, at: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/insertarrangedsubview(_:at:animated:)",
                "title" : "func insertArrangedSubview(UIView, at: Int, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removearrangedsubview(_:)",
                "title" : "func removeArrangedSubview(UIView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removearrangedsubview(_:animated:)",
                "title" : "func removeArrangedSubview(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/plain",
                    "title" : "case plain",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/separated",
                    "title" : "case separated",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum",
                "title" : "OCKStackView.Style",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstackview\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstackview",
            "title" : "OCKStackView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockview\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockview\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockview\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockview",
            "title" : "OCKView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/init(weekofdate:)",
                "title" : "init(weekOfDate: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/completionringbuttons",
                "title" : "var completionRingButtons: [OCKCompletionRingButton]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/delegate",
                "title" : "var delegate: OCKCalendarViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/selecteddate",
                "title" : "var selectedDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/completionringfor(date:)",
                "title" : "func completionRingFor(date: Date) -> OCKCompletionRingButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/selectdate(_:)",
                "title" : "func selectDate(Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/showdate(_:)",
                "title" : "func showDate(Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockweekcalendarview",
            "title" : "OCKWeekCalendarView",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockanimationstyler\/statechangeduration-9ixfj",
                        "title" : "var stateChangeDuration: Double",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAnimationStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimationstyler\/statechangeduration-486fh",
                "title" : "var stateChangeDuration: Double",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimationstyler",
            "title" : "OCKAnimationStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth1-5wvit",
                        "title" : "var borderWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth1-2tf1m",
                "title" : "var borderWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth2-4deve",
                        "title" : "var borderWidth2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth2-7e6z5",
                "title" : "var borderWidth2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius1-8jvis",
                        "title" : "var cornerRadius1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius1-6x5vb",
                "title" : "var cornerRadius1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius2-1ypef",
                        "title" : "var cornerRadius2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius2-1j90j",
                "title" : "var cornerRadius2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/linewidth1-44we5",
                        "title" : "var lineWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/linewidth1-29t2q",
                "title" : "var lineWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/opacity1-80asa",
                        "title" : "var opacity1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/opacity1-n85w",
                "title" : "var opacity1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowoffset1-7rrqj",
                        "title" : "var shadowOffset1: CGSize",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowoffset1-4hagz",
                "title" : "var shadowOffset1: CGSize",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowopacity1-r59",
                        "title" : "var shadowOpacity1: Float",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowopacity1-3xc01",
                "title" : "var shadowOpacity1: Float",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowradius1-41ill",
                        "title" : "var shadowRadius1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowradius1-aa8j",
                "title" : "var shadowRadius1: CGFloat",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockappearancestyler",
            "title" : "OCKAppearanceStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcalendardisplayable\/delegate",
                "title" : "var delegate: OCKCalendarViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcalendardisplayable",
            "title" : "OCKCalendarDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcalendarviewdelegate\/calendarview(_:didselectdate:at:sender:)",
                "title" : "func calendarView(UIView & OCKCalendarDisplayable, didSelectDate: Date, at: Int, sender: Any?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcalendarviewdelegate",
            "title" : "OCKCalendarViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/cardview",
                "title" : "var cardView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/contentview",
                "title" : "var contentView: UIView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/enablecardstyling(_:style:)",
                "title" : "func enableCardStyling(Bool, style: OCKStyler)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcardable",
            "title" : "OCKCardable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchartdisplayable\/delegate",
                "title" : "var delegate: OCKChartViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchartdisplayable",
            "title" : "OCKChartDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchartviewdelegate\/didselectchartview(_:)",
                "title" : "func didSelectChartView(UIView & OCKChartDisplayable)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchartviewdelegate",
            "title" : "OCKChartViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/black",
                "title" : "var black: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/clear",
                "title" : "var clear: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/custombackground",
                "title" : "var customBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customblue-5ytu3",
                        "title" : "var customBlue: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customblue-69xy6",
                "title" : "var customBlue: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customfill-7zf7y",
                        "title" : "var customFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customfill-lp9l",
                "title" : "var customFill: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray-9n9u3",
                        "title" : "var customGray: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray-2dzf1",
                "title" : "var customGray: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray2-4bbhc",
                        "title" : "var customGray2: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray2-7v4ud",
                "title" : "var customGray2: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray3-xmv5",
                        "title" : "var customGray3: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray3-91bsn",
                "title" : "var customGray3: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray4-8ce3e",
                        "title" : "var customGray4: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray4-3csgm",
                "title" : "var customGray4: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray5-97510",
                        "title" : "var customGray5: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray5-yn4o",
                "title" : "var customGray5: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgroupedbackground",
                "title" : "var customGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/label-60yfj",
                        "title" : "var label: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/label-3e23d",
                "title" : "var label: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/quaternarycustomfill-40fnf",
                        "title" : "var quaternaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/quaternarycustomfill-9s8ur",
                "title" : "var quaternaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustombackground",
                "title" : "var secondaryCustomBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomfill-4hhw0",
                        "title" : "var secondaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomfill-4dn43",
                "title" : "var secondaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomgroupedbackground",
                "title" : "var secondaryCustomGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarylabel-l1uz",
                        "title" : "var secondaryLabel: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarylabel-45w1p",
                "title" : "var secondaryLabel: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/separator-2el66",
                        "title" : "var separator: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/separator-7r6nr",
                "title" : "var separator: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomfill-7uiae",
                        "title" : "var tertiaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomfill-9u7ey",
                "title" : "var tertiaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomgroupedbackground",
                "title" : "var tertiaryCustomGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarylabel-9uszd",
                        "title" : "var tertiaryLabel: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarylabel-99xfq",
                "title" : "var tertiaryLabel: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/white",
                "title" : "var white: UIColor",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcolorstyler",
            "title" : "OCKColorStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactdisplayable\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactdisplayable",
            "title" : "OCKContactDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiateaddresslookup:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateAddressLookup: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiatecall:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateCall: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiateemail:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateEmail: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiatemessage:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateMessage: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/didselectcontactview(_:)",
                "title" : "func didSelectContactView(UIView & OCKContactDisplayable)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactviewdelegate",
            "title" : "OCKContactViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight1-8t0xc",
                        "title" : "var buttonHeight1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight1-8myqi",
                "title" : "var buttonHeight1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight2-97vul",
                        "title" : "var buttonHeight2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight2-5api3",
                "title" : "var buttonHeight2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight3-5alm5",
                        "title" : "var buttonHeight3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight3-1h7vk",
                "title" : "var buttonHeight3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight4-5t9yv",
                        "title" : "var buttonHeight4: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight4-7ier6",
                "title" : "var buttonHeight4: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets1-25rqk",
                        "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets1-7cgzb",
                "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets2-4ocny",
                        "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets2-1twdh",
                "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight1-97mv9",
                        "title" : "var imageHeight1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight1-454ni",
                "title" : "var imageHeight1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight2-37s17",
                        "title" : "var imageHeight2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight2-9x9ws",
                "title" : "var imageHeight2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/linewidth1-4lzi4",
                        "title" : "var lineWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/linewidth1-4bv88",
                "title" : "var lineWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize1-7x6yr",
                        "title" : "var pointSize1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize1-2lj2d",
                "title" : "var pointSize1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize2-78la3",
                        "title" : "var pointSize2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize2-60pm9",
                "title" : "var pointSize2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize3-8jh9l",
                        "title" : "var pointSize3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize3-4ygz0",
                "title" : "var pointSize3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/separatorheight-9an17",
                        "title" : "var separatorHeight: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/separatorheight-nr57",
                "title" : "var separatorHeight: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/stackspacing1-14za4",
                        "title" : "var stackSpacing1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/stackspacing1-9v3do",
                "title" : "var stackSpacing1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize1-2cd5a",
                        "title" : "var symbolPointSize1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize1-3m4wx",
                "title" : "var symbolPointSize1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize2-13pli",
                        "title" : "var symbolPointSize2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize2-5guhg",
                "title" : "var symbolPointSize2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize3-4qpce",
                        "title" : "var symbolPointSize3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize3-133z9",
                "title" : "var symbolPointSize3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize4-5x61i",
                        "title" : "var symbolPointSize4: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize4-51iia",
                "title" : "var symbolPointSize4: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize5-56jmz",
                        "title" : "var symbolPointSize5: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize5-8v009",
                "title" : "var symbolPointSize5: CGFloat",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdimensionstyler",
            "title" : "OCKDimensionStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentviewdelegate\/didtapview(_:)",
                "title" : "func didTapView(OCKFeaturedContentView)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockfeaturedcontentviewdelegate",
            "title" : "OCKFeaturedContentViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstylable\/style()-4ubfv",
                        "title" : "func style() -> OCKStyler",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKStylable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstylable\/style()-1pdd6",
                "title" : "func style() -> OCKStyler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/stylechildren()",
                "title" : "func styleChildren()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstylable",
            "title" : "OCKStylable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/animation-5kmua",
                        "title" : "var animation: OCKAnimationStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/animation-27hei",
                "title" : "var animation: OCKAnimationStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/appearance-705c6",
                        "title" : "var appearance: OCKAppearanceStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/appearance-2f8aq",
                "title" : "var appearance: OCKAppearanceStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/color-50nry",
                        "title" : "var color: OCKColorStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/color-7cq8t",
                "title" : "var color: OCKColorStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/dimension-8j1b7",
                        "title" : "var dimension: OCKDimensionStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/dimension-4gu38",
                "title" : "var dimension: OCKDimensionStyler",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstyler",
            "title" : "OCKStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskdisplayable\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocktaskdisplayable",
            "title" : "OCKTaskDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/didselecttaskview(_:eventindexpath:)",
                "title" : "func didSelectTaskView(UIView & OCKTaskDisplayable, eventIndexPath: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didcompleteevent:at:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCompleteEvent: Bool, at: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didcreateoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCreateOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didselectoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didSelectOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocktaskviewdelegate",
            "title" : "OCKTaskViewDelegate",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/cardview\/init(content:)",
                "title" : "init(content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/cardview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(activationpoint:)-1vx1g",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(activationpoint:)-22rl2",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(named:_:)-174ku",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(named:_:)-5qqi4",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(named:_:)-yo9z",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactivationpoint(_:)-59ve7",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactivationpoint(_:)-nckv",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-1gsnh",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-3eia2",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-5u5vi",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-5uo1r",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-67wje",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-8h0wj",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-8j7im",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-9528v",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-4kscv",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-5vfhp",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-7esec",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-2n1vm",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-37pj4",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-5uqio",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-32a61",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-5vpqi",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-838dg",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-3gdzb",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-5j8z5",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-5nvwi",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-bsol",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3f91",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-66qlo",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8fyyy",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-gp3y",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-1ww4i",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-45ra8",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-658f0",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-gu6r",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-1mwyw",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-3nxqu",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-5rafh",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-67qih",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-15vdl",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-6rpfl",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-7kswa",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-3vj8s",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-7cs0x",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-9b53o",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-2dp84",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-8vfhj",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-nmxg",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-2qr3r",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-4uwvj",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-mz1b",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-17zbp",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-2qda4",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-4kmlv",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alignmentguide(_:computevalue:)-4jcbf",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alignmentguide(_:computevalue:)-9nweg",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/aspectratio(_:contentmode:)-4bzaj",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/aspectratio(_:contentmode:)-z28v",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:in:fillstyle:)-35zzp",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:in:fillstyle:)-6zog",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(in:fillstyle:)-67xpq",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(in:fillstyle:)-9f04u",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-1yazt",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-35jcj",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-6t6g0",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-xmaq",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonstyle(_:)-9w1dt",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonstyle(_:)-qn63",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2xjkw",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5qyki",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-l3n3",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1gkqa",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4inkk",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-74tp",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6wzif",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8e8cz",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8rdxo",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-23xf5",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-279ak",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8psmx",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentmargins(_:_:for:)-25t6b",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentmargins(_:_:for:)-3rjon",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(_:issuppressed:)-1dpij",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(_:issuppressed:)-63m3h",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(_:issuppressed:)-w9o7",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogconfirmationlabel(_:)-6ep07",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogconfirmationlabel(_:)-9hioz",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogconfirmationlabel(_:)-9p0tf",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogmessage(_:)-25v7p",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogmessage(_:)-68dyr",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogmessage(_:)-8ir27",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8rzgd",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8zja9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-4gqky",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-7qgck",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-19svt",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4vj6y",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-91zcv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9i4uk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporterfilenamelabel(_:)-4omwf",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporterfilenamelabel(_:)-5u6ka",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporterfilenamelabel(_:)-66z2p",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedobject(_:)-967pr",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedobject(_:)-9chv0",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedsceneobject(_:)-2notl",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedsceneobject(_:)-3lmup",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedscenevalue(_:_:)-2cx14",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedscenevalue(_:_:)-4bqb0",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedvalue(_:_:)-9sm6e",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedvalue(_:_:)-9v364",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-51bog",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-6927a",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-8mhun",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listitemtint(_:)-2nnb4",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listitemtint(_:)-73tr0",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionspacing(_:)-63l40",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionspacing(_:)-a4gf",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-2xbfz",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-310t3",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-4lbnm",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-1g9hq",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-21mt7",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-2xvrb",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:)-4upxl",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:)-9z6jz",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-10t5j",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-2bou2",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-39d4",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-3lvie",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-4r6qc",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-5k9ao",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-6aj79",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-6qjbt",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-9fvcl",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onchange(of:initial:_:)-4381s",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onchange(of:initial:_:)-92ai8",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/oncontinuoushover(coordinatespace:perform:)-5tukv",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/oncontinuoushover(coordinatespace:perform:)-9ze13",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:delegate:)-1ke9d",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:delegate:)-53p08",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-269sk",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-4iiaw",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-91f5h",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-9qer2",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:coordinatespace:perform:)-2mwvx",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:coordinatespace:perform:)-2urq1",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:)-28l3c",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:)-9rnh1",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/renameaction(_:)-1oe3i",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/renameaction(_:)-6tgd9",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareainset(edge:alignment:spacing:content:)-8eu7q",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareainset(edge:alignment:spacing:content:)-8trnf",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareapadding(_:)-2efft",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareapadding(_:)-9ajsk",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(_:anchor:)-1rl1",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(_:anchor:)-7m1w9",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-266iz",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3b0pz",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5qu84",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:placement:prompt:token:)-3cnbl",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:placement:prompt:token:)-43zl8",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:placement:prompt:token:)-4x5be",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:ispresented:placement:prompt:)-3bgtj",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:ispresented:placement:prompt:)-7gie5",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:ispresented:placement:prompt:)-y02l",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-4sjdw",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-6dmm0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-7drue",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-1v6f5",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-4ol34",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-mudv",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:ispresented:placement:prompt:token:)-465hq",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:ispresented:placement:prompt:token:)-7wx1o",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8n788",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-6y09u",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-8b41q",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-8dkq1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4uhg2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7yw29",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9axk0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-36rwa",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9qzz8",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9t0f0",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(content:)-8man3",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(content:)-r0mf",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarbackground(_:for:)-11hq9",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarbackground(_:for:)-4ict1",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typeselectequivalent(_:)-5c5p9",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typeselectequivalent(_:)-84pb8",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typeselectequivalent(_:)-9uya0",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typesettinglanguage(_:isenabled:)-55kvh",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typesettinglanguage(_:isenabled:)-5ctoq",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/cardview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/cardview",
            "title" : "CardView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/circularcompletionview\/init(iscomplete:content:)",
                "title" : "init(isComplete: Bool, content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/circularcompletionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(activationpoint:)-1cid1",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(activationpoint:)-4vt5s",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(named:_:)-22b0w",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(named:_:)-6mw48",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(named:_:)-9xjt2",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactivationpoint(_:)-7mzv2",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactivationpoint(_:)-9otwa",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-16nvr",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-24b8k",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2o4c5",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2zba3",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-4ra10",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-4ti5z",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-66acj",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-89tgr",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-41hf6",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-6qou1",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-mlsd",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-97ydq",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-9wbsg",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-utqj",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-1xpq5",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-5vdls",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-74h12",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-4kl0p",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-506bt",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-5cdla",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-7f2vm",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1hf4j",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8789e",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-895sx",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9msj3",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-1fcw8",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-4n3x8",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-7r4d1",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-99v74",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-6r32z",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-71lsa",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-74gwl",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-qm56",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-30jqq",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-7idx1",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-8we2e",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-34lbp",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-72eqw",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-7n2hn",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-3m7a4",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-6ihw1",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-7khz5",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-72fib",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-7mie5",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-t6ni",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-6rye9",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-9ab1v",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-9dcbs",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alignmentguide(_:computevalue:)-1sza",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alignmentguide(_:computevalue:)-4tzk0",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/aspectratio(_:contentmode:)-7pygk",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/aspectratio(_:contentmode:)-8nc5x",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:in:fillstyle:)-983i3",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:in:fillstyle:)-9gvkq",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(in:fillstyle:)-2rfpk",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(in:fillstyle:)-5gheh",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-1evuy",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-67baq",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-6d1gj",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-hf28",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonstyle(_:)-2s5ki",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonstyle(_:)-5x92a",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-55hya",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7zvos",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-lxd8",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-80i92",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8y0ak",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9lja1",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3t5vj",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4oamn",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-94coa",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1y6k7",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4nwxy",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7lbeh",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentmargins(_:_:for:)-3gijn",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentmargins(_:_:for:)-81s0i",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-8a9p8",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-8f4s7",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-tmwa",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogconfirmationlabel(_:)-2ccrn",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogconfirmationlabel(_:)-35u73",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogconfirmationlabel(_:)-3dhov",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogmessage(_:)-2xrq2",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogmessage(_:)-4y4gi",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogmessage(_:)-7te0z",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1k55f",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4g4io",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-37992",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-9lvp8",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5cydn",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-83z3l",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1hk5j",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9semv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporterfilenamelabel(_:)-20qdq",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporterfilenamelabel(_:)-2oap6",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporterfilenamelabel(_:)-3ixy5",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedobject(_:)-1yy0f",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedobject(_:)-7xeox",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedsceneobject(_:)-64fxz",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedsceneobject(_:)-9yial",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedscenevalue(_:_:)-431xx",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedscenevalue(_:_:)-5m7qm",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedvalue(_:_:)-4dfka",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedvalue(_:_:)-84ppz",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-1zwt5",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-4mgbq",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-wfb6",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listitemtint(_:)-4vsji",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listitemtint(_:)-8rny",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionspacing(_:)-2of7r",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionspacing(_:)-87gjc",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-1cw92",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-2nqis",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-8w3dd",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-356rk",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-7xv47",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-8jc3t",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:)-3b9pm",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:)-3s3hc",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-5vn1l",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-91dh0",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-9gzhy",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-9vavg",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-1nj0x",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-3fz29",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-5040b",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-5md3c",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-op5u",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onchange(of:initial:_:)-5skd7",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onchange(of:initial:_:)-6degi",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/oncontinuoushover(coordinatespace:perform:)-21wbe",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/oncontinuoushover(coordinatespace:perform:)-29e9h",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:delegate:)-4s353",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:delegate:)-5rmf1",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-1n884",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-1sqjm",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-5pxis",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-8520y",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:coordinatespace:perform:)-6ic9k",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:coordinatespace:perform:)-9wk4j",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:)-52dpb",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:)-84cea",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/renameaction(_:)-48c0s",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/renameaction(_:)-7ubtl",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareainset(edge:alignment:spacing:content:)-41ydc",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareainset(edge:alignment:spacing:content:)-is9y",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareapadding(_:)-3f1bh",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareapadding(_:)-4mz2r",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(_:anchor:)-4xxc5",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(_:anchor:)-9foxh",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-54tzw",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5ukft",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8zpdj",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-33lca",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-7xtwb",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-zti8",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:ispresented:placement:prompt:)-36h7m",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:ispresented:placement:prompt:)-51qdj",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:ispresented:placement:prompt:)-612d6",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-1go1h",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-7lf1k",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-i8f6",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-3fu1h",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-4dc4f",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-7wgiv",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-4my50",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5okew",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6angs",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-6bw59",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-6ody9",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-9q9y1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2vy5t",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-3gj2z",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7bnlc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3khv7",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8wf4c",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-puu",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(content:)-26d7x",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(content:)-603dm",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarbackground(_:for:)-85n5y",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarbackground(_:for:)-90pgh",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typeselectequivalent(_:)-10ve8",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typeselectequivalent(_:)-6fvyg",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typeselectequivalent(_:)-6m5h6",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typesettinglanguage(_:isenabled:)-5fox0",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typesettinglanguage(_:isenabled:)-9lcj8",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/circularcompletionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/circularcompletionview",
            "title" : "CircularCompletionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/headerview\/init(title:detail:image:)",
                "title" : "init(title: Text, detail: Text?, image: Image?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/headerview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(activationpoint:)-3ullp",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(activationpoint:)-8r11c",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(named:_:)-15p89",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(named:_:)-4kq6g",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(named:_:)-6q6ld",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactivationpoint(_:)-26ze8",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactivationpoint(_:)-9wspj",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-1z5bl",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-455tl",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-4d88k",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-4vc8v",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-509qq",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-672uw",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-78fhn",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-9smzt",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-2usu5",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-3d89o",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-89kxg",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-1g26i",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-6r378",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-jhj9",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-5e4dx",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-99ac9",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-9kkjb",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-1hv4u",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-78b5a",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-82kjz",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-9407q",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-795lp",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9iz29",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9luyw",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-cvfh",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-4de7t",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-4dr6h",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-9yi0u",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-rywo",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-4ibxf",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-6qvng",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-d1i4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-xou5",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-3t4ll",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-8zas2",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-99pjk",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-2ytud",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-5xhf1",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-6vfa0",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-5qtvw",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-77mjy",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-8jtx9",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-17qvs",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-3mxka",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-92xlr",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-3qs7u",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-48tdl",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-8pf1e",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alignmentguide(_:computevalue:)-3h3ps",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alignmentguide(_:computevalue:)-3u8ln",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/aspectratio(_:contentmode:)-3a80s",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/aspectratio(_:contentmode:)-4u8v8",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:in:fillstyle:)-54pkv",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:in:fillstyle:)-70vb3",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(in:fillstyle:)-3dur9",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(in:fillstyle:)-uur5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-47svk",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-540xj",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-5dhqm",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-5mack",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonstyle(_:)-3i6h1",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonstyle(_:)-5lqbf",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2anby",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-42nbf",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5vg0n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5u9me",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7wbfl",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9v7dk",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1dqcf",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6o5mq",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7yvyf",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-164i9",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2io6h",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-auyo",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentmargins(_:_:for:)-530zu",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentmargins(_:_:for:)-9ks3d",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(_:issuppressed:)-37n5u",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(_:issuppressed:)-7yfb4",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(_:issuppressed:)-94qp1",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogconfirmationlabel(_:)-230qp",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogconfirmationlabel(_:)-5tnqv",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogconfirmationlabel(_:)-9vkz3",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogmessage(_:)-2zmq4",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogmessage(_:)-3t76s",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogmessage(_:)-9jfl5",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3rinj",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-63lny",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-305jz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5fm5y",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5jn52",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9krdk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-15hd5",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9mz1y",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporterfilenamelabel(_:)-1k6wy",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporterfilenamelabel(_:)-7dszq",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporterfilenamelabel(_:)-98yl5",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedobject(_:)-3y6k9",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedobject(_:)-922jh",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedsceneobject(_:)-4fdvx",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedsceneobject(_:)-7ty3w",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedscenevalue(_:_:)-3cbz7",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedscenevalue(_:_:)-57w7k",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedvalue(_:_:)-3mosa",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedvalue(_:_:)-8ygz",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-1wxxd",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-6zjpw",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-mp2b",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listitemtint(_:)-2dssr",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listitemtint(_:)-68cwh",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionspacing(_:)-4oge7",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionspacing(_:)-5cj46",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-2i13v",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-9i0ng",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-unqf",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-15oat",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-29ids",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-9lce",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:)-62c5s",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:)-6csxm",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-400o5",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-7tiwz",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-8y10x",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-g61j",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-1dqx6",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-1sbvs",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-3b6x",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-4p24a",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-c8o5",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onchange(of:initial:_:)-4at1k",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onchange(of:initial:_:)-8p6c1",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/oncontinuoushover(coordinatespace:perform:)-1hb4a",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/oncontinuoushover(coordinatespace:perform:)-1zrlo",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:delegate:)-5ut5h",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:delegate:)-90f95",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-1vam8",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-1wj7j",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-6gq6n",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-7sv2n",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:coordinatespace:perform:)-2d8t8",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:coordinatespace:perform:)-2r917",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:)-36sgc",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:)-67bjn",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/renameaction(_:)-5itsh",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/renameaction(_:)-8kv95",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareainset(edge:alignment:spacing:content:)-6bnja",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareainset(edge:alignment:spacing:content:)-rnka",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareapadding(_:)-4t75g",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareapadding(_:)-91fo9",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(_:anchor:)-3b0f6",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(_:anchor:)-h85r",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2rpy1",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-57wt7",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8ogrn",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:placement:prompt:token:)-3j9gm",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:placement:prompt:token:)-3vkrh",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:placement:prompt:token:)-3zb0j",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:ispresented:placement:prompt:)-39scn",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:ispresented:placement:prompt:)-6atmz",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:ispresented:placement:prompt:)-76t1e",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-24qo6",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-2u45j",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-70rfz",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-1vzph",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-3itj7",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-7dua",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-1ftsc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-2f988",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-60ys1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-1gxrx",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-6kj7r",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-9fmlq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5qbsv",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7h9qv",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-jp4s",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4vtuy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9ucwa",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-t3il",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(content:)-3xv24",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(content:)-5jt90",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarbackground(_:for:)-8u7oo",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarbackground(_:for:)-yxou",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typeselectequivalent(_:)-1j7bp",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typeselectequivalent(_:)-9bydc",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typeselectequivalent(_:)-md6x",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typesettinglanguage(_:isenabled:)-4ywpu",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typesettinglanguage(_:isenabled:)-7kakx",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/headerview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/headerview",
            "title" : "HeaderView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(instructions:iscomplete:action:header:)",
                "title" : "init(instructions: Text?, isComplete: Bool, action: () -> Void, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(title:detail:instructions:iscomplete:action:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, isComplete: Bool, action: () -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(activationpoint:)-562pp",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(activationpoint:)-9pfmo",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(named:_:)-4afb0",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(named:_:)-4gy9",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(named:_:)-82k0u",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactivationpoint(_:)-41bkk",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactivationpoint(_:)-6vhcw",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-1ynqo",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-45tc8",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-46olv",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-4a4nd",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-7wcss",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-82t3f",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-8mxym",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-oe05",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-184wn",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-238kr",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-23npy",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-5684a",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-5r7bz",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-62vu2",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-17q6b",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-1depy",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-smwt",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-21nuj",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-2im63",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-5tegn",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-7ythx",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-21i1u",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-43h3r",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-69ci0",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9h9u6",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-34pid",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-46wmi",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-7w2jn",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-9suhy",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-21qeo",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-3a3wu",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-6jvl0",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-911pv",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-2712v",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-4samc",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-7bqrn",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-4b5dq",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-eiqi",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-lerr",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-1k0wc",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-4pwd4",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-8eseq",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-50j8g",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-5o8f7",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-pndb",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-2l4eq",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-34pc9",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-9tue",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alignmentguide(_:computevalue:)-3djb3",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alignmentguide(_:computevalue:)-65rk1",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/aspectratio(_:contentmode:)-4q26",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/aspectratio(_:contentmode:)-59a72",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:in:fillstyle:)-99q5g",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:in:fillstyle:)-jwxj",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(in:fillstyle:)-3hsyk",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(in:fillstyle:)-67cdc",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-13n4e",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-2sbqq",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-5n0ah",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-7avry",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonstyle(_:)-2w3gk",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonstyle(_:)-4b16n",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2zizp",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3eoa0",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3ho8n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3kad5",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4c85l",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-954gd",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1uh1r",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4pkqs",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9w88r",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5tctg",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7am10",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7mk1o",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentmargins(_:_:for:)-5lhg3",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentmargins(_:_:for:)-84oan",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(_:issuppressed:)-2r6fu",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(_:issuppressed:)-3ocyw",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(_:issuppressed:)-6s5cq",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogconfirmationlabel(_:)-3r7p5",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogconfirmationlabel(_:)-5c94l",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogconfirmationlabel(_:)-89qbp",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogmessage(_:)-6sh3g",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogmessage(_:)-79ckd",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogmessage(_:)-866vo",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3z0jh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-9ea14",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-1tu3z",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8cbxz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-3jyxi",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-81exf",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-2rfva",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-610g2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporterfilenamelabel(_:)-6660x",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporterfilenamelabel(_:)-76s7f",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporterfilenamelabel(_:)-8nwc",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedobject(_:)-5e5gv",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedobject(_:)-9hagq",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedsceneobject(_:)-1tmrz",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedsceneobject(_:)-6uqay",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedscenevalue(_:_:)-1nzcz",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedscenevalue(_:_:)-6vyl8",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedvalue(_:_:)-1srds",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedvalue(_:_:)-5w77p",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-5iiw1",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-64kgl",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-7subj",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listitemtint(_:)-2gqch",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listitemtint(_:)-7ugpx",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionspacing(_:)-7z7oa",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionspacing(_:)-cpn3",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-71mim",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-7ftc8",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-8mggz",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-509a7",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-8s1is",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-9ht03",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:)-5zuk9",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:)-ys8g",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-5bklq",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-947xf",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-rwzo",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-sqfw",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-6jccd",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-7qbtk",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-8wcut",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-9uogv",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-zjki",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onchange(of:initial:_:)-41bea",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onchange(of:initial:_:)-7as3t",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/oncontinuoushover(coordinatespace:perform:)-2lfzc",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/oncontinuoushover(coordinatespace:perform:)-30z45",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:delegate:)-6ewzx",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:delegate:)-8gunn",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-2uh77",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-5fqtv",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-6qzgo",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-7yod0",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:coordinatespace:perform:)-29dus",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:coordinatespace:perform:)-ic4f",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:)-5049x",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:)-8w5ew",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/renameaction(_:)-8e8o1",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/renameaction(_:)-f3q4",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-1cqel",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-4k86n",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareapadding(_:)-3ftxt",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareapadding(_:)-w6sl",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(_:anchor:)-36k15",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(_:anchor:)-8dqat",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-562jr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5i6gw",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-asae",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:placement:prompt:token:)-1zk9i",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:placement:prompt:token:)-6gekr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:placement:prompt:token:)-9lz93",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:ispresented:placement:prompt:)-3c34m",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:ispresented:placement:prompt:)-71iy1",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:ispresented:placement:prompt:)-8jhvc",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-1qa2j",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-42why",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-9o5v",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-20mmq",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-2q327",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-5cv50",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-283jb",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-28dxf",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9xxtl",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-29mjq",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-68mnj",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-86tql",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-3yitm",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-46ksw",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-59xcz",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1n6cy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-25if4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7u40h",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(content:)-3rkuu",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(content:)-5c8qr",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarbackground(_:for:)-6cvaa",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarbackground(_:for:)-6qk91",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typeselectequivalent(_:)-4uru7",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typeselectequivalent(_:)-54znb",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typeselectequivalent(_:)-8m1dv",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typesettinglanguage(_:isenabled:)-3ppfg",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typesettinglanguage(_:isenabled:)-6e84e",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/instructionstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/instructionstaskview",
            "title" : "InstructionsTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(status:header:)",
                "title" : "init(status: LabeledValueTaskViewStatus, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(title:detail:status:)",
                "title" : "init(title: Text, detail: Text?, status: LabeledValueTaskViewStatus)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(activationpoint:)-23iiu",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(activationpoint:)-6v44k",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(named:_:)-12ggp",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(named:_:)-2bek1",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(named:_:)-8qeme",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-7kmwx",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-8pltu",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-2kp61",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-2lmg8",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-4jg49",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-55p34",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-5pu5h",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-8bypj",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-9vodl",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-klpj",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-535jk",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-9lk5",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-grik",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-7ajy0",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-7aqrm",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-95cgo",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-5cj2c",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-6du45",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-6wof4",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-1v4u2",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-6z019",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-8clu4",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-8qhb7",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2h6g9",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6ykwt",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9elfb",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-f105",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-49mw9",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-6nfa3",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-6vjjb",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-9vum1",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-2bkez",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-35yj0",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-3qrqh",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-dlyz",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-40cde",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-5p9tg",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-84bu3",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-3kkuo",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-5nzo3",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-84h10",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-51t48",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-56l3t",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-56ul8",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-48qte",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-6c0aw",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-8kqik",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-3qivw",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-5v0vc",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-9rbfy",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-1kbo",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-52kme",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/aspectratio(_:contentmode:)-1mfua",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/aspectratio(_:contentmode:)-4d7mk",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:in:fillstyle:)-3ferv",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:in:fillstyle:)-9oj84",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(in:fillstyle:)-4ylqa",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(in:fillstyle:)-9u628",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-2z4w3",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-34gxu",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-5y7f2",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-70pck",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonstyle(_:)-29uuh",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonstyle(_:)-4m79",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1bwng",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-9eay0",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-9oqmf",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1roas",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4cd2j",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7srwl",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-101eg",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-21cn",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-uj6o",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1lahy",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-k7gw",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-t0q5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentmargins(_:_:for:)-1abl9",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentmargins(_:_:for:)-94kwu",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(_:issuppressed:)-24xtz",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(_:issuppressed:)-6uf26",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(_:issuppressed:)-7v68n",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogconfirmationlabel(_:)-31dnv",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogconfirmationlabel(_:)-4tabh",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogconfirmationlabel(_:)-8z30b",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogmessage(_:)-18viy",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogmessage(_:)-6766h",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogmessage(_:)-7vhux",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5n1jh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-91dfz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5gnst",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-85t4e",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-2goa2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-3868i",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-4qrmr",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-88zjo",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporterfilenamelabel(_:)-2jfk3",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporterfilenamelabel(_:)-6stm5",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporterfilenamelabel(_:)-q4lu",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedobject(_:)-3pmj7",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedobject(_:)-5a0dn",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedsceneobject(_:)-64oy9",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedsceneobject(_:)-6a0ld",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedscenevalue(_:_:)-930pl",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedscenevalue(_:_:)-j6v7",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedvalue(_:_:)-6vcaa",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedvalue(_:_:)-7l8gs",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-233a3",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-3luhj",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-8pdmt",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listitemtint(_:)-2xd3a",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listitemtint(_:)-67zo6",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionspacing(_:)-1ecmg",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionspacing(_:)-1w288",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-2s534",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-32zg2",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-50leu",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-3qlh0",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-89h52",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-9b53q",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:)-3fgs3",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:)-8j1xi",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-2727b",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-4izzy",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-6d48u",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-84abw",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-1m4sd",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-1nbfd",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-2n184",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-315e6",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-5iiji",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onchange(of:initial:_:)-989n2",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onchange(of:initial:_:)-twh4",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/oncontinuoushover(coordinatespace:perform:)-2o2je",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/oncontinuoushover(coordinatespace:perform:)-2quo5",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:delegate:)-3zp2x",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:delegate:)-4u3wt",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-3cmbr",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8fb2r",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8mhfp",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8zy3t",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:coordinatespace:perform:)-2cgeb",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:coordinatespace:perform:)-8k38",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:)-4vz01",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:)-kkvt",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/renameaction(_:)-1orjd",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/renameaction(_:)-274j",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-3018t",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-807e2",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareapadding(_:)-3r146",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareapadding(_:)-3rarv",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(_:anchor:)-1jdqr",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(_:anchor:)-6tdq7",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1sn4s",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1ty9p",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-9c54",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:placement:prompt:token:)-1mnql",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:placement:prompt:token:)-6yjpr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:placement:prompt:token:)-992oc",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:ispresented:placement:prompt:)-1u0uq",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:ispresented:placement:prompt:)-7cq4e",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:ispresented:placement:prompt:)-9d1bf",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-3wdpb",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-5507c",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-5uvhn",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-12o8y",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-2g3sk",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-31a7o",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-677tv",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-74b31",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9nf2x",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-227p1",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-2wj0x",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-7kird",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-78n2d",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8f2em",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8fzgr",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-36wr8",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3t4u",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8yd95",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(content:)-5svjs",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(content:)-6vws2",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarbackground(_:for:)-460ew",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarbackground(_:for:)-4socy",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typeselectequivalent(_:)-1hk32",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typeselectequivalent(_:)-50ugz",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typeselectequivalent(_:)-8o3oj",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typesettinglanguage(_:isenabled:)-323nq",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typesettinglanguage(_:isenabled:)-78mz0",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/labeledvaluetaskview",
            "title" : "LabeledValueTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(instructions:links:header:)",
                "title" : "init(instructions: Text?, links: [LinkItem], header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(title:detail:instructions:links:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, links: [LinkItem])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(activationpoint:)-449po",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(activationpoint:)-9n6ud",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(named:_:)-39e0s",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(named:_:)-8nk4u",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(named:_:)-9sxw7",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactivationpoint(_:)-1d6ok",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactivationpoint(_:)-xexh",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-1dt48",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-1zf5b",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-2fw6i",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-34c5e",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-353f0",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-5fn5q",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-5qoe9",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-6f5z1",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-6t0cb",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-6vi6s",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-8g49a",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-37mlj",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-5f3lr",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-99n8p",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-61lc8",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-71wmb",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-833sl",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-30gf7",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-4jswm",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-74yfo",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-84e1e",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2rexz",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5ur2p",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8tba5",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9djmc",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-5wiwo",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-7szw3",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-97163",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-zohz",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4ci9c",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4kzta",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4m1in",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-97c83",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-5nmva",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-8gzop",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-8idjo",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-4lz5h",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-7ejgs",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-8avx2",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-57nvp",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-63p2z",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-8yqc8",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-1ngm5",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-3i9de",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-6i07f",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-5mvbz",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-86fgz",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-95xp4",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alignmentguide(_:computevalue:)-1kkva",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alignmentguide(_:computevalue:)-2464x",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/aspectratio(_:contentmode:)-1ojo8",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/aspectratio(_:contentmode:)-8fwlv",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:in:fillstyle:)-2zm2s",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:in:fillstyle:)-75mhj",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(in:fillstyle:)-6b8nn",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(in:fillstyle:)-84k8r",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-144q8",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-16qvc",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-1mxfo",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-6d0b6",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonstyle(_:)-24pib",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonstyle(_:)-3y3yi",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4aque",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4qcdy",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8g9ym",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1o5cl",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5epqb",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8sqhe",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-17z8q",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1oegh",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3xdek",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-29sf1",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-40wpq",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-anms",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentmargins(_:_:for:)-2ew6i",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentmargins(_:_:for:)-7x4sz",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(_:issuppressed:)-1xkg7",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(_:issuppressed:)-34j22",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(_:issuppressed:)-9gpha",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogconfirmationlabel(_:)-6hzvs",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogconfirmationlabel(_:)-8srja",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogconfirmationlabel(_:)-x712",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogmessage(_:)-4cpgl",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogmessage(_:)-4d96k",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogmessage(_:)-4ulw1",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1ea19",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6ucyl",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-62fxx",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-7tr5h",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-21vz0",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-525ss",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1v9t7",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9enf7",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporterfilenamelabel(_:)-322ff",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporterfilenamelabel(_:)-4xr8k",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporterfilenamelabel(_:)-9w1ib",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedobject(_:)-76n5e",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedobject(_:)-7h9sf",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedsceneobject(_:)-ghvg",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedsceneobject(_:)-y72q",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedscenevalue(_:_:)-2g7up",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedscenevalue(_:_:)-5sqqc",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedvalue(_:_:)-7dg04",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedvalue(_:_:)-lxna",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-1wewq",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-8jsu",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-o2yz",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listitemtint(_:)-1pdbj",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listitemtint(_:)-3l7z2",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionspacing(_:)-6o5vl",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionspacing(_:)-6v6gt",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-14pyh",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-8kyjc",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-9cz9t",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-26boi",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-43teg",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-8rkm5",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:)-2nq0t",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:)-8row",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-180l3",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-535ge",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-58ate",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-8yrj2",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-4ty35",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-578pr",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-6ngl7",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-6p0j3",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-7klnn",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onchange(of:initial:_:)-1bx8r",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onchange(of:initial:_:)-x55z",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/oncontinuoushover(coordinatespace:perform:)-2e4h3",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/oncontinuoushover(coordinatespace:perform:)-4uhu",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:delegate:)-5ctsh",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:delegate:)-9nots",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-5lul7",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-61m5y",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-6retw",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-9buo3",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:coordinatespace:perform:)-1sk6h",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:coordinatespace:perform:)-34ttv",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:)-7u10l",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:)-dcv7",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/renameaction(_:)-97she",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/renameaction(_:)-i3hb",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareainset(edge:alignment:spacing:content:)-1fweo",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareainset(edge:alignment:spacing:content:)-94rsk",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareapadding(_:)-5104e",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareapadding(_:)-9h206",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(_:anchor:)-3dsi4",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(_:anchor:)-5256",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3033k",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3m0vc",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-7ox1h",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:placement:prompt:token:)-146t9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:placement:prompt:token:)-5qzge",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:placement:prompt:token:)-7bhj7",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:ispresented:placement:prompt:)-3hz1x",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:ispresented:placement:prompt:)-6a7z2",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:ispresented:placement:prompt:)-7dntv",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-2qwco",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-2z3cz",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-8zhax",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-1892m",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-4v3de",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-5kwws",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5n5yq",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8yz0i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:ispresented:placement:prompt:token:)-uzt2",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-2l2wg",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-5voi",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-70o3v",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2xvt2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5bgc2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-84n3x",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1r4mn",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2k550",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8ly8h",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(content:)-5c5dn",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(content:)-5glx",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarbackground(_:for:)-2iia1",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarbackground(_:for:)-7j098",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typeselectequivalent(_:)-3gxek",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typeselectequivalent(_:)-romc",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typeselectequivalent(_:)-tgzw",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typesettinglanguage(_:isenabled:)-5ntu3",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typesettinglanguage(_:isenabled:)-97fue",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/linkview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/linkview",
            "title" : "LinkView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(progress:goal:instructions:iscomplete:header:)",
                "title" : "init(progress: Text, goal: Text, instructions: Text?, isComplete: Bool, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(title:detail:progress:goal:instructions:iscomplete:)",
                "title" : "init(title: Text, detail: Text?, progress: Text, goal: Text, instructions: Text?, isComplete: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(activationpoint:)-2vc4n",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(activationpoint:)-4tke9",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(named:_:)-2achr",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(named:_:)-5lmgp",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(named:_:)-8wla7",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactivationpoint(_:)-51vtv",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactivationpoint(_:)-9tnp2",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1frm",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1ghpc",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1w898",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-2mleb",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-319ii",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-4jnp7",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-84ewu",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-90yl7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-1iyim",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-51wq3",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-zrmy",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-19tdv",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-2yg6m",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-5fwgl",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-3e4bz",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-51osz",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-5b72e",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-103iw",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8g4ij",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8n0es",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8yx0b",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3utdl",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4ee8y",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5lq5f",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-ubuz",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-2k23g",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-3hdnp",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-6gkz2",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-9ici7",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-5gowo",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-6f4dv",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-7oqug",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-7ykt7",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-943nx",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-9hkwn",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-r9ap",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-5cilp",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-6rb6t",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-96vky",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-23j2a",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-8b9vt",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-9uxwe",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-30t30",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-9eyu3",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-tvlv",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-1xjmu",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-8s6qp",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-daic",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alignmentguide(_:computevalue:)-13uqz",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alignmentguide(_:computevalue:)-9tmm2",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/aspectratio(_:contentmode:)-4f5lg",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/aspectratio(_:contentmode:)-5vpey",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:in:fillstyle:)-1f95p",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:in:fillstyle:)-8or85",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(in:fillstyle:)-18jui",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(in:fillstyle:)-53s10",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-1wpt",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-8857w",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-8up1h",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-9bh97",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonstyle(_:)-1cl4e",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonstyle(_:)-6kaw4",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-17tns",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1gmvt",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4hbbr",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2pda6",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6r7ss",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7170r",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-33e5x",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4r5f1",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-h0h9",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-10tuq",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8aon5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9bfa7",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentmargins(_:_:for:)-6nrbu",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentmargins(_:_:for:)-7smyn",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(_:issuppressed:)-1bdlt",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(_:issuppressed:)-75xur",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(_:issuppressed:)-96lbp",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogconfirmationlabel(_:)-611o6",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogconfirmationlabel(_:)-61t7v",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogconfirmationlabel(_:)-6bv6c",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogmessage(_:)-2f4jy",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogmessage(_:)-5nvvc",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogmessage(_:)-dxc5",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5268l",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5i61a",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-2d08s",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5o0oh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1x49d",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4sx2o",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-7na5h",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9z7nq",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporterfilenamelabel(_:)-9y6rg",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporterfilenamelabel(_:)-e51b",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporterfilenamelabel(_:)-g5dq",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedobject(_:)-2ta9v",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedobject(_:)-397am",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedsceneobject(_:)-4f3v8",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedsceneobject(_:)-75ouk",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedscenevalue(_:_:)-61zb9",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedscenevalue(_:_:)-6w96t",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedvalue(_:_:)-41eal",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedvalue(_:_:)-5lwk0",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-1jiu1",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-71rsq",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-sljs",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listitemtint(_:)-728xi",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listitemtint(_:)-nelk",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionspacing(_:)-5knvc",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionspacing(_:)-71eec",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-472rx",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-5s0ca",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-9sba3",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-26s0h",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-3rdo4",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-6h9zd",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:)-7r2w9",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:)-9qrd",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-1doit",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-4ghzl",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-57kou",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-7tywp",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-16h4k",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-5rsmp",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-5u0d7",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-6rgag",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-h812",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onchange(of:initial:_:)-1vqxd",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onchange(of:initial:_:)-84cko",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/oncontinuoushover(coordinatespace:perform:)-38jtj",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/oncontinuoushover(coordinatespace:perform:)-561ce",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:delegate:)-46frb",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:delegate:)-6crxh",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-14xdb",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-31n9d",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-32r9n",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-731oi",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:coordinatespace:perform:)-9duwr",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:coordinatespace:perform:)-e0ad",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:)-4gnw1",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:)-9sii2",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/renameaction(_:)-53to2",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/renameaction(_:)-vit7",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-6c9bv",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-fqej",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareapadding(_:)-4lj12",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareapadding(_:)-fd5l",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(_:anchor:)-35thi",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(_:anchor:)-7llxq",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-171j4",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4ooso",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-78krz",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:placement:prompt:token:)-1lr7a",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:placement:prompt:token:)-2h7ox",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:placement:prompt:token:)-8j32z",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:ispresented:placement:prompt:)-1rhj8",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:ispresented:placement:prompt:)-9syl3",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:ispresented:placement:prompt:)-csa3",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-3mhky",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-575ul",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-rjt0",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-2dqg8",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-37zfx",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-m9rx",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-4pa2f",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-73qt0",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9205i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-5eoyh",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-5hnit",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-7yr9r",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-1alwb",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4ye67",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8nie1",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-12zio",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-21sy3",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5oqct",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(content:)-kv8l",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(content:)-mbea",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarbackground(_:for:)-3pvn4",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarbackground(_:for:)-8wa3i",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typeselectequivalent(_:)-4ht63",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typeselectequivalent(_:)-76poc",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typeselectequivalent(_:)-8qvih",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typesettinglanguage(_:isenabled:)-5nngf",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typesettinglanguage(_:isenabled:)-8ym3f",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/numericprogresstaskview",
            "title" : "NumericProgressTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimationstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimationstyle\/statechangeduration",
                    "title" : "var stateChangeDuration: Double",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimationstyle\/ockanimationstyler-implementations",
                "title" : "OCKAnimationStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimationstyle",
            "title" : "OCKAnimationStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockappearancestyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/borderwidth1",
                    "title" : "var borderWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/borderwidth2",
                    "title" : "var borderWidth2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/cornerradius1",
                    "title" : "var cornerRadius1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/cornerradius2",
                    "title" : "var cornerRadius2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/linewidth1",
                    "title" : "var lineWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/opacity1",
                    "title" : "var opacity1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowoffset1",
                    "title" : "var shadowOffset1: CGSize",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowopacity1",
                    "title" : "var shadowOpacity1: Float",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowradius1",
                    "title" : "var shadowRadius1: CGFloat",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyle\/ockappearancestyler-implementations",
                "title" : "OCKAppearanceStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockappearancestyle",
            "title" : "OCKAppearanceStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/black",
                    "title" : "var black: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/clear",
                    "title" : "var clear: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/custombackground",
                    "title" : "var customBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customblue",
                    "title" : "var customBlue: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customfill",
                    "title" : "var customFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray",
                    "title" : "var customGray: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray2",
                    "title" : "var customGray2: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray3",
                    "title" : "var customGray3: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray4",
                    "title" : "var customGray4: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray5",
                    "title" : "var customGray5: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgroupedbackground",
                    "title" : "var customGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/label",
                    "title" : "var label: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/quaternarycustomfill",
                    "title" : "var quaternaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustombackground",
                    "title" : "var secondaryCustomBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustomfill",
                    "title" : "var secondaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustomgroupedbackground",
                    "title" : "var secondaryCustomGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarylabel",
                    "title" : "var secondaryLabel: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/separator",
                    "title" : "var separator: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarycustomfill",
                    "title" : "var tertiaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarycustomgroupedbackground",
                    "title" : "var tertiaryCustomGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarylabel",
                    "title" : "var tertiaryLabel: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/white",
                    "title" : "var white: UIColor",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyle\/ockcolorstyler-implementations",
                "title" : "OCKColorStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcolorstyle",
            "title" : "OCKColorStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(datapoints:title:gradientstartcolor:gradientendcolor:size:)",
                "title" : "init(dataPoints: [CGPoint], title: String, gradientStartColor: UIColor, gradientEndColor: UIColor, size: CGFloat)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(datapoints:title:size:color:)",
                "title" : "init(dataPoints: [CGPoint], title: String, size: CGFloat, color: UIColor?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(values:title:gradientstartcolor:gradientendcolor:size:)",
                "title" : "init(values: [CGFloat], title: String, gradientStartColor: UIColor, gradientEndColor: UIColor, size: CGFloat)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(values:title:size:color:)",
                "title" : "init(values: [CGFloat], title: String, size: CGFloat, color: UIColor?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/accessibilitylabels",
                "title" : "var accessibilityLabels: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/datapoints",
                "title" : "var dataPoints: [CGPoint]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/gradientendcolor",
                "title" : "var gradientEndColor: UIColor?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/gradientstartcolor",
                "title" : "var gradientStartColor: UIColor?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/size",
                "title" : "var size: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdataseries\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdataseries\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdataseries",
            "title" : "OCKDataSeries",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdimensionstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight1",
                    "title" : "var buttonHeight1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight2",
                    "title" : "var buttonHeight2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight3",
                    "title" : "var buttonHeight3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight4",
                    "title" : "var buttonHeight4: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/directionalinsets1",
                    "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/directionalinsets2",
                    "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/imageheight1",
                    "title" : "var imageHeight1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/imageheight2",
                    "title" : "var imageHeight2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/linewidth1",
                    "title" : "var lineWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize1",
                    "title" : "var pointSize1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize2",
                    "title" : "var pointSize2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize3",
                    "title" : "var pointSize3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/separatorheight",
                    "title" : "var separatorHeight: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/stackspacing1",
                    "title" : "var stackSpacing1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize1",
                    "title" : "var symbolPointSize1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize2",
                    "title" : "var symbolPointSize2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize3",
                    "title" : "var symbolPointSize3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize4",
                    "title" : "var symbolPointSize4: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize5",
                    "title" : "var symbolPointSize5: CGFloat",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyle\/ockdimensionstyler-implementations",
                "title" : "OCKDimensionStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdimensionstyle",
            "title" : "OCKDimensionStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklog\/level",
                "title" : "static var level: OSLogType",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/init(layout:greaterthanorequaltocontentsizecategory:)",
                    "title" : "init(layout: Layout, greaterThanOrEqualToContentSizeCategory: UIContentSizeCategory)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/contentsizecategory",
                    "title" : "let contentSizeCategory: UIContentSizeCategory",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/layout",
                    "title" : "let layout: Layout",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule",
                "title" : "OCKResponsiveLayout.Rule",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/init(sizeclass:rules:)",
                    "title" : "init(sizeClass: SizeClass, rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/init(sizeclasses:rules:)",
                    "title" : "init(sizeClasses: [SizeClass], rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>])",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/rules",
                    "title" : "let rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/sizeclasses",
                    "title" : "let sizeClasses: [SizeClass]",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset",
                "title" : "OCKResponsiveLayout.SizeClassRuleSet",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/init(defaultlayout:anysizeclassruleset:sizeclassspecificrulesets:)",
                "title" : "init(defaultLayout: LayoutOption, anySizeClassRuleSet: [OCKResponsiveLayout.Rule<LayoutOption>], sizeClassSpecificRuleSets: [SizeClassRuleSet])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/defaultruleset",
                "title" : "let defaultRuleSet: SizeClassRuleSet",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassspecificrulesets",
                "title" : "let sizeClassSpecificRuleSets: [SizeClassRuleSet]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/responsivelayoutrule(traitcollection:)",
                "title" : "func responsiveLayoutRule(traitCollection: UITraitCollection) -> LayoutOption",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclass",
                "title" : "OCKResponsiveLayout.SizeClass",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockresponsivelayout",
            "title" : "OCKResponsiveLayout",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/animation",
                    "title" : "var animation: OCKAnimationStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/appearance",
                    "title" : "var appearance: OCKAppearanceStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/color",
                    "title" : "var color: OCKColorStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/dimension",
                    "title" : "var dimension: OCKDimensionStyler",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyle\/ockstyler-implementations",
                "title" : "OCKStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstyle",
            "title" : "OCKStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/init(iscomplete:content:)",
                "title" : "init(isComplete: Bool, content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(activationpoint:)-1g3i4",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(activationpoint:)-5687a",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(named:_:)-2hqbk",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(named:_:)-42tsy",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(named:_:)-7xreg",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactivationpoint(_:)-1bf69",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactivationpoint(_:)-4k0ht",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-1pwh7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2t9j5",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-32kgu",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-53fg7",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-6xuoh",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-70762",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-8q2ae",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-zewq",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-5gvx6",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-9gf37",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-9n33l",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-18auc",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-3gbdg",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-6wrfi",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-1ckt",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-5bbvh",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-87n2q",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-1ze7k",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-2noa3",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-7a1xt",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-82c9s",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-57443",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6m8ne",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9amsh",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-uqqd",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-3o0ev",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-4mnfq",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-5n92k",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-6jnxc",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-19v1p",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-50h5q",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-5gxpa",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-62zem",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-34ncv",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-5lm3g",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-6a040",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-1s71u",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-4b0tz",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-9a5me",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-8ffyn",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-8jvnp",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-9kumq",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-24bsk",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-4if8y",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-57176",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-3um8u",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-59vx8",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-eccf",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alignmentguide(_:computevalue:)-7hoin",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alignmentguide(_:computevalue:)-8ouyd",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/aspectratio(_:contentmode:)-4e2ar",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/aspectratio(_:contentmode:)-9b12e",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:in:fillstyle:)-4kfwz",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:in:fillstyle:)-8mhz2",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(in:fillstyle:)-3q3vn",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(in:fillstyle:)-6m0uz",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-30krk",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-5vq9e",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-6y969",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-8f344",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonstyle(_:)-811bz",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonstyle(_:)-9xhvx",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-73hlf",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-89kmz",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-a86r",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-62opj",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-sup7",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-u53w",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3tkoa",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-57npp",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5k9mz",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2w7x0",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7us4n",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-hrbk",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentmargins(_:_:for:)-5dv5j",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentmargins(_:_:for:)-6af3l",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-10m1k",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-34w90",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-6dc22",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogconfirmationlabel(_:)-78icz",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogconfirmationlabel(_:)-7kg6t",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogconfirmationlabel(_:)-84c1q",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogmessage(_:)-3nm3o",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogmessage(_:)-64ol1",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogmessage(_:)-6eddd",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5nl3s",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6f237",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-1p1or",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-9y2yi",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-12t6c",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-nwhu",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-15o4m",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1z11o",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporterfilenamelabel(_:)-1s55x",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporterfilenamelabel(_:)-33lfs",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporterfilenamelabel(_:)-3tvdn",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedobject(_:)-6jmlt",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedobject(_:)-uxol",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedsceneobject(_:)-1jg6b",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedsceneobject(_:)-49l26",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedscenevalue(_:_:)-1m4m",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedscenevalue(_:_:)-58tt4",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedvalue(_:_:)-11kj6",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedvalue(_:_:)-4i6ys",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-1yikw",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-76wtt",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-8sbt6",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listitemtint(_:)-40rk1",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listitemtint(_:)-8fwrs",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionspacing(_:)-8k2z0",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionspacing(_:)-9bkq7",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-6itrd",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-6ovdl",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-8y94x",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-3b8yk",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-4yik9",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-7ixnw",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:)-5q9oo",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:)-69myg",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-102ue",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-1ewma",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-4fri1",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-53bbl",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-7hnmx",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-89jqy",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-99pho",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-emdq",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-s6b9",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onchange(of:initial:_:)-2yc7x",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onchange(of:initial:_:)-pmjj",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/oncontinuoushover(coordinatespace:perform:)-1thmp",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/oncontinuoushover(coordinatespace:perform:)-3cdx6",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:delegate:)-522mu",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:delegate:)-6oddc",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-3lqlx",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-4yjy8",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-65um1",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-6umd6",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:coordinatespace:perform:)-4ej5x",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:coordinatespace:perform:)-6bezz",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:)-3vzv6",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:)-4pfgk",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/renameaction(_:)-4syvo",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/renameaction(_:)-5ejmp",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareainset(edge:alignment:spacing:content:)-62n5m",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareainset(edge:alignment:spacing:content:)-71wbm",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareapadding(_:)-7ttlw",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareapadding(_:)-9ciyc",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(_:anchor:)-18m0f",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(_:anchor:)-9uo1o",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1u4v8",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8llsv",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-9yuru",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-6jpb0",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-9aki4",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-9n9p0",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:ispresented:placement:prompt:)-209b2",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:ispresented:placement:prompt:)-4v5zx",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:ispresented:placement:prompt:)-v7s5",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-3hw25",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-8v0x5",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-e06s",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-3uzy0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-3z1as",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-6wdjr",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8a52w",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8pdyt",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8ryez",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-59pz4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-5mh85",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-7my4g",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-3rkw6",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-485ty",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-vya0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-468pq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6knp",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8qhe7",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(content:)-532cy",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(content:)-o4v6",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarbackground(_:for:)-7uyby",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarbackground(_:for:)-9212z",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typeselectequivalent(_:)-1bstq",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typeselectequivalent(_:)-5vgw7",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typeselectequivalent(_:)-9io9o",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typesettinglanguage(_:isenabled:)-29hpy",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typesettinglanguage(_:isenabled:)-3nwpe",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/rectangularcompletionview",
            "title" : "RectangularCompletionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(iscomplete:action:header:)",
                "title" : "init(isComplete: Bool, action: () -> Void, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(title:detail:iscomplete:action:)",
                "title" : "init(title: Text, detail: Text?, isComplete: Bool, action: () -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(activationpoint:)-408pk",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(activationpoint:)-5olrw",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(named:_:)-1z7g",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(named:_:)-68bcn",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(named:_:)-7hpuc",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactivationpoint(_:)-2mnzt",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactivationpoint(_:)-9k23b",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-13roy",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-2us44",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-35p1b",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-35zst",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-42ouu",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-8slwr",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-jkui",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-kw06",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-6u6or",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-9pvlz",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-me0z",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-5p528",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-5q7ud",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-7f7ev",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-5pa25",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-6306l",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-l2dn",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-3u6vn",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-8o3g0",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-95424",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-9vljd",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1girv",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1kn1q",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-54ry8",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5mxhp",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-3qqjm",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-5rdb1",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-5yur4",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-7py0z",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-2p1k4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-754jl",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-7cxd0",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-84fg8",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-3uuxs",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-522bi",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-53a4h",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-5vo28",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-8io7m",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-93oxi",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-2s28d",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-9yozw",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-k9gp",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-2njox",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-3xe3c",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-5cwd8",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-1us0p",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-5vyg6",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-671w8",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alignmentguide(_:computevalue:)-7uuqp",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alignmentguide(_:computevalue:)-st5v",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/aspectratio(_:contentmode:)-3wl3v",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/aspectratio(_:contentmode:)-6x88k",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:in:fillstyle:)-4z1q4",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:in:fillstyle:)-75b37",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(in:fillstyle:)-7ee0z",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(in:fillstyle:)-y3q4",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-1ds72",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-1fjzi",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-2ka7p",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-8vwt1",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonstyle(_:)-3ue4q",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonstyle(_:)-sxq7",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1zs4m",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-43omv",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7x7mt",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-149ak",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3g182",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6eiw8",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5d5qs",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7ffm3",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-wgc9",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-3c99x",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8223o",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8gzm5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentmargins(_:_:for:)-6bqyt",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentmargins(_:_:for:)-8ihm9",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(_:issuppressed:)-8shwj",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(_:issuppressed:)-9vt2d",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(_:issuppressed:)-tn1l",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogconfirmationlabel(_:)-2ej6m",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogconfirmationlabel(_:)-3p1ah",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogconfirmationlabel(_:)-59rkb",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogmessage(_:)-9dblq",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogmessage(_:)-d9j2",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogmessage(_:)-zsf4",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6npyb",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8dcvd",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6ix68",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8mkeb",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-8gcj9",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9azvv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-3qd2t",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-wvh2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporterfilenamelabel(_:)-1pjfv",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporterfilenamelabel(_:)-1t26n",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporterfilenamelabel(_:)-6vexn",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedobject(_:)-3k966",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedobject(_:)-5nh62",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedsceneobject(_:)-7pz26",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedsceneobject(_:)-9sr1i",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedscenevalue(_:_:)-5xrv0",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedscenevalue(_:_:)-8z2r4",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedvalue(_:_:)-8l8ll",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedvalue(_:_:)-9y9wy",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-2cbos",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-6mlko",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-x4h8",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listitemtint(_:)-3xa40",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listitemtint(_:)-5sich",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionspacing(_:)-5iemo",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionspacing(_:)-86tdc",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-4b7pg",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-5z9xp",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-91o3",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-2hh5z",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-4rsyc",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-8jls4",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:)-4llo3",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:)-ag7t",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-10qcw",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-1kwvq",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-1kyw8",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-3owx0",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-14n83",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-2hsdb",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-7345",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-7ti91",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-8iw80",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onchange(of:initial:_:)-4cit9",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onchange(of:initial:_:)-9pm7h",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/oncontinuoushover(coordinatespace:perform:)-1nruk",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/oncontinuoushover(coordinatespace:perform:)-747ic",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:delegate:)-3o29b",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:delegate:)-9bgpx",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-3zdr6",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-4ddg",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-58x5i",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-6asbp",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:coordinatespace:perform:)-1jll2",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:coordinatespace:perform:)-2wx92",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:)-1l7vx",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:)-9virb",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/renameaction(_:)-4wnk",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/renameaction(_:)-5s158",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-7q8u1",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-8el2l",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareapadding(_:)-1vh4a",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareapadding(_:)-3qx1q",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(_:anchor:)-59mig",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(_:anchor:)-97oo8",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-29pqc",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-7mogr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-7vscg",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:placement:prompt:token:)-16n37",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:placement:prompt:token:)-17r3u",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:placement:prompt:token:)-77hn3",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:ispresented:placement:prompt:)-3rskb",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:ispresented:placement:prompt:)-5z3gp",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:ispresented:placement:prompt:)-vbza",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-1iudg",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-1o6ol",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-7l30c",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-31y3a",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-39pkz",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-y2e0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-39te5",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6hj8v",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8yfli",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-2kjsg",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-673lp",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-7bawk",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2p5gi",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-6jm0s",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7c86k",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-67pci",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7b2he",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7fjvt",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(content:)-3q42t",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(content:)-5oyhp",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarbackground(_:for:)-2jdf5",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarbackground(_:for:)-8efy",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typeselectequivalent(_:)-70jlb",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typeselectequivalent(_:)-8lzx1",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typeselectequivalent(_:)-8uzrs",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typesettinglanguage(_:isenabled:)-5ijfe",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typesettinglanguage(_:isenabled:)-5letp",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/simpletaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/simpletaskview",
            "title" : "SimpleTaskView",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/carekitui\/loc(_:_:arguments:)",
            "title" : "func loc(String, String, arguments: [CVarArg]) -> String",
            "type" : "func"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstatus\/complete(_:_:)",
                "title" : "case complete(Text, Text?)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstatus\/incomplete(_:)",
                "title" : "case incomplete(Text)",
                "type" : "case"
              }
            ],
            "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstatus",
            "title" : "LabeledValueTaskViewStatus",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/appstore(id:title:)",
                "title" : "case appStore(id: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/call(phonenumber:title:)",
                "title" : "case call(phoneNumber: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/email(recipient:title:)",
                "title" : "case email(recipient: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/location(_:_:title:)",
                "title" : "case location(String, String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/message(phonenumber:title:)",
                "title" : "case message(phoneNumber: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/url(_:title:symbol:)",
                "title" : "case url(URL, title: String, symbol: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/website(_:title:)",
                "title" : "case website(String, title: String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkitem\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/linkitem\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/linkitem",
            "title" : "LinkItem",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/dimmed",
                "title" : "case dimmed",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/empty",
                "title" : "case empty",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/progress(_:)",
                "title" : "case progress(CGFloat)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/zero",
                "title" : "case zero",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcompletionstate\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionstate",
            "title" : "OCKCompletionState",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekitui",
        "title" : "CareKitUI",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/init(_:)-1tqf4",
                "title" : "init(some Collection<Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/init(minimumcapacity:)",
                "title" : "init(minimumCapacity: Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/init(unsafeuninitializedcapacity:initializingwith:)",
                "title" : "init(unsafeUninitializedCapacity: Int, initializingWith: (inout UnsafeMutableBufferPointer<Element>, inout Int) throws -> Void) rethrows",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/append(contentsof:)-29aoh",
                "title" : "func append(contentsOf: some Collection<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/popfirst()",
                "title" : "func popFirst() -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/prepend(_:)",
                "title" : "func prepend(Element)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/prepend(contentsof:)-51zn6",
                "title" : "func prepend(contentsOf: some Collection<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/prepend(contentsof:)-96y15",
                "title" : "func prepend(contentsOf: some Sequence<Element>)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstrange(of:)-6o81s",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined(separator:)-7f1k2",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/contains(_:)-1wjaz",
                    "title" : "func contains<C>(C) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstrange(of:)-81nai",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/map(_:)-885cp",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-24der",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-82ctn",
                    "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-1klky",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-6ee8i",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-ejld",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index",
                    "title" : "Deque.Index",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/indices-swift.typealias",
                    "title" : "Deque.Indices",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subsequence",
                    "title" : "Deque.SubSequence",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Element...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/expressiblebyarrayliteral-implementations",
                "title" : "ExpressibleByArrayLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/partition(by:)-7fwft",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/partition(by:)-90y0t",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffle(using:)",
                    "title" : "func shuffle<T>(using: inout T)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sort(by:)",
                    "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/swapat(_:_:)-2riuy",
                    "title" : "func swapAt(Self.Index, Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/swapat(_:_:)-7910s",
                    "title" : "func swapAt(Int, Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousmutablestorageifavailable(_:)-4goyj",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousmutablestorageifavailable(_:)-9ksuh",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-1b1nh",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-1li81",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-2gsji",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-3hvat",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-47peg",
                    "title" : "subscript(Range<Self.Index>) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/mutablecollection-implementations",
                "title" : "MutableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/indices-swift.property",
                    "title" : "var indices: Range<Int>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-22tpo",
                    "title" : "subscript(Range<Int>) -> Slice<`Self`>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-9nk44",
                    "title" : "subscript(Int) -> Element",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+(_:_:)-2ezjl",
                    "title" : "static func + <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+(_:_:)-2udes",
                    "title" : "static func + <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+(_:_:)-647oo",
                    "title" : "static func + <Other>(Other, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+=(_:_:)",
                    "title" : "static func += <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(_:)-2pl79",
                    "title" : "init<S>(S)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(_:)-8tyaw",
                    "title" : "init(some Sequence<Element>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(repeating:count:)-4v1gt",
                    "title" : "init(repeating: Element, count: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(repeating:count:)-5n2n3",
                    "title" : "init(repeating: Self.Element, count: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(_:)-6xmiz",
                    "title" : "func append(Self.Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(_:)-9h4m7",
                    "title" : "func append(Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(contentsof:)-6ewjz",
                    "title" : "func append<S>(contentsOf: S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(contentsof:)-8rqnl",
                    "title" : "func append(contentsOf: some Sequence<Element>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/applying(_:)",
                    "title" : "func applying(CollectionDifference<Self.Element>) -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(_:at:)-6fcpk",
                    "title" : "func insert(Self.Element, at: Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(_:at:)-9hsp7",
                    "title" : "func insert(Element, at: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(contentsof:at:)-1d60f",
                    "title" : "func insert(contentsOf: some Collection<Element>, at: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(contentsof:at:)-quf0",
                    "title" : "func insert<C>(contentsOf: C, at: Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/poplast()",
                    "title" : "func popLast() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/remove(at:)-25pt",
                    "title" : "func remove(at: Self.Index) -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/remove(at:)-3imgi",
                    "title" : "func remove(at: Int) -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(keepingcapacity:)-2cas8",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(keepingcapacity:)-yeby",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(where:)-2ynh1",
                    "title" : "func removeAll(where: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(where:)-5e3im",
                    "title" : "func removeAll(where: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst()-1vdmt",
                    "title" : "func removeFirst() -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst()-5sg5i",
                    "title" : "func removeFirst() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst(_:)-2vuji",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst(_:)-8phg7",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removelast()",
                    "title" : "func removeLast() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removelast(_:)",
                    "title" : "func removeLast(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removesubrange(_:)-3ab3y",
                    "title" : "func removeSubrange<R>(R)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removesubrange(_:)-6dkhw",
                    "title" : "func removeSubrange(Range<Self.Index>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removesubrange(_:)-8oy85",
                    "title" : "func removeSubrange(Range<Int>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replace(_:with:maxreplacements:)",
                    "title" : "func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacesubrange(_:with:)-1sroc",
                    "title" : "func replaceSubrange<C>(Range<Self.Index>, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacesubrange(_:with:)-2xunu",
                    "title" : "func replaceSubrange<C, R>(R, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacesubrange(_:with:)-5rtzd",
                    "title" : "func replaceSubrange(Range<Int>, with: some Collection<Element>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacing(_:with:maxreplacements:)",
                    "title" : "func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacing(_:with:subrange:maxreplacements:)",
                    "title" : "func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reservecapacity(_:)-7qlut",
                    "title" : "func reserveCapacity(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reservecapacity(_:)-9lqxx",
                    "title" : "func reserveCapacity(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimprefix(_:)",
                    "title" : "func trimPrefix<Prefix>(Prefix)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimprefix(while:)",
                    "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/rangereplaceablecollection-implementations",
                "title" : "RangeReplaceableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/dequemodule\/deque\/iterator\/next()",
                        "title" : "func next() -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/dequemodule\/deque\/iterator",
                    "title" : "Deque.Iterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/contains(_:)-8w2ss",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/flatmap(_:)-3f66n",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/flatmap(_:)-4q9nu",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined(separator:)-4husz",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined(separator:)-4r7h7",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/makeiterator()",
                    "title" : "func makeIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/map(_:)-47t1m",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-3lk93",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousstorageifavailable(_:)-4bcpo",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousstorageifavailable(_:)-b0eu",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/dequemodule\/deque",
            "title" : "Deque",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/dequemodule",
        "title" : "DequeModule",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/internalcollectionsutilities",
        "title" : "InternalCollectionsUtilities",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/keys",
                    "title" : "var keys: OrderedSet<Key>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/values",
                    "title" : "var values: OrderedDictionary.Values",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(forkey:)",
                    "title" : "func index(forKey: Key) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/partition(by:)",
                    "title" : "func partition(by: (Element) throws -> Bool) rethrows -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/remove(at:)",
                    "title" : "func remove(at: Int) -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removeall(keepingcapacity:)",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removeall(where:)",
                    "title" : "func removeAll(where: (`Self`.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removefirst()",
                    "title" : "func removeFirst() -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removefirst(_:)",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removelast()",
                    "title" : "func removeLast() -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removelast(_:)",
                    "title" : "func removeLast(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-5x7oo",
                    "title" : "func removeSubrange(some RangeExpression<Int>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-7wdak",
                    "title" : "func removeSubrange(Range<Int>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffle(using:)",
                    "title" : "func shuffle(using: inout some RandomNumberGenerator)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sort(by:)",
                    "title" : "func sort(by: (Element, Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/swapat(_:_:)",
                    "title" : "func swapAt(Int, Int)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/map(_:)-4vxr9",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-18wmp",
                        "title" : "subscript<R>(R) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-ybix",
                        "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/custommirror",
                        "title" : "var customMirror: Mirror",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/customreflectable-implementations",
                    "title" : "CustomReflectable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/==(_:_:)",
                        "title" : "static func == (`Self`, `Self`) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/keys",
                            "title" : "var keys: OrderedSet<Key>.SubSequence",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/values",
                            "title" : "var values: OrderedDictionary.Values.SubSequence",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(forkey:)",
                            "title" : "func index(forKey: Key) -> Int?",
                            "type" : "method"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/last",
                                "title" : "var last: Self.Element?",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/difference(from:by:)",
                                "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/droplast(_:)",
                                "title" : "func dropLast(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/last(where:)",
                                "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/lastindex(where:)",
                                "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/poplast()",
                                "title" : "func popLast() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast()",
                                "title" : "func removeLast() -> Self.Element",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast(_:)",
                                "title" : "func removeLast(Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/reversed()",
                                "title" : "func reversed() -> ReversedCollection<Self>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(_:)",
                                "title" : "func suffix(Int) -> Self.SubSequence",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/bidirectionalcollection-implementations",
                            "title" : "BidirectionalCollection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/count",
                                "title" : "var count: Int",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/first",
                                "title" : "var first: Self.Element?",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/isempty",
                                "title" : "var isEmpty: Bool",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/underestimatedcount",
                                "title" : "var underestimatedCount: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/drop(while:)",
                                "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/dropfirst(_:)",
                                "title" : "func dropFirst(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/firstindex(where:)",
                                "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:)",
                                "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:limitedby:)",
                                "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-4t4nh",
                                "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/popfirst()",
                                "title" : "func popFirst() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(_:)",
                                "title" : "func prefix(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(through:)",
                                "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(upto:)",
                                "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(while:)",
                                "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement()",
                                "title" : "func randomElement() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement(using:)",
                                "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst()",
                                "title" : "func removeFirst() -> Self.Element",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst(_:)",
                                "title" : "func removeFirst(Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                                "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(from:)",
                                "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimprefix(while:)",
                                "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimmingprefix(while:)",
                                "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "title" : "Subscripts",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-7s7y6",
                                "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                                "type" : "subscript"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-98vi9",
                                "title" : "subscript<R>(R) -> Self.SubSequence",
                                "type" : "subscript"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/collection-implementations",
                            "title" : "Collection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/debugdescription",
                                "title" : "var debugDescription: String",
                                "type" : "property"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/customdebugstringconvertible-implementations",
                            "title" : "CustomDebugStringConvertible Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/description",
                                "title" : "var description: String",
                                "type" : "property"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/customstringconvertible-implementations",
                            "title" : "CustomStringConvertible Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/endindex",
                                "title" : "var endIndex: Int",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.property",
                                "title" : "var indices: Range<Int>",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/startindex",
                                "title" : "var startIndex: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/distance(from:to:)",
                                "title" : "func distance(from: Int, to: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(after:)",
                                "title" : "func formIndex(after: inout Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(before:)",
                                "title" : "func formIndex(before: inout Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:)",
                                "title" : "func index(Int, offsetBy: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:limitedby:)",
                                "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(after:)",
                                "title" : "func index(after: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(before:)",
                                "title" : "func index(before: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "title" : "Subscripts",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-38loo",
                                "title" : "subscript(Range<Int>) -> SubSequence",
                                "type" : "subscript"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-68n2a",
                                "title" : "subscript(Int) -> Element",
                                "type" : "subscript"
                              },
                              {
                                "title" : "Type Aliases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index",
                                "title" : "OrderedDictionary.Elements.SubSequence.Index",
                                "type" : "typealias"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.typealias",
                                "title" : "OrderedDictionary.Elements.SubSequence.Indices",
                                "type" : "typealias"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subsequence",
                                "title" : "OrderedDictionary.Elements.SubSequence.SubSequence",
                                "type" : "typealias"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomaccesscollection-implementations",
                            "title" : "RandomAccessCollection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Structures",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator\/next()",
                                    "title" : "func next() -> Element?",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator",
                                "title" : "OrderedDictionary.Elements.SubSequence.Iterator",
                                "type" : "struct"
                              },
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/lazy",
                                "title" : "var lazy: LazySequence<Self>",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/allsatisfy(_:)",
                                "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/compactmap(_:)",
                                "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/contains(where:)",
                                "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/elementsequal(_:by:)",
                                "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/enumerated()",
                                "title" : "func enumerated() -> EnumeratedSequence<Self>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/filter(_:)",
                                "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/first(where:)",
                                "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-2beoe",
                                "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-88yc7",
                                "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/foreach(_:)",
                                "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/lexicographicallyprecedes(_:by:)",
                                "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/makeiterator()",
                                "title" : "func makeIterator() -> Iterator",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-5srcs",
                                "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/max(by:)",
                                "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/min(by:)",
                                "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(_:_:)",
                                "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(into:_:)",
                                "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled()",
                                "title" : "func shuffled() -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled(using:)",
                                "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/sorted(by:)",
                                "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/starts(with:by:)",
                                "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/withcontiguousstorageifavailable(_:)",
                                "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                                "type" : "method"
                              },
                              {
                                "title" : "Type Aliases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/element",
                                "title" : "OrderedDictionary.Elements.SubSequence.Element",
                                "type" : "typealias"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/sequence-implementations",
                            "title" : "Sequence Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence",
                        "title" : "OrderedDictionary.Elements.SubSequence",
                        "type" : "struct"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/distance(from:to:)",
                        "title" : "func distance(from: Int, to: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(after:)",
                        "title" : "func formIndex(after: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(before:)",
                        "title" : "func formIndex(before: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:)",
                        "title" : "func index(Int, offsetBy: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(after:)",
                        "title" : "func index(after: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(before:)",
                        "title" : "func index(before: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-4xwc2",
                        "title" : "subscript(Int) -> Element",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-5kdk6",
                        "title" : "subscript(Range<Int>) -> SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index",
                        "title" : "OrderedDictionary.Elements.Index",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/indices",
                        "title" : "OrderedDictionary.Elements.Indices",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-806a1",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-91r64",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/makeiterator()",
                        "title" : "func makeIterator() -> OrderedDictionary<Key, Value>.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/map(_:)-5j1b0",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/element",
                        "title" : "OrderedDictionary.Elements.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct",
                "title" : "OrderedDictionary.Elements",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/elements",
                    "title" : "var elements: Array<Value>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withunsafebufferpointer(_:)",
                    "title" : "func withUnsafeBufferPointer<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withunsafemutablebufferpointer(_:)",
                    "title" : "func withUnsafeMutableBufferPointer<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/difference(from:)",
                        "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-3nlux",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined(separator:)-1mqyi",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lastindex(of:)",
                        "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/contains(_:)-316th",
                        "title" : "func contains<C>(C) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstindex(of:)",
                        "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-1abqc",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(of:)",
                        "title" : "func index(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/makeiterator()",
                        "title" : "func makeIterator() -> IndexingIterator<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/map(_:)-35c33",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/ranges(of:)",
                        "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-10hnb",
                        "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7mv79",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/trimmingprefix(_:)",
                        "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/==(_:_:)",
                        "title" : "static func == (`Self`, `Self`) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/partition(by:)-6cdt6",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/partition(by:)-7ahp1",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/partition(by:)-9x0i5",
                        "title" : "func partition(by: (Value) throws -> Bool) rethrows -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reverse()",
                        "title" : "func reverse()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffle()",
                        "title" : "func shuffle()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffle(using:)",
                        "title" : "func shuffle<T>(using: inout T)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sort()",
                        "title" : "func sort()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sort(by:)",
                        "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-77eiy",
                        "title" : "func swapAt(Int, Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-7t6ng",
                        "title" : "func swapAt(Self.Index, Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-3l1og",
                        "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-4xcqv",
                        "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/mutablecollection-implementations",
                    "title" : "MutableCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/distance(from:to:)",
                        "title" : "func distance(from: Int, to: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(after:)",
                        "title" : "func formIndex(after: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(before:)",
                        "title" : "func formIndex(before: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:)",
                        "title" : "func index(Int, offsetBy: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(after:)",
                        "title" : "func index(after: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(before:)",
                        "title" : "func index(before: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/subscript(_:)",
                        "title" : "subscript(Int) -> Value",
                        "type" : "subscript"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index",
                        "title" : "OrderedDictionary.Values.Index",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/indices",
                        "title" : "OrderedDictionary.Values.Indices",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/contains(_:)-1926",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-4xf12",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-5nzbh",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined()",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined(separator:)-8009t",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined(separator:)-9chrb",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/map(_:)-9ei4k",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7bb2j",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8v21t",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Value>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8wk8n",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/element",
                        "title" : "OrderedDictionary.Values.Element",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/iterator",
                        "title" : "OrderedDictionary.Values.Iterator",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct",
                "title" : "OrderedDictionary.Values",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(_:uniquingkeyswith:)-2y39b",
                "title" : "init(some Sequence<(Key, Value)>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(_:uniquingkeyswith:)-zhfp",
                "title" : "init(some Sequence<(key: Key, value: Value)>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(grouping:by:)-6m2zw",
                "title" : "init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(grouping:by:)-6mahw",
                "title" : "init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(minimumcapacity:persistent:)",
                "title" : "init(minimumCapacity: Int, persistent: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uncheckeduniquekeys:values:)",
                "title" : "init(uncheckedUniqueKeys: some Sequence<Key>, values: some Sequence<Value>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-2j0dw",
                "title" : "init(uncheckedUniqueKeysWithValues: some Sequence<(key: Key, value: Value)>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-6gxhj",
                "title" : "init(uncheckedUniqueKeysWithValues: some Sequence<(Key, Value)>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uniquekeys:values:)",
                "title" : "init(uniqueKeys: some Sequence<Key>, values: some Sequence<Value>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uniquekeyswithvalues:)-5ux9r",
                "title" : "init(uniqueKeysWithValues: some Sequence<(Key, Value)>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uniquekeyswithvalues:)-88mzi",
                "title" : "init(uniqueKeysWithValues: some Sequence<(key: Key, value: Value)>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.property",
                "title" : "var elements: Elements",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/keys",
                "title" : "var keys: OrderedSet<Key>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.property",
                "title" : "var values: Values",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/compactmapvalues(_:)",
                "title" : "func compactMapValues<T>((Value) throws -> T?) rethrows -> OrderedDictionary<Key, T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/filter(_:)",
                "title" : "func filter((Element) throws -> Bool) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/index(forkey:)",
                "title" : "func index(forKey: Key) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/mapvalues(_:)",
                "title" : "func mapValues<T>((Value) throws -> T) rethrows -> OrderedDictionary<Key, T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merge(_:uniquingkeyswith:)-6ka2i",
                "title" : "func merge(some Sequence<(Key, Value)>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merge(_:uniquingkeyswith:)-9wkad",
                "title" : "func merge(some Sequence<(key: Key, value: Value)>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merging(_:uniquingkeyswith:)-2e0xa",
                "title" : "func merging(some Sequence<(key: Key, value: Value)>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merging(_:uniquingkeyswith:)-4z49c",
                "title" : "func merging(some Sequence<(Key, Value)>, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/partition(by:)",
                "title" : "func partition(by: (Element) throws -> Bool) rethrows -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/remove(at:)",
                "title" : "func remove(at: Int) -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removeall(where:)",
                "title" : "func removeAll(where: (`Self`.Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removefirst()",
                "title" : "func removeFirst() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removefirst(_:)",
                "title" : "func removeFirst(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removelast()",
                "title" : "func removeLast() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removelast(_:)",
                "title" : "func removeLast(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removesubrange(_:)-512n3",
                "title" : "func removeSubrange(Range<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removesubrange(_:)-8rmzx",
                "title" : "func removeSubrange(some RangeExpression<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removevalue(forkey:)",
                "title" : "func removeValue(forKey: Key) -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reservecapacity(_:)",
                "title" : "func reserveCapacity(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reverse()",
                "title" : "func reverse()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffle()",
                "title" : "func shuffle()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffle(using:)",
                "title" : "func shuffle(using: inout some RandomNumberGenerator)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sort()",
                "title" : "func sort()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sort(by:)",
                "title" : "func sort(by: (Element, Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/swapat(_:_:)",
                "title" : "func swapAt(Int, Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(_:forkey:)",
                "title" : "func updateValue(Value, forKey: Key) -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(_:forkey:insertingat:)",
                "title" : "func updateValue(Value, forKey: Key, insertingAt: Int) -> (originalMember: Value?, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(forkey:default:with:)",
                "title" : "func updateValue<R>(forKey: Key, default: () -> Value, with: (inout Value) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(forkey:insertingdefault:at:with:)",
                "title" : "func updateValue<R>(forKey: Key, insertingDefault: () -> Value, at: Int, with: (inout Value) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/subscript(_:)",
                "title" : "subscript(Key) -> Value?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/subscript(_:default:)",
                "title" : "subscript(Key, default _: () -> Value) -> Value",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/index",
                "title" : "OrderedDictionary.Index",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(dictionaryliteral:)",
                    "title" : "init(dictionaryLiteral: (Key, Value)...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/expressiblebydictionaryliteral-implementations",
                "title" : "ExpressibleByDictionaryLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/iterator\/next()",
                        "title" : "func next() -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/iterator",
                    "title" : "OrderedDictionary.Iterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/flatmap(_:)-4t9a4",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/flatmap(_:)-7ykj5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/makeiterator()",
                    "title" : "func makeIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/map(_:)",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/element",
                    "title" : "OrderedDictionary.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/orderedcollections\/ordereddictionary",
            "title" : "OrderedDictionary",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-23otz",
                    "title" : "init(`Self`)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-7u7kx",
                    "title" : "init<Value>(Dictionary<Element, Value>.Keys)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-9639t",
                    "title" : "init(Set<Element>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formintersection(_:)-80iht",
                    "title" : "func formIntersection(some Sequence<Element>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-75z52",
                    "title" : "func formSymmetricDifference(some Sequence<Element>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formunion(_:)-8tuol",
                    "title" : "func formUnion(some Sequence<Element>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/intersection(_:)-6ee3o",
                    "title" : "func intersection(some Sequence<Element>) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-25vmx",
                    "title" : "func isDisjoint(with: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-8nfqs",
                    "title" : "func isDisjoint(with: some Sequence<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isequalset(to:)-1szq",
                    "title" : "func isEqualSet(to: `Self`) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isequalset(to:)-9djqq",
                    "title" : "func isEqualSet(to: some Sequence<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-7n66e",
                    "title" : "func isStrictSubset(of: some Sequence<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-91par",
                    "title" : "func isStrictSubset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-9o6mg",
                    "title" : "func isStrictSubset(of: `Self`) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-1e0xt",
                    "title" : "func isStrictSuperset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-5dsfd",
                    "title" : "func isStrictSuperset(of: some Sequence<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-89ig3",
                    "title" : "func isStrictSuperset(of: `Self`) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-801lo",
                    "title" : "func isSubset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-952h5",
                    "title" : "func isSubset(of: some Sequence<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-2vtig",
                    "title" : "func isSuperset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-9krpz",
                    "title" : "func isSuperset(of: some Sequence<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtract(_:)-4pjhu",
                    "title" : "func subtract(some Sequence<Element>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtracting(_:)-8e6mw",
                    "title" : "func subtracting(some Sequence<Element>) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/symmetricdifference(_:)-7r79p",
                    "title" : "func symmetricDifference(some Sequence<Element>) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/union(_:)-23dm1",
                    "title" : "func union(some Sequence<Element>) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/custommirror",
                        "title" : "var customMirror: Mirror",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/customreflectable-implementations",
                    "title" : "CustomReflectable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/==(_:_:)",
                        "title" : "static func == (`Self`, `Self`) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(arrayliteral:)-1tjdx",
                        "title" : "init(arrayLiteral: Element...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/expressiblebyarrayliteral-implementations",
                    "title" : "ExpressibleByArrayLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-5b080",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-6svoq",
                        "title" : "init(some Sequence<Element>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(arrayliteral:)-39slg",
                        "title" : "init(arrayLiteral: Self.Element...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/contains(_:)",
                        "title" : "func contains(Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formintersection(_:)-4ow38",
                        "title" : "func formIntersection(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-8pkt5",
                        "title" : "func formSymmetricDifference(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formunion(_:)-6ijb",
                        "title" : "func formUnion(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/insert(_:)",
                        "title" : "func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/intersection(_:)-3q45l",
                        "title" : "func intersection(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-3wuso",
                        "title" : "func isDisjoint(with: `Self`) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-7sbsg",
                        "title" : "func isDisjoint(with: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-33z0l",
                        "title" : "func isStrictSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-8pbce",
                        "title" : "func isStrictSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-2dx31",
                        "title" : "func isSubset(of: `Self`) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-n4t7",
                        "title" : "func isSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-4ea6h",
                        "title" : "func isSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-9t33p",
                        "title" : "func isSuperset(of: `Self`) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/remove(_:)",
                        "title" : "func remove(Element) -> Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtract(_:)-4d5uc",
                        "title" : "func subtract(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtract(_:)-627eq",
                        "title" : "func subtract(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtracting(_:)-3ct1b",
                        "title" : "func subtracting(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/symmetricdifference(_:)-6aed7",
                        "title" : "func symmetricDifference(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/union(_:)-79uk3",
                        "title" : "func union(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/update(with:)",
                        "title" : "func update(with: Element) -> Element?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/element",
                        "title" : "OrderedSet.UnorderedView.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/setalgebra-implementations",
                    "title" : "SetAlgebra Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview",
                "title" : "OrderedSet.UnorderedView",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-2d3a9",
                "title" : "init<Value>(Dictionary<Element, Value>.Keys)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-3d7qr",
                "title" : "init(some RandomAccessCollection<Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-5zktd",
                "title" : "init(some Sequence<Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-68j7",
                "title" : "init(`Self`)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-7rt2h",
                "title" : "init(UnorderedView)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-8tli8",
                "title" : "init(Set<Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-8zm9d",
                "title" : "init(SubSequence)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(minimumcapacity:persistent:)",
                "title" : "init(minimumCapacity: Int, persistent: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(uncheckeduniqueelements:)",
                "title" : "init(uncheckedUniqueElements: some Sequence<Element>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/elements",
                "title" : "var elements: [Element]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/unordered",
                "title" : "var unordered: UnorderedView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/append(_:)",
                "title" : "func append(Element) -> (inserted: Bool, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/append(contentsof:)",
                "title" : "func append(contentsOf: some Sequence<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/applying(_:)",
                "title" : "func applying(CollectionDifference<Element>) -> `Self`?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/contains(_:)",
                "title" : "func contains(Element) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/difference(from:)-30bkk",
                "title" : "func difference(from: `Self`) -> CollectionDifference<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/filter(_:)",
                "title" : "func filter((Element) throws -> Bool) rethrows -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/firstindex(of:)",
                "title" : "func firstIndex(of: Element) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formintersection(_:)-2a4y4",
                "title" : "func formIntersection(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formintersection(_:)-43o1u",
                "title" : "func formIntersection(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formintersection(_:)-7odn2",
                "title" : "func formIntersection(some Sequence<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formsymmetricdifference(_:)-2ll2z",
                "title" : "func formSymmetricDifference(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formsymmetricdifference(_:)-391sm",
                "title" : "func formSymmetricDifference(some Sequence<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formsymmetricdifference(_:)-96csi",
                "title" : "func formSymmetricDifference(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formunion(_:)-3dkzw",
                "title" : "func formUnion(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formunion(_:)-59end",
                "title" : "func formUnion(some Sequence<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formunion(_:)-6pksr",
                "title" : "func formUnion(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/insert(_:at:)",
                "title" : "func insert(Element, at: Int) -> (inserted: Bool, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/intersection(_:)-4o09a",
                "title" : "func intersection(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/intersection(_:)-80md4",
                "title" : "func intersection(some Sequence<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/intersection(_:)-9yzg3",
                "title" : "func intersection(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-4tsmx",
                "title" : "func isDisjoint(with: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-54iy6",
                "title" : "func isDisjoint(with: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-6vmoh",
                "title" : "func isDisjoint(with: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-7nqur",
                "title" : "func isDisjoint(with: some Sequence<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isequalset(to:)-2bhxr",
                "title" : "func isEqualSet(to: some Sequence<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isequalset(to:)-34yz0",
                "title" : "func isEqualSet(to: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isequalset(to:)-6zqj7",
                "title" : "func isEqualSet(to: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-10abw",
                "title" : "func isStrictSubset(of: some Sequence<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-4efhn",
                "title" : "func isStrictSubset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-8m21h",
                "title" : "func isStrictSubset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-9lv3x",
                "title" : "func isStrictSubset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-3kfwa",
                "title" : "func isStrictSuperset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-5e6d5",
                "title" : "func isStrictSuperset(of: some Sequence<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-7u97x",
                "title" : "func isStrictSuperset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-98d9s",
                "title" : "func isStrictSuperset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-3mw6r",
                "title" : "func isSubset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-8yb29",
                "title" : "func isSubset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-9hxl4",
                "title" : "func isSubset(of: some Sequence<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-ptij",
                "title" : "func isSubset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-2bbv8",
                "title" : "func isSuperset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-4rrsh",
                "title" : "func isSuperset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-7oow7",
                "title" : "func isSuperset(of: some Sequence<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-7xvog",
                "title" : "func isSuperset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/lastindex(of:)",
                "title" : "func lastIndex(of: Element) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/partition(by:)",
                "title" : "func partition(by: (Element) throws -> Bool) rethrows -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/remove(_:)",
                "title" : "func remove(Element) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/remove(at:)",
                "title" : "func remove(at: Int) -> `Self`.Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removeall(where:)",
                "title" : "func removeAll(where: (Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removefirst()",
                "title" : "func removeFirst() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removefirst(_:)",
                "title" : "func removeFirst(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removelast()",
                "title" : "func removeLast() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removelast(_:)",
                "title" : "func removeLast(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removesubrange(_:)-2fqke",
                "title" : "func removeSubrange(Range<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removesubrange(_:)-62u6a",
                "title" : "func removeSubrange(some RangeExpression<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/reservecapacity(_:)",
                "title" : "func reserveCapacity(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/reverse()",
                "title" : "func reverse()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/shuffle()",
                "title" : "func shuffle()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/shuffle(using:)",
                "title" : "func shuffle(using: inout some RandomNumberGenerator)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/sort()",
                "title" : "func sort()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/sort(by:)",
                "title" : "func sort(by: (Element, Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtract(_:)-3b6nj",
                "title" : "func subtract(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtract(_:)-9rtmd",
                "title" : "func subtract(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtract(_:)-9wmg8",
                "title" : "func subtract(some Sequence<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtracting(_:)-1gl4y",
                "title" : "func subtracting(some Sequence<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtracting(_:)-5graf",
                "title" : "func subtracting(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtracting(_:)-7kl8r",
                "title" : "func subtracting(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/swapat(_:_:)",
                "title" : "func swapAt(Int, Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/symmetricdifference(_:)-1810l",
                "title" : "func symmetricDifference(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/symmetricdifference(_:)-8dvm6",
                "title" : "func symmetricDifference(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/symmetricdifference(_:)-9huk7",
                "title" : "func symmetricDifference(some Sequence<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/union(_:)-2939h",
                "title" : "func union(some Sequence<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/union(_:)-3lt5i",
                "title" : "func union(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/union(_:)-67y2h",
                "title" : "func union(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/update(_:at:)",
                "title" : "func update(Element, at: Int) -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/updateorappend(_:)",
                "title" : "func updateOrAppend(Element) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/updateorinsert(_:at:)",
                "title" : "func updateOrInsert(Element, at: Int) -> (originalMember: Element?, index: Int)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/difference(from:)-4dq1z",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/firstrange(of:)-38ioh",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined(separator:)-9vy69",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/firstrange(of:)-9s1o",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/map(_:)-7i7ee",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-1f4x9",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-3qjhg",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Element...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/expressiblebyarrayliteral-implementations",
                "title" : "ExpressibleByArrayLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/last",
                            "title" : "var last: Self.Element?",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/difference(from:)",
                            "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/difference(from:by:)",
                            "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/droplast(_:)",
                            "title" : "func dropLast(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstrange(of:)-4zhmi",
                            "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined(separator:)-72f98",
                            "title" : "func joined(separator: String) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/last(where:)",
                            "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lastindex(of:)",
                            "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lastindex(where:)",
                            "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/poplast()",
                            "title" : "func popLast() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removelast()",
                            "title" : "func removeLast() -> Self.Element",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removelast(_:)",
                            "title" : "func removeLast(Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/reversed()",
                            "title" : "func reversed() -> ReversedCollection<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/suffix(_:)",
                            "title" : "func suffix(Int) -> Self.SubSequence",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/bidirectionalcollection-implementations",
                        "title" : "BidirectionalCollection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/count",
                            "title" : "var count: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/first",
                            "title" : "var first: Self.Element?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/isempty",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/underestimatedcount",
                            "title" : "var underestimatedCount: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/drop(while:)",
                            "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/dropfirst(_:)",
                            "title" : "func dropFirst(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstindex(of:)",
                            "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstindex(where:)",
                            "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstrange(of:)-13m6n",
                            "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(_:offsetby:)",
                            "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(_:offsetby:limitedby:)",
                            "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(of:)",
                            "title" : "func index(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/makeiterator()",
                            "title" : "func makeIterator() -> IndexingIterator<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/map(_:)-3aqct",
                            "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/popfirst()",
                            "title" : "func popFirst() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(_:)",
                            "title" : "func prefix(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(through:)",
                            "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(upto:)",
                            "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(while:)",
                            "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/randomelement()",
                            "title" : "func randomElement() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/randomelement(using:)",
                            "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/ranges(of:)",
                            "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removefirst()",
                            "title" : "func removeFirst() -> Self.Element",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removefirst(_:)",
                            "title" : "func removeFirst(Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                            "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/split(separator:maxsplits:omittingemptysubsequences:)",
                            "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/suffix(from:)",
                            "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimprefix(_:)",
                            "title" : "func trimPrefix<Prefix>(Prefix)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimprefix(while:)",
                            "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimmingprefix(_:)",
                            "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimmingprefix(while:)",
                            "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "title" : "Subscripts",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-3pqvw",
                            "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                            "type" : "subscript"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-8r0e1",
                            "title" : "subscript<R>(R) -> Self.SubSequence",
                            "type" : "subscript"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/collection-implementations",
                        "title" : "Collection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/debugdescription",
                            "title" : "var debugDescription: String",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/customdebugstringconvertible-implementations",
                        "title" : "CustomDebugStringConvertible Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/description",
                            "title" : "var description: String",
                            "type" : "property"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/customstringconvertible-implementations",
                        "title" : "CustomStringConvertible Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/==(_:_:)",
                            "title" : "static func == (`Self`, `Self`) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/hashable-implementations",
                        "title" : "Hashable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/endindex",
                            "title" : "var endIndex: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/indices-swift.property",
                            "title" : "var indices: Indices",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/startindex",
                            "title" : "var startIndex: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/distance(from:to:)",
                            "title" : "func distance(from: Int, to: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(after:)",
                            "title" : "func formIndex(after: inout Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(before:)",
                            "title" : "func formIndex(before: inout Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(_:offsetby:)",
                            "title" : "func index(Int, offsetBy: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(_:offsetby:limitedby:)",
                            "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(after:)",
                            "title" : "func index(after: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(before:)",
                            "title" : "func index(before: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "title" : "Subscripts",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-8zt5n",
                            "title" : "subscript(Int) -> Element",
                            "type" : "subscript"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-9h1wd",
                            "title" : "subscript(Range<Int>) -> SubSequence",
                            "type" : "subscript"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index",
                            "title" : "OrderedSet.SubSequence.Index",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/indices-swift.typealias",
                            "title" : "OrderedSet.SubSequence.Indices",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subsequence",
                            "title" : "OrderedSet.SubSequence.SubSequence",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/randomaccesscollection-implementations",
                        "title" : "RandomAccessCollection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lazy",
                            "title" : "var lazy: LazySequence<Self>",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/allsatisfy(_:)",
                            "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/compactmap(_:)",
                            "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/contains(_:)",
                            "title" : "func contains(Self.Element) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/contains(where:)",
                            "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/elementsequal(_:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/elementsequal(_:by:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/enumerated()",
                            "title" : "func enumerated() -> EnumeratedSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/filter(_:)",
                            "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/first(where:)",
                            "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/flatmap(_:)-87q9z",
                            "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/flatmap(_:)-iuyu",
                            "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/foreach(_:)",
                            "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined()",
                            "title" : "func joined() -> FlattenSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined(separator:)-42wk1",
                            "title" : "func joined(separator: String) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined(separator:)-6dlvl",
                            "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lexicographicallyprecedes(_:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lexicographicallyprecedes(_:by:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/map(_:)-wv4l",
                            "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/max()",
                            "title" : "func max() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/max(by:)",
                            "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/min()",
                            "title" : "func min() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/min(by:)",
                            "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/reduce(_:_:)",
                            "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/reduce(into:_:)",
                            "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/shuffled()",
                            "title" : "func shuffled() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/shuffled(using:)",
                            "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/sorted()",
                            "title" : "func sorted() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/sorted(by:)",
                            "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/starts(with:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/starts(with:by:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-16p2s",
                            "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-9f4iv",
                            "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/element",
                            "title" : "OrderedSet.SubSequence.Element",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/iterator",
                            "title" : "OrderedSet.SubSequence.Iterator",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/sequence-implementations",
                        "title" : "Sequence Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence",
                    "title" : "OrderedSet.SubSequence",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/indices-swift.property",
                    "title" : "var indices: Indices",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-3zzoq",
                    "title" : "subscript(Range<Int>) -> SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-7e56c",
                    "title" : "subscript(Int) -> Element",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index",
                    "title" : "OrderedSet.Index",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/indices-swift.typealias",
                    "title" : "OrderedSet.Indices",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/flatmap(_:)-4upo",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/flatmap(_:)-mpwk",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined(separator:)-364rm",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined(separator:)-7er73",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/map(_:)-60smk",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/withcontiguousstorageifavailable(_:)-8bjz2",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/withcontiguousstorageifavailable(_:)-8k26k",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/iterator",
                    "title" : "OrderedSet.Iterator",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/orderedcollections\/orderedset",
            "title" : "OrderedSet",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/orderedcollections",
        "title" : "OrderedCollections",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/init(cloudcode:)",
                "title" : "init(cloudCode: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcode",
                "title" : "var cloudCode: T",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/results",
                "title" : "var results: T.ReturnType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcodetype",
                "title" : "CloudViewModel.CloudCodeType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/cloudviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudviewmodel",
            "title" : "CloudViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/init(serverurl:isdefault:notificationqueue:)",
                "title" : "init(serverURL: URL?, isDefault: Bool, notificationQueue: DispatchQueue) async throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/authenticationdelegate",
                "title" : "var authenticationDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/receivedelegate",
                "title" : "var receiveDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/status",
                "title" : "var status: ConnectionStatus",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/closeall()",
                "title" : "func closeAll() async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/ispendingsubscription(_:)",
                "title" : "func isPendingSubscription<T>(Query<T>) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/issubscribed(_:)",
                "title" : "func isSubscribed<T>(Query<T>) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:)",
                "title" : "func open(isUserWantsToConnect: Bool) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:completion:)",
                "title" : "func open(isUserWantsToConnect: Bool, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/openpublisher(isuserwantstoconnect:)",
                "title" : "func openPublisher(isUserWantsToConnect: Bool) -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/removependingsubscription(_:)",
                "title" : "func removePendingSubscription<T>(Query<T>) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping()",
                "title" : "func sendPing() async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping(pongreceivehandler:)",
                "title" : "func sendPing(pongReceiveHandler: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendpingpublisher()",
                "title" : "func sendPingPublisher() -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/subscribe(_:)",
                "title" : "func subscribe<T>(T) async throws -> T",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/client",
                "title" : "static var client: ParseLiveQuery?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/defaultclient",
                "title" : "class var defaultClient: ParseLiveQuery?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_(_:_:)-3ydrw",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/connected",
                    "title" : "case connected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/connecting",
                    "title" : "case connecting",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/disconnected",
                    "title" : "case disconnected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/socketestablished",
                    "title" : "case socketEstablished",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/socketnotestablished",
                    "title" : "case socketNotEstablished",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:)-6uyv",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:)-99jnt",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_(_:_:)-4vmc5",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_=(_:_:)-1mh6z",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_=(_:_:)-84tti",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus",
                "title" : "ParseLiveQuery.ConnectionStatus",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/close()",
                    "title" : "func close() async",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequery\/livequerysocketdelegate-implementations",
                "title" : "LiveQuerySocketDelegate Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequery",
            "title" : "ParseLiveQuery",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/results",
                "title" : "var results: [QueryViewModel<T>.Object]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count(options:)",
                "title" : "func count(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/find(options:)",
                "title" : "func find(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/first(options:)",
                "title" : "func first(options: API.Options) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/object",
                "title" : "QueryViewModel.Object",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryviewmodel",
            "title" : "QueryViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/event",
                "title" : "var event: (query: Query<T>, event: Event<T>)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/issubscribed",
                "title" : "var isSubscribed: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/isunsubscribed",
                "title" : "var isUnsubscribed: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/subscribed",
                "title" : "var subscribed: (query: Query<T>, isNew: Bool)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/unsubscribed",
                "title" : "var unsubscribed: Query<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscription",
            "title" : "Subscription",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handle(_:_:)",
                "title" : "func handle((T) -> Event<T>, (Query<T>, T) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleevent(_:)",
                "title" : "func handleEvent((Query<T>, Event<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handlesubscribe(_:)",
                "title" : "func handleSubscribe((Query<T>, Bool) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleunsubscribe(_:)",
                "title" : "func handleUnsubscribe((Query<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/object",
                "title" : "SubscriptionCallback.Object",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscriptioncallback",
            "title" : "SubscriptionCallback",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/cloudcodetype",
                "title" : "CloudCodeType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/init(cloudcode:)",
                "title" : "init(cloudCode: CloudCodeType)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudobservable",
            "title" : "CloudObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/deletable\/deletingtype",
                "title" : "DeletingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete()-3qlhy",
                        "title" : "func delete() async throws -> DeletingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Deletable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete()-3wdvi",
                "title" : "func delete() async throws -> DeletingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete(options:)-u8rk",
                        "title" : "func delete(options: API.Options) async throws",
                        "type" : "method"
                      }
                    ],
                    "title" : "Deletable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete(options:)-370sk",
                "title" : "func delete(options: API.Options) async throws -> DeletingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/deletable",
            "title" : "Deletable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/fetchable\/fetchingtype",
                "title" : "FetchingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch()-1n2zp",
                        "title" : "func fetch() async throws -> FetchingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Fetchable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch()-2agid",
                "title" : "func fetch() async throws -> FetchingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)-9iop9",
                        "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "Fetchable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)-6xt2n",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> FetchingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/fetchable",
            "title" : "Fetchable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint-6b5zy",
                        "title" : "var endpoint: API.Endpoint",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/endpoint-65g5f",
                "title" : "var endpoint: API.Endpoint",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint(_:)-4acal",
                        "title" : "func endpoint(API.Method) async throws -> API.Endpoint",
                        "type" : "method"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/endpoint(_:)-26c5h",
                "title" : "func endpoint(API.Method) async throws -> API.Endpoint",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/issaved()-9c65v",
                        "title" : "func isSaved() async throws -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/issaved",
                        "title" : "var isSaved: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/issaved()-2szlz",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-swift.property",
                        "title" : "var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-499yb",
                        "title" : "static var className: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/classname-7kg6w",
                "title" : "static var className: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/objectable",
            "title" : "Objectable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/authenticateduser",
                "title" : "AuthenticatedUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked()-97br7",
                        "title" : "func isLinked() async -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked()-5a3xp",
                "title" : "func isLinked() async -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:)",
                "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:callbackqueue:completion:)",
                "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/linkpublisher(authdata:options:)",
                "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/login(authdata:options:callbackqueue:completion:)",
                "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/loginpublisher(authdata:options:)",
                "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-li6i",
                        "title" : "func strip() async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-7jyyz",
                "title" : "func strip() async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-80krh",
                        "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-ovl0",
                "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-87j4",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-5hyok",
                "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-6aslp",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-7rp64",
                "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-2h790",
                        "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-8buh1",
                "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-372np",
                        "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-6gyvj",
                "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-1p5pj",
                        "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-2zjlv",
                "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-9jbvk",
                        "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-2wrer",
                "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-30q3o",
                        "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-7d4nj",
                "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseauthentication",
            "title" : "ParseAuthentication",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsecloudtypeable",
            "title" : "ParseCloudTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseclouduser\/accountlockoutexpiresat-13du2",
                        "title" : "var accountLockoutExpiresAt: Date?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseCloudUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclouduser\/accountlockoutexpiresat-2drtq",
                "title" : "var accountLockoutExpiresAt: Date?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseclouduser\/failedlogincount-1x7qw",
                        "title" : "var failedLoginCount: Int?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseCloudUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclouduser\/failedlogincount-9kljm",
                "title" : "var failedLoginCount: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclouduser\/sessiontoken",
                "title" : "var sessionToken: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclouduser",
            "title" : "ParseCloudUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/returntype",
                "title" : "ReturnType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/functionjobname",
                "title" : "var functionJobName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel",
                "title" : "var viewModel: CloudViewModel<Self>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:callbackqueue:completion:)",
                "title" : "func runFunction(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunctionpublisher(options:)",
                "title" : "func runFunctionPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:callbackqueue:completion:)",
                "title" : "func startJob(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjobpublisher(options:)",
                "title" : "func startJobPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel(_:)",
                "title" : "static func viewModel(Self) -> CloudViewModel<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsecloudable",
            "title" : "ParseCloudable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:)",
                "title" : "func save(options: API.Options) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Bool, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<Bool, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfig",
            "title" : "ParseConfig",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/description",
                "title" : "var description: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencodable",
            "title" : "ParseEncodable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-6r9at",
                        "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-71gc1",
                "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-52ukn",
                        "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-h8xr",
                "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:from:completion:)",
                "title" : "func upload(with: URLRequest, from: Data?, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:fromfile:completion:)",
                "title" : "func upload(with: URLRequest, fromFile: URL, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefiletransferable",
            "title" : "ParseFileTransferable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/init(name:url:)",
                "title" : "init(name: String, url: URL?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionable",
            "title" : "ParseHookFunctionable",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsehookparametable",
            "title" : "ParseHookParametable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/usertype",
                "title" : "UserType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/user",
                "title" : "var user: UserType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:)",
                "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:callbackqueue:completion:)",
                "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuserpublisher(options:)",
                "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/options()",
                "title" : "func options() -> API.Options",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookrequestable",
            "title" : "ParseHookRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable",
            "title" : "ParseHookTriggerRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(classname:trigger:url:)",
                "title" : "init(className: String, trigger: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(classname:triggername:url:)",
                "title" : "init(className: String, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:trigger:url:)-3id4t",
                "title" : "init(object: ParseHookTriggerObject, trigger: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:trigger:url:)-4sels",
                "title" : "init<T>(object: T, trigger: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:trigger:url:)-6si3s",
                "title" : "init<T>(object: T.Type, trigger: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:triggername:url:)",
                "title" : "init<T>(object: T, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(trigger:url:)",
                "title" : "init(trigger: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(triggername:url:)",
                "title" : "init(triggerName: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/triggername",
                "title" : "var triggerName: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerable",
            "title" : "ParseHookTriggerable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/url",
                "title" : "var url: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookable",
            "title" : "ParseHookable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appidentifier",
                "title" : "var appIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appname",
                "title" : "var appName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appversion",
                "title" : "var appVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/badge",
                "title" : "var badge: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/channels",
                "title" : "var channels: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetoken",
                "title" : "var deviceToken: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetype",
                "title" : "var deviceType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/endpoint",
                "title" : "var endpoint: API.Endpoint",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/localeidentifier",
                "title" : "var localeIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/parseversion",
                "title" : "var parseVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/timezone",
                "title" : "var timeZone: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/setdevicetoken(_:)",
                "title" : "func setDeviceToken(Data)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:callbackqueue:completion:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/becomepublisher(_:copyentireinstallation:options:)",
                "title" : "static func becomePublisher(String, copyEntireInstallation: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:)",
                "title" : "static func deleteObjCKeychain(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func deleteObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychainpublisher(options:)",
                "title" : "static func deleteObjCKeychainPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstallation\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseinstallation\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstallation",
            "title" : "ParseInstallation",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-7npe",
                        "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-170q6",
                "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-3krd3",
                "title" : "func received(URLSessionTaskTransactionMetrics)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-4tgno",
                "title" : "func received(Error)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-o1ge",
                        "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-8g2o0",
                "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-6cmf4",
                        "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-83dzx",
                "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequerydelegate",
            "title" : "ParseLiveQueryDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/init(objectid:)-6r6xq",
                        "title" : "init(objectId: String)",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/init(objectid:)-7sv7",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeable-96fqk",
                        "title" : "var mergeable: Self",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeable-60gba",
                        "title" : "var mergeable: Self",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeable-1pmms",
                "title" : "var mergeable: Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/operation",
                "title" : "var operation: ParseOperation<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation",
                "title" : "var relation: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/get(_:)",
                "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.method",
                "title" : "func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.method",
                "title" : "func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.method",
                "title" : "func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/hassameobjectid(as:)-84qh",
                        "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/hassameobjectid(as:)-5gkd9",
                "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/isdirtyforkey(_:)",
                "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-3cli5",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-99wj6",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-4hjo0",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-35a9v",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-6romo",
                "title" : "func merge(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-13frx",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-6csd5",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-8plu3",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-49r7x",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-9yft4",
                "title" : "func mergeParse(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:child:)",
                "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:classname:)",
                "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:)",
                "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-1w6vg",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-4e4g",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:object:)",
                "title" : "func relation<V>(String, object: V.Type) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert()",
                "title" : "func revert() throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert(_:)",
                "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/set(_:to:)",
                "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-1tqz7",
                        "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-9ntkl",
                "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/topointer()-4qih8",
                        "title" : "func toPointer() throws -> Pointer<Self>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/topointer()-413zu",
                "title" : "func toPointer() throws -> Pointer<Self>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query",
                "title" : "static var query: Query<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.type.method",
                "title" : "static func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.type.method",
                "title" : "static func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.type.method",
                "title" : "static func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-27shx",
                "title" : "static func query([QueryConstraint]) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-3tnph",
                "title" : "static func query(QueryConstraint...) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-87cdn",
                "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-xpkl",
                "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-47yjk",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-98tek",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseobject",
            "title" : "ParseObject",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationable\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationable\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationable\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationable\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationable",
            "title" : "ParseOperationable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepointer\/classname",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepointer\/objectid",
                "title" : "var objectId: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepointer",
            "title" : "ParsePointer",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepointerobject\/object",
                "title" : "Object",
                "type" : "associatedtype"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepointerobject",
            "title" : "ParsePointerObject",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/delete(valuefor:)",
                "title" : "func delete(valueFor: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/deleteall()",
                "title" : "func deleteAll() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/get(valuefor:)",
                "title" : "func get<T>(valueFor: String) throws -> T?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/set(_:for:)",
                "title" : "func set<T>(T, for: String) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseprimitivestorable",
            "title" : "ParsePrimitiveStorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplepayloadable",
            "title" : "ParsePushApplePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable",
            "title" : "ParsePushFirebasePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadable\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadable",
            "title" : "ParsePushPayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtype",
                "title" : "PushType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/payload",
                "title" : "var payload: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/query",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatusable\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatusable",
            "title" : "ParsePushStatusable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsequeryscorable\/score",
                "title" : "var score: Double?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsequeryscorable",
            "title" : "ParseQueryScorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelationoperationable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelationoperationable\/objects",
                "title" : "var objects: [Pointer<Object>]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserelationoperationable",
            "title" : "ParseRelationOperationable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/roleuser",
                "title" : "RoleUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:)-3m5k4",
                        "title" : "init(name: String) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:)-56bux",
                "title" : "init(name: String) throws",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-8u3ui",
                        "title" : "init(name: String, acl: ParseACL) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-3h6fq",
                "title" : "init(name: String, acl: ParseACL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/endpoint",
                "title" : "var endpoint: API.Endpoint",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/name",
                "title" : "var name: String?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/roles-1kfkg",
                        "title" : "var roles: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/roles-7omk",
                "title" : "var roles: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/users-6uxer",
                        "title" : "var users: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/users-7o4v6",
                "title" : "var users: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryroles()",
                "title" : "func queryRoles() throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryusers()",
                "title" : "func queryUsers() throws -> Query<RoleUser>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserole\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserole",
            "title" : "ParseRole",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessionuser",
                "title" : "SessionUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/createdwith",
                "title" : "var createdWith: [String : String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/endpoint",
                "title" : "var endpoint: API.Endpoint",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/expiresat",
                "title" : "var expiresAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/installationid",
                "title" : "var installationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/restricted",
                "title" : "var restricted: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessiontoken",
                "title" : "var sessionToken: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/user",
                "title" : "var user: SessionUser",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsesession\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsesession\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsesession",
            "title" : "ParseSession",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetypeable",
            "title" : "ParseTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.property",
                "title" : "var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.property",
                "title" : "var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/authdata",
                "title" : "var authData: [String : [String : String]?]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/email",
                "title" : "var email: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/emailverified",
                "title" : "var emailVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/endpoint",
                "title" : "var endpoint: API.Endpoint",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.property",
                "title" : "var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.property",
                "title" : "var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.property",
                "title" : "var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.property",
                "title" : "var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.property",
                "title" : "var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.property",
                "title" : "var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/password",
                "title" : "var password: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.property",
                "title" : "var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.property",
                "title" : "var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/username",
                "title" : "var username: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-swift.method",
                "title" : "func become(sessionToken: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.method",
                "title" : "func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/becomepublisher(sessiontoken:options:)-swift.method",
                "title" : "func becomePublisher(sessionToken: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/islinked(with:)",
                "title" : "func isLinked(with: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/savepublisher(options:ignoringcustomobjectidconfig:)",
                "title" : "func savePublisher(options: API.Options, ignoringCustomObjectIdConfig: Bool) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:)",
                "title" : "func signup(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:callbackqueue:completion:)",
                "title" : "func signup(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(options:)",
                "title" : "func signupPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/strip(_:)",
                "title" : "func strip(String) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:)",
                "title" : "func unlink(String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:callbackqueue:completion:)",
                "title" : "func unlink(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlinkpublisher(_:options:)",
                "title" : "func unlinkPublisher(String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.type.property",
                "title" : "static var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.type.property",
                "title" : "static var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.type.property",
                "title" : "static var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.type.property",
                "title" : "static var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.type.property",
                "title" : "static var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.type.property",
                "title" : "static var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.type.property",
                "title" : "static var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.type.property",
                "title" : "static var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.type.property",
                "title" : "static var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.type.property",
                "title" : "static var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-swift.type.method",
                "title" : "static func become(sessionToken: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/becomepublisher(sessiontoken:options:)-swift.type.method",
                "title" : "static func becomePublisher(sessionToken: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/enableautomaticlogin(_:)",
                "title" : "static func enableAutomaticLogin(Bool) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:)",
                "title" : "static func link(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func link(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkpublisher(_:authdata:options:)",
                "title" : "static func linkPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:)",
                "title" : "static func login(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func login(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:email:password:authdata:options:)",
                "title" : "static func login(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:email:password:authdata:options:callbackqueue:completion:)",
                "title" : "static func login(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginas(objectid:options:)",
                "title" : "static func loginAs(objectId: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginas(objectid:options:callbackqueue:completion:)",
                "title" : "static func loginAs(objectId: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginaspublisher(objectid:options:)",
                "title" : "static func loginAsPublisher(objectId: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(_:authdata:options:)",
                "title" : "static func loginPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(username:email:password:authdata:options:)",
                "title" : "static func loginPublisher(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychainpublisher(options:)",
                "title" : "static func loginUsingObjCKeychainPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:)",
                "title" : "static func logout(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:callbackqueue:completion:)",
                "title" : "static func logout(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logoutpublisher(options:)",
                "title" : "static func logoutPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:)",
                "title" : "static func passwordReset(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:callbackqueue:completion:)",
                "title" : "static func passwordReset(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordresetpublisher(email:options:)",
                "title" : "static func passwordResetPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/sessiontoken()",
                "title" : "static func sessionToken() async throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:)",
                "title" : "static func signup(username: String, password: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:callbackqueue:completion:)",
                "title" : "static func signup(username: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(username:password:options:)",
                "title" : "static func signupPublisher(username: String, password: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:)",
                "title" : "static func verificationEmail(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:callbackqueue:completion:)",
                "title" : "static func verificationEmail(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemailpublisher(email:options:)",
                "title" : "static func verificationEmailPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:callbackqueue:completion:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypasswordpublisher(password:usingpost:options:)",
                "title" : "static func verifyPasswordPublisher(password: String, usingPost: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseuser\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseuser\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseuser",
            "title" : "ParseUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/count(options:)",
                "title" : "func count(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/find(options:)",
                "title" : "func find(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/first(options:)",
                "title" : "func first(options: API.Options) async",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryobservable",
            "title" : "QueryObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/querysubscribable",
            "title" : "QuerySubscribable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/resulttype",
                "title" : "ResultType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:)",
                "title" : "func count(options: API.Options) async throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:callbackqueue:completion:)",
                "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:)",
                "title" : "func find(options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:callbackqueue:completion:)",
                "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:)",
                "title" : "func first(options: API.Options) async throws -> ResultType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:callbackqueue:completion:)",
                "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryable",
            "title" : "Queryable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/savable\/savingtype",
                "title" : "SavingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/savable\/issaved()",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/savable\/save()-6n6v7",
                        "title" : "func save() async throws -> SavingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Savable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save()-51ej7",
                "title" : "func save() async throws -> SavingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/savable\/save(options:)-jkt4",
                        "title" : "func save(options: API.Options) async throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "Savable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save(options:)-15f1x",
                "title" : "func save(options: API.Options) async throws -> SavingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/savable",
            "title" : "Savable",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/api\/options",
                "title" : "API.Options",
                "type" : "typealias"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/aggregate(classname:)",
                    "title" : "case aggregate(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/any(_:)",
                    "title" : "case any(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/batch",
                    "title" : "case batch",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/config",
                    "title" : "case config",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/event(event:)",
                    "title" : "case event(event: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/file(filename:)",
                    "title" : "case file(fileName: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/functions(name:)",
                    "title" : "case functions(name: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/health",
                    "title" : "case health",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hookfunction(request:)",
                    "title" : "case hookFunction(request: FunctionRequest)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hookfunctions",
                    "title" : "case hookFunctions",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hooktrigger(request:)",
                    "title" : "case hookTrigger(request: TriggerRequest)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hooktriggers",
                    "title" : "case hookTriggers",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/installation(objectid:)",
                    "title" : "case installation(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/installations",
                    "title" : "case installations",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/jobs(name:)",
                    "title" : "case jobs(name: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/login",
                    "title" : "case login",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/loginas",
                    "title" : "case loginAs",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/logout",
                    "title" : "case logout",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/object(classname:objectid:)",
                    "title" : "case object(className: String, objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/objects(classname:)",
                    "title" : "case objects(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/passwordreset",
                    "title" : "case passwordReset",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/purge(classname:)",
                    "title" : "case purge(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/push",
                    "title" : "case push",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/role(objectid:)",
                    "title" : "case role(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/roles",
                    "title" : "case roles",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/schema(classname:)",
                    "title" : "case schema(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/schemas",
                    "title" : "case schemas",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/serverinfo",
                    "title" : "case serverInfo",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/session(objectid:)",
                    "title" : "case session(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/sessions",
                    "title" : "case sessions",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/user(objectid:)",
                    "title" : "case user(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/users",
                    "title" : "case users",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/verificationemail",
                    "title" : "case verificationEmail",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/verifypassword",
                    "title" : "case verifyPassword",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/urlcomponent",
                    "title" : "var urlComponent: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/endpoint",
                "title" : "API.Endpoint",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/delete",
                    "title" : "case DELETE",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/get",
                    "title" : "case GET",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/patch",
                    "title" : "case PATCH",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/post",
                    "title" : "case POST",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/put",
                    "title" : "case PUT",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/method\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/method\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/method\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/method\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/method",
                "title" : "API.Method",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/==(_:_:)",
                    "title" : "static func == (API.Option, API.Option) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/cachepolicy(_:)",
                    "title" : "case cachePolicy(URLRequest.CachePolicy)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/context(_:)",
                    "title" : "case context(Encodable & Sendable)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/filesize(_:)",
                    "title" : "case fileSize(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/installationid(_:)",
                    "title" : "case installationId(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/metadata(_:)",
                    "title" : "case metadata([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/mimetype(_:)",
                    "title" : "case mimeType(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/removemimetype",
                    "title" : "case removeMimeType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/serverurl(_:)",
                    "title" : "case serverURL(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/sessiontoken(_:)",
                    "title" : "case sessionToken(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/tags(_:)",
                    "title" : "case tags([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/usemaintenancekey",
                    "title" : "case useMaintenanceKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/useprimarykey",
                    "title" : "case usePrimaryKey",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/option\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/option\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/option",
                "title" : "API.Option",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/api",
            "title" : "API",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/functionrequest\/init(hookfunction:)",
                "title" : "init<F>(hookFunction: F) throws",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/functionrequest",
            "title" : "FunctionRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicread",
                "title" : "var publicRead: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicwrite",
                "title" : "var publicWrite: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(objectid:)",
                "title" : "func getReadAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(role:)",
                "title" : "func getReadAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(rolename:)",
                "title" : "func getReadAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(user:)",
                "title" : "func getReadAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(objectid:)",
                "title" : "func getWriteAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(role:)",
                "title" : "func getWriteAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(rolename:)",
                "title" : "func getWriteAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(user:)",
                "title" : "func getWriteAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(objectid:value:)",
                "title" : "func setReadAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(role:value:)",
                "title" : "func setReadAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(rolename:value:)",
                "title" : "func setReadAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(user:value:)",
                "title" : "func setReadAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(objectid:value:)",
                "title" : "func setWriteAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(role:value:)",
                "title" : "func setWriteAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(rolename:value:)",
                "title" : "func setWriteAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(user:value:)",
                "title" : "func setWriteAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/defaultacl()",
                "title" : "static func defaultACL() async throws -> ParseACL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setdefaultacl(_:withaccessforcurrentuser:)",
                "title" : "static func setDefaultACL(ParseACL, withAccessForCurrentUser: Bool) async throws -> ParseACL",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/read",
                    "title" : "case read",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/write",
                    "title" : "case write",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-630fw",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-3nwp2",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/access",
                "title" : "ParseACL.Access",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseacl",
            "title" : "ParseACL",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/init(name:dimensions:at:)",
                "title" : "init(name: String, dimensions: [String : Codable]?, at: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/date",
                "title" : "var date: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/dimensions",
                "title" : "var dimensions: [String : Codable]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:callbackqueue:completion:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:)",
                "title" : "func track(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:callbackqueue:completion:)",
                "title" : "func track(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(dimensions:at:options:)",
                "title" : "func trackPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(options:)",
                "title" : "func trackPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:callbackqueue:completion:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(launchoptions:at:options:)",
                "title" : "static func trackAppOpened(launchOptions: [UIApplication.LaunchOptionsKey : Any], at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(launchoptions:at:options:callbackqueue:completion:)",
                "title" : "static func trackAppOpened(launchOptions: [UIApplication.LaunchOptionsKey : Any], at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopenedpublisher(dimensions:at:options:)",
                "title" : "static func trackAppOpenedPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopenedpublisher(launchoptions:at:options:)",
                "title" : "static func trackAppOpenedPublisher(launchOptions: [UIApplication.LaunchOptionsKey : Any], at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanalytics",
            "title" : "ParseAnalytics",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:)",
                "title" : "func login(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:callbackqueue:completion:)",
                "title" : "func login(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(options:)",
                "title" : "func loginPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanonymous\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanonymous",
            "title" : "ParseAnonymous",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(user:identitytoken:options:)",
                "title" : "func linkPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(user:identitytoken:options:)",
                "title" : "func loginPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseapple\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseapple",
            "title" : "ParseApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(base64:)",
                "title" : "init(base64: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(data:)",
                "title" : "init(data: Data)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/base64",
                "title" : "let base64: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsebytes",
            "title" : "ParseBytes",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(requiresauthentication:publicaccess:)",
                "title" : "init(requiresAuthentication: Bool, publicAccess: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/protectedfields",
                "title" : "var protectedFields: [String : Set<String>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/readuserfields",
                "title" : "var readUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/writeuserfields",
                "title" : "var writeUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addpointerfields(_:on:)",
                "title" : "func addPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-2hwwg",
                "title" : "func addProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-3ld7d",
                "title" : "func addProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-6fcbm",
                "title" : "func addProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-7mmnw",
                "title" : "func addProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldspublic(_:)",
                "title" : "func addProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsrequiresauthentication(_:)",
                "title" : "func addProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsuser(_:userfield:)",
                "title" : "func addProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getpointerfields(_:)",
                "title" : "func getPointerFields(Action) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-1ibkv",
                "title" : "func getProtectedFields<R>(R) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-35eqy",
                "title" : "func getProtectedFields(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-3oyee",
                "title" : "func getProtectedFields<U>(Pointer<U>) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-6ueex",
                "title" : "func getProtectedFields<U>(U) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldspublic()",
                "title" : "func getProtectedFieldsPublic() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsrequiresauthentication()",
                "title" : "func getProtectedFieldsRequiresAuthentication() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsuser(_:)",
                "title" : "func getProtectedFieldsUser(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-37b9k",
                "title" : "func hasAccess<U>(Action, for: U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-7qp10",
                "title" : "func hasAccess<R>(Action, for: R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-94bwb",
                "title" : "func hasAccess(Action, for: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-msxs",
                "title" : "func hasAccess<U>(Action, for: Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccesspublic(_:)",
                "title" : "func hasAccessPublic(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccessrequiresauthentication(_:)",
                "title" : "func hasAccessRequiresAuthentication(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-31rh7",
                "title" : "func hasReadAccess<U>(Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-4yuat",
                "title" : "func hasReadAccess<R>(R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-7lyeb",
                "title" : "func hasReadAccess(String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-bbom",
                "title" : "func hasReadAccess<U>(U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccesspublic()",
                "title" : "func hasReadAccessPublic() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccessrequiresauthentication()",
                "title" : "func hasReadAccessRequiresAuthentication() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-5ldwm",
                "title" : "func hasWriteAccess<R>(R, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-7ov62",
                "title" : "func hasWriteAccess(String, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-8k62f",
                "title" : "func hasWriteAccess<U>(Pointer<U>, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-9svo4",
                "title" : "func hasWriteAccess<U>(U, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccesspublic(_:)",
                "title" : "func hasWriteAccessPublic(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccessrequiresauthentication(_:)",
                "title" : "func hasWriteAccessRequiresAuthentication(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removepointerfields(_:on:)",
                "title" : "func removePointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-4w6oa",
                "title" : "func removeProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-7qajb",
                "title" : "func removeProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-8it6u",
                "title" : "func removeProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-9c9jl",
                "title" : "func removeProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldspublic(_:)",
                "title" : "func removeProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsrequiresauthentication(_:)",
                "title" : "func removeProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsuser(_:userfield:)",
                "title" : "func removeProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-1fd37",
                "title" : "func setAccess(Bool, on: Action, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-2clcm",
                "title" : "func setAccess<R>(Bool, on: Action, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-b3t7",
                "title" : "func setAccess<U>(Bool, on: Action, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-z0aw",
                "title" : "func setAccess<U>(Bool, on: Action, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccesspublic(_:on:)",
                "title" : "func setAccessPublic(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccessrequiresauthentication(_:on:)",
                "title" : "func setAccessRequiresAuthentication(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setpointerfields(_:on:)",
                "title" : "func setPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-2fsdg",
                "title" : "func setProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-3ewb1",
                "title" : "func setProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-46xeu",
                "title" : "func setProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-7w0s5",
                "title" : "func setProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:userfield:)",
                "title" : "func setProtectedFields(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldspublic(_:)",
                "title" : "func setProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldsrequiresauthentication(_:)",
                "title" : "func setProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-3nc5c",
                "title" : "func setReadAccess<R>(Bool, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-464o",
                "title" : "func setReadAccess<U>(Bool, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-4q3c9",
                "title" : "func setReadAccess(Bool, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-6ssgv",
                "title" : "func setReadAccess<U>(Bool, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccesspublic(_:)",
                "title" : "func setReadAccessPublic(Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setReadAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-3axhs",
                "title" : "func setWriteAccess<U>(Bool, for: Pointer<U>, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4gvup",
                "title" : "func setWriteAccess<U>(Bool, for: U, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4ws0r",
                "title" : "func setWriteAccess(Bool, for: String, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-5qka",
                "title" : "func setWriteAccess<R>(Bool, for: R, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccesspublic(_:canaddfield:)",
                "title" : "func setWriteAccessPublic(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setWriteAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/addfield",
                    "title" : "case addField",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/count",
                    "title" : "case count",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/create",
                    "title" : "case create",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/delete",
                    "title" : "case delete",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/find",
                    "title" : "case find",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/get",
                    "title" : "case get",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/update",
                    "title" : "case update",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseclp\/action\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/action",
                "title" : "ParseCLP.Action",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclp",
            "title" : "ParseCLP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/current()",
                "title" : "static func current() async throws -> [String : V]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetch(options:)",
                "title" : "static func fetch(options: API.Options) async throws -> [String : V]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetch(options:callbackqueue:completion:)",
                "title" : "static func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[String : V], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetchpublisher(options:)",
                "title" : "static func fetchPublisher(options: API.Options) -> Future<[String : V], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/save(_:options:)",
                "title" : "static func save([String : V], options: API.Options) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/save(_:options:callbackqueue:completion:)",
                "title" : "static func save([String : V], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Bool, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/savepublisher(_:options:)",
                "title" : "static func savePublisher([String : V], options: API.Options) -> Future<Bool, ParseError>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfigcodable",
            "title" : "ParseConfigCodable",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/init(applicationid:clientkey:primarykey:maintenancekey:webhookkey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cach-f3sf",
                "title" : "init(applicationId: String, clientKey: String?, primaryKey: String?, maintenanceKey: String?, webhookKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, usingAutomaticLogin: Bool, maxConnectionAttempts: Int, liveQueryConnectionAdditionalProperties: Bool, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/applicationid",
                "title" : "var applicationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachediskcapacity",
                "title" : "var cacheDiskCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachememorycapacity",
                "title" : "var cacheMemoryCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/clientkey",
                "title" : "var clientKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/httpadditionalheaders",
                "title" : "var httpAdditionalHeaders: [AnyHashable : Any]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isdeletingkeychainifneeded",
                "title" : "var isDeletingKeychainIfNeeded: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/ismigratingfromobjcsdk",
                "title" : "var isMigratingFromObjcSDK: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isrequiringcustomobjectids",
                "title" : "var isRequiringCustomObjectIds: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingautomaticlogin",
                "title" : "var isUsingAutomaticLogin: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingdataprotectionkeychain",
                "title" : "var isUsingDataProtectionKeychain: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingequalqueryconstraint",
                "title" : "var isUsingEqualQueryConstraint: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingpostforquery",
                "title" : "var isUsingPostForQuery: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingtransactions",
                "title" : "var isUsingTransactions: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequeryconnectionadditionalproperties",
                "title" : "var liveQueryConnectionAdditionalProperties: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerymaxconnectionattempts",
                "title" : "var liveQueryMaxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerysserverurl",
                "title" : "var liveQuerysServerURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/maintenancekey",
                "title" : "var maintenanceKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/maxconnectionattempts",
                "title" : "var maxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/parsefiletransfer",
                "title" : "var parseFileTransfer: ParseFileTransferable",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/primarykey",
                "title" : "var primaryKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/primitivestore",
                "title" : "var primitiveStore: ParsePrimitiveStorable",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/requestcachepolicy",
                "title" : "var requestCachePolicy: URLRequest.CachePolicy",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/serverurl",
                "title" : "var serverURL: URL",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfiguration",
            "title" : "ParseConfiguration",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencoder\/encode(_:acl:skipkeys:)",
                "title" : "func encode<T>(T, acl: ParseACL?, skipKeys: SkipKeys) throws -> Data",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/cloud",
                    "title" : "case cloud",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/custom(_:)",
                    "title" : "case custom(Set<String>)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/customobjectid",
                    "title" : "case customObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/none",
                    "title" : "case none",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/object",
                    "title" : "case object",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys",
                "title" : "ParseEncoder.SkipKeys",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencoder",
            "title" : "ParseEncoder",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(code:message:)",
                "title" : "init(code: Code, message: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(code:message:swift:)",
                "title" : "init(code: Code, message: String, swift: Swift.Error)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(othercode:message:)",
                "title" : "init(otherCode: Int, message: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.property",
                "title" : "let code: Code",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/message",
                "title" : "let message: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/othercode",
                "title" : "let otherCode: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/swift",
                "title" : "let swift: Swift.Error?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/accountalreadylinked",
                    "title" : "case accountAlreadyLinked",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/aggregateerror",
                    "title" : "case aggregateError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/cachemiss",
                    "title" : "case cacheMiss",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/changedimmutablefielderror",
                    "title" : "case changedImmutableFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/clientdisconnected",
                    "title" : "case clientDisconnected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/commandunavailable",
                    "title" : "case commandUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/connectionfailed",
                    "title" : "case connectionFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicaterequest",
                    "title" : "case duplicateRequest",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicatevalue",
                    "title" : "case duplicateValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/exceededquota",
                    "title" : "case exceededQuota",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeletefailure",
                    "title" : "case fileDeleteFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeleteunnamedfailure",
                    "title" : "case fileDeleteUnnamedFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filereaderror",
                    "title" : "case fileReadError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filesavefailure",
                    "title" : "case fileSaveFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filetoolarge",
                    "title" : "case fileTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hostingerror",
                    "title" : "case hostingError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/incorrecttype",
                    "title" : "case incorrectType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/inefficientqueryerror",
                    "title" : "case inefficientQueryError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/internalserver",
                    "title" : "case internalServer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidacl",
                    "title" : "case invalidACL",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidauthdataerror",
                    "title" : "case invalidAuthDataError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelname",
                    "title" : "case invalidChannelName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelsarrayerror",
                    "title" : "case invalidChannelsArrayError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidclassname",
                    "title" : "case invalidClassName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidcontentlength",
                    "title" : "case invalidContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetoken",
                    "title" : "case invalidDeviceToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetypeerror",
                    "title" : "case invalidDeviceTypeError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidemailaddress",
                    "title" : "case invalidEmailAddress",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalideventname",
                    "title" : "case invalidEventName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidexpirationerror",
                    "title" : "case invalidExpirationError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidfilename",
                    "title" : "case invalidFileName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidimagedata",
                    "title" : "case invalidImageData",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidinstallationiderror",
                    "title" : "case invalidInstallationIdError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidjson",
                    "title" : "case invalidJSON",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidkeyname",
                    "title" : "case invalidKeyName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlimiterror",
                    "title" : "case invalidLimitError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlinkedsession",
                    "title" : "case invalidLinkedSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidnestedkey",
                    "title" : "case invalidNestedKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpointer",
                    "title" : "case invalidPointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpushtime",
                    "title" : "case invalidPushTime",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidquery",
                    "title" : "case invalidQuery",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidrolename",
                    "title" : "case invalidRoleName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidschemaoperation",
                    "title" : "case invalidSchemaOperation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsessiontoken",
                    "title" : "case invalidSessionToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidskiperror",
                    "title" : "case invalidSkipError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsubscriptiontype",
                    "title" : "case invalidSubscriptionType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidvalue",
                    "title" : "case invalidValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/linkedidmissing",
                    "title" : "case linkedIdMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfaerror",
                    "title" : "case mfaError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfatokenrequired",
                    "title" : "case mfaTokenRequired",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontentlength",
                    "title" : "case missingContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontenttype",
                    "title" : "case missingContentType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingobjectid",
                    "title" : "case missingObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingrequiredfielderror",
                    "title" : "case missingRequiredFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objectnotfound",
                    "title" : "case objectNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objecttoolarge",
                    "title" : "case objectTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/operationforbidden",
                    "title" : "case operationForbidden",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/other",
                    "title" : "case other",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/othercause",
                    "title" : "case otherCause",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/pushmisconfigured",
                    "title" : "case pushMisconfigured",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/requestlimitexceeded",
                    "title" : "case requestLimitExceeded",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/scriptfailed",
                    "title" : "case scriptFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/serviceunavailable",
                    "title" : "case serviceUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/timeout",
                    "title" : "case timeout",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsavedfilefailure",
                    "title" : "case unsavedFileFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsupportedservice",
                    "title" : "case unsupportedService",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercanonlybecreatedthroughsignup",
                    "title" : "case userCanOnlyBeCreatedThroughSignUp",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercannotbealteredwithoutsession",
                    "title" : "case userCannotBeAlteredWithoutSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailmissing",
                    "title" : "case userEmailMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailtaken",
                    "title" : "case userEmailTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userpasswordmissing",
                    "title" : "case userPasswordMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userwithemailnotfound",
                    "title" : "case userWithEmailNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernamemissing",
                    "title" : "case usernameMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernametaken",
                    "title" : "case usernameTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/validationfailed",
                    "title" : "case validationFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/webhookerror",
                    "title" : "case webhookError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/xdomainrequest",
                    "title" : "case xDomainRequest",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-4z7ws",
                        "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-5rs0d",
                        "title" : "func containedIn(ParseError.Code...) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-6j9cy",
                        "title" : "func containedIn([ParseError.Code]) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-749cm",
                        "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-43i1q",
                        "title" : "func equalsTo(ParseError.Code) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-5x7gp",
                        "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum",
                "title" : "ParseError.Code",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-18mqc",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-5oudf",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-6itoq",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-95ktw",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-786kn",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-9xnax",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseerror",
            "title" : "ParseError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefacebook\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefacebook",
            "title" : "ParseFacebook",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefield\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/acl",
                    "title" : "case acl",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/array",
                    "title" : "case array",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/boolean",
                    "title" : "case boolean",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/bytes",
                    "title" : "case bytes",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/date",
                    "title" : "case date",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/file",
                    "title" : "case file",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/geopoint",
                    "title" : "case geoPoint",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/number",
                    "title" : "case number",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/object",
                    "title" : "case object",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/pointer",
                    "title" : "case pointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/polygon",
                    "title" : "case polygon",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/relation",
                    "title" : "case relation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/string",
                    "title" : "case string",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/fieldtype",
                "title" : "ParseField.FieldType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefield",
            "title" : "ParseField",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-3ggr5",
                "title" : "init(required: Bool, defauleValue: V?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-96ibo",
                "title" : "init(required: Bool, defauleValue: V?) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/defaultvalue",
                "title" : "var defaultValue: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/required",
                "title" : "var required: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefieldoptions",
            "title" : "ParseFieldOptions",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:cloudurl:metadata:tags:options:)",
                "title" : "init(name: String, cloudURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:data:mimetype:metadata:tags:options:)",
                "title" : "init(name: String, data: Data, mimeType: String?, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:localurl:metadata:tags:options:)",
                "title" : "init(name: String, localURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/cloudurl",
                "title" : "var cloudURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/data",
                "title" : "var data: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/localurl",
                "title" : "var localURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/metadata",
                "title" : "var metadata: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/mimetype",
                "title" : "var mimeType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/options",
                "title" : "var options: API.Options",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/tags",
                "title" : "var tags: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:callbackqueue:progress:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:progress:)",
                "title" : "func fetch(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:progress:)",
                "title" : "func fetchPublisher(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/issaved()",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:callbackqueue:progress:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:progress:)",
                "title" : "func save(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:stream:callbackqueue:progress:completion:)",
                "title" : "func save(options: API.Options, stream: InputStream, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?, completion: (ParseError?) -> Void) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:progress:)",
                "title" : "func savePublisher(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete()",
                    "title" : "func delete() async throws -> DeletingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/id",
                    "title" : "var id: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> ParseFile",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefile",
            "title" : "ParseFile",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/init()",
                "title" : "init?()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/defaultdatadirectorypath",
                "title" : "var defaultDataDirectoryPath: URL?",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/downloaddirectory()",
                "title" : "static func downloadDirectory() throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-3nh5r",
                "title" : "static func fileExists(String) throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-4h3hl",
                "title" : "static func fileExists(ParseFile) throws -> URL",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefilemanager",
            "title" : "ParseFileManager",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(coordinate:)",
                "title" : "init(coordinate: CLLocationCoordinate2D) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(latitude:longitude:)",
                "title" : "init(latitude: Double, longitude: Double) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(location:)",
                "title" : "init(location: CLLocation) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/latitude",
                "title" : "var latitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/longitude",
                "title" : "var longitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocation",
                "title" : "var toCLLocation: CLLocation",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocationcoordinate2d",
                "title" : "var toCLLocationCoordinate2D: CLLocationCoordinate2D",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinkilometers(_:)",
                "title" : "func distanceInKilometers(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinmiles(_:)",
                "title" : "func distanceInMiles(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinradians(_:)",
                "title" : "func distanceInRadians(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegeopoint",
            "title" : "ParseGeoPoint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(id:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(id:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegithub\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegithub",
            "title" : "ParseGitHub",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegoogle\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegoogle",
            "title" : "ParseGoogle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunction\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/init(name:url:)",
                    "title" : "init(name: String, url: URL?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetch(options:)",
                    "title" : "func fetch(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetch(options:callbackqueue:completion:)",
                    "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchall(options:)",
                    "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchall(options:callbackqueue:completion:)",
                    "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchallpublisher(options:)",
                    "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/fetchpublisher(options:)",
                    "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/update(options:)",
                    "title" : "func update(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/update(options:callbackqueue:completion:)",
                    "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunction\/updatepublisher(options:)",
                    "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunction\/parsehookfunctionable-implementations",
                "title" : "ParseHookFunctionable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunction",
            "title" : "ParseHookFunction",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parameters",
                "title" : "var parameters: P",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/userttype",
                "title" : "ParseHookFunctionRequest.UsertType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionrequest",
            "title" : "ParseHookFunctionRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(error:)",
                "title" : "init(error: ParseError)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(success:)",
                "title" : "init(success: R)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/success",
                "title" : "var success: R?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1ahdr",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1zvnk",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-2ui18",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-3necj",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-4kve4",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-6whsf",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookresponse",
            "title" : "ParseHookResponse",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/triggername",
                "title" : "var triggerName: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(classname:trigger:url:)",
                    "title" : "init(className: String, trigger: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(classname:triggername:url:)",
                    "title" : "init(className: String, triggerName: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:trigger:url:)-2xkgb",
                    "title" : "init<T>(object: T.Type, trigger: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:trigger:url:)-37mpt",
                    "title" : "init(object: ParseHookTriggerObject, trigger: ParseHookTriggerType, url: URL) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:trigger:url:)-4voqc",
                    "title" : "init<T>(object: T, trigger: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(object:triggername:url:)",
                    "title" : "init<T>(object: T, triggerName: ParseHookTriggerType, url: URL)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(trigger:url:)",
                    "title" : "init(trigger: ParseHookTriggerType, url: URL) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/init(triggername:url:)",
                    "title" : "init(triggerName: ParseHookTriggerType, url: URL) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetch(options:)",
                    "title" : "func fetch(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetch(options:callbackqueue:completion:)",
                    "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchall(options:)",
                    "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchall(options:callbackqueue:completion:)",
                    "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchallpublisher(options:)",
                    "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/fetchpublisher(options:)",
                    "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/update(options:)",
                    "title" : "func update(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/update(options:callbackqueue:completion:)",
                    "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktrigger\/updatepublisher(options:)",
                    "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktrigger\/parsehooktriggerable-implementations",
                "title" : "ParseHookTriggerable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktrigger",
            "title" : "ParseHookTrigger",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/event",
                "title" : "var event: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/isget",
                "title" : "var isGet: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/object",
                "title" : "var object: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/objects",
                "title" : "var objects: [T]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/original",
                "title" : "var original: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/query",
                "title" : "var query: Query<T>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/sendevent",
                "title" : "var sendEvent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/subscriptions",
                "title" : "var subscriptions: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/trigger",
                "title" : "var trigger: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/usertype",
                "title" : "ParseHookTriggerObjectRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest",
            "title" : "ParseHookTriggerObjectRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/file",
                "title" : "var file: ParseFile?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/filesize",
                "title" : "var fileSize: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/trigger",
                "title" : "var trigger: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/usertype",
                "title" : "ParseHookTriggerRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequest",
            "title" : "ParseHookTriggerRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/graphapibaseurl",
                "title" : "static var graphAPIBaseURL: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseinstagram\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstagram",
            "title" : "ParseInstagram",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:)",
                "title" : "func link(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:callbackqueue:completion:)",
                "title" : "func link(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(id:password:options:)",
                "title" : "func linkPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:)",
                "title" : "func login(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:callbackqueue:completion:)",
                "title" : "func login(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(id:password:options:)",
                "title" : "func loginPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseldap\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseldap",
            "title" : "ParseLDAP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselinkedin\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselinkedin",
            "title" : "ParseLinkedIn",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/init(target:)",
                "title" : "init(target: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-16zkg",
                "title" : "func add<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-4or5w",
                "title" : "func add<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-47ckx",
                "title" : "func addRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-gw2h",
                "title" : "func addRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-3v3y",
                "title" : "func addUnique<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-9mi29",
                "title" : "func addUnique<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/batch(_:operations:)",
                "title" : "func batch(String, operations: ParseOperationBatch) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:to:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:value:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), value: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/increment(_:by:)-19wfq",
                "title" : "func increment(String, by: Double) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/increment(_:by:)-2jfll",
                "title" : "func increment(String, by: Int) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/issaved()",
                "title" : "func isSaved() async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-290yc",
                "title" : "func remove<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-9b7ai",
                "title" : "func remove<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-1wbm6",
                "title" : "func removeRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-3ty5e",
                "title" : "func removeRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<T, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-6e7l2",
                "title" : "func set<W>(WritableKeyPath<T, W?>, to: W) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-88uvh",
                "title" : "func set<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-1atuj",
                "title" : "func unset<V>((String, WritableKeyPath<T, V?>)) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-7dqb3",
                "title" : "func unset(String) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperation",
            "title" : "ParseOperation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/objects",
                "title" : "var objects: [T]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationadd\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationadd\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationadd\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationadd\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationadd",
            "title" : "ParseOperationAdd",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/init(objects:)",
                "title" : "init(objects: [T]) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/objects",
                "title" : "var objects: [Pointer<T>]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationaddrelation",
            "title" : "ParseOperationAddRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/objects",
                "title" : "var objects: Set<T>",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddunique\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddunique\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationaddunique",
            "title" : "ParseOperationAddUnique",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/init(operations:)",
                "title" : "init<T>(operations: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/appendoperations(operations:)",
                "title" : "func appendOperations<T>(operations: [T]) -> ParseOperationBatch",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationbatch\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationbatch\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationbatch",
            "title" : "ParseOperationBatch",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationdelete\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationdelete\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationdelete",
            "title" : "ParseOperationDelete",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/init(amount:)",
                "title" : "init(amount: Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrement\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrement\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationincrement",
            "title" : "ParseOperationIncrement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/init(amount:)",
                "title" : "init(amount: Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationincrementdouble",
            "title" : "ParseOperationIncrementDouble",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/objects",
                "title" : "let objects: [T]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremove\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremove\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremove\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremove\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationremove",
            "title" : "ParseOperationRemove",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/objects",
                "title" : "var objects: [Pointer<T>]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationremoverelation",
            "title" : "ParseOperationRemoveRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-61vkc",
                "title" : "init([ParseGeoPoint]) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-8n95l",
                "title" : "init(ParseGeoPoint...) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/coordinates",
                "title" : "let coordinates: [ParseGeoPoint]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/containspoint(_:)",
                "title" : "func containsPoint(ParseGeoPoint) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepolygon",
            "title" : "ParsePolygon",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationdate:)",
                "title" : "init(payload: V, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationinterval:)",
                "title" : "init(payload: V, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationdate:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationinterval:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/channels",
                "title" : "var channels: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/expirationinterval",
                "title" : "var expirationInterval: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/payload",
                "title" : "var payload: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/where",
                "title" : "var `where`: QueryWhere?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:)",
                "title" : "func fetchStatus(String, options: API.Options) async throws -> ParsePushStatus<V>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:callbackqueue:completion:)",
                "title" : "func fetchStatus(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ParsePushStatus<V>, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatuspublisher(_:options:)",
                "title" : "func fetchStatusPublisher(String, options: API.Options) -> Future<ParsePushStatus<V>, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:)",
                "title" : "func send(options: API.Options) async throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:callbackqueue:completion:)",
                "title" : "func send(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<String, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/sendpublisher(options:)",
                "title" : "func sendPublisher(options: API.Options) -> Future<String, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepush",
            "title" : "ParsePush",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/action",
                "title" : "var action: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/actionlockey",
                "title" : "var actionLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/launchimage",
                "title" : "var launchImage: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/locargs",
                "title" : "var locArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/lockey",
                "title" : "var locKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelocargs",
                "title" : "var subtitleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelockey",
                "title" : "var subtitleLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplealert",
            "title" : "ParsePushAppleAlert",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplesound",
            "title" : "ParsePushAppleSound",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:icon:)",
                "title" : "init(title: String?, body: String?, icon: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:image:)",
                "title" : "init(title: String?, body: String?, image: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/androidchannelid",
                "title" : "var androidChannelId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/badge",
                "title" : "var badge: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylocargs",
                "title" : "var bodyLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylockey",
                "title" : "var bodyLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/clickaction",
                "title" : "var clickAction: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/color",
                "title" : "var color: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/icon",
                "title" : "var icon: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/image",
                "title" : "var image: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/sound",
                "title" : "var sound: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/tag",
                "title" : "var tag: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasenotification",
            "title" : "ParsePushFirebaseNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttoapple()",
                "title" : "func convertToApple() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttofirebase()",
                "title" : "func convertToFirebase() -> ParsePushPayloadFirebase",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadany",
            "title" : "ParsePushPayloadAny",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(alert:)",
                "title" : "init(alert: ParsePushAppleAlert)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/contentavailable",
                "title" : "var contentAvailable: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mutablecontent",
                "title" : "var mutableContent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/priority",
                "title" : "var priority: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.property",
                "title" : "var pushType: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/getsound()",
                "title" : "func getSound<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/incrementbadge()",
                "title" : "func incrementBadge() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setbadge(_:)",
                "title" : "func setBadge(Int) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-27wko",
                "title" : "func setSound(ParsePushAppleSound) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-4d1ma",
                "title" : "func setSound<V>(V) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/alert",
                    "title" : "case alert",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/background",
                    "title" : "case background",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum",
                "title" : "ParsePushPayloadApple.PushType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadapple",
            "title" : "ParsePushPayloadApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(notification:)",
                "title" : "init(notification: ParsePushFirebaseNotification)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/contentavailable",
                "title" : "var contentAvailable: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/mutablecontent",
                "title" : "var mutableContent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/priority",
                "title" : "var priority: `Self`.PushPriority?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/high",
                    "title" : "case high",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/normal",
                    "title" : "case normal",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority",
                "title" : "ParsePushPayloadFirebase.PushPriority",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase",
            "title" : "ParsePushPayloadFirebase",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payload",
                "title" : "var payload: PayloadType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/query",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payloadtype",
                "title" : "ParsePushStatus.PayloadType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete()",
                    "title" : "func delete() async throws -> DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch()",
                    "title" : "func fetch() async throws -> FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/endpoint(_:)",
                    "title" : "func endpoint(API.Method) async throws -> API.Endpoint",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/issaved()",
                    "title" : "func isSaved() async throws -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/id",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-473ct",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-6n2lm",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:object:)",
                    "title" : "func relation<V>(String, object: V.Type) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-1f2xg",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-m51y",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-4cj59",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-p3o1",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-4n4k6",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-9k0oc",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatus",
            "title" : "ParsePushStatus",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-25hfj",
                "title" : "init(parent: Pointer<T>, key: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-9iv6m",
                "title" : "init(parent: T, key: String?) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-6zxtt",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: U)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-7ek9i",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: Pointer<U>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-8evhy",
                "title" : "init<U>(parent: T, key: String?, child: U) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-912hj",
                "title" : "init<U>(parent: T, key: String?, child: Pointer<U>) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-5ijuf",
                "title" : "init(parent: T, key: String?, className: String) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-7xhg8",
                "title" : "init(parent: Pointer<T>, key: String?, className: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:object:)-2y4rx",
                "title" : "init<V>(parent: Pointer<T>, key: String?, object: V.Type)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:object:)-8sj83",
                "title" : "init<V>(parent: T, key: String?, object: V.Type) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/parent",
                "title" : "var parent: Pointer<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-89hhl",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-fiw5",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-ob98",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:objects:)",
                "title" : "func add<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query()",
                "title" : "func query<U>() throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:)",
                "title" : "func query<U>(String) throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-2ymy3",
                "title" : "func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-6niph",
                "title" : "func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-5sx9o",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-8lzzm",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-ks5y",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:objects:)",
                "title" : "func remove<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-4a90y",
                "title" : "static func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-52scm",
                "title" : "static func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserelation",
            "title" : "ParseRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(classlevelpermissions:)",
                "title" : "init(classLevelPermissions: ParseCLP)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classlevelpermissions",
                "title" : "var classLevelPermissions: ParseCLP?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-2gkz6",
                "title" : "func addField<T>(String, type: ParseField.FieldType, options: ParseFieldOptions<T>) throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-v4zh",
                "title" : "func addField<V>(String, type: ParseField.FieldType, options: ParseFieldOptions<V>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addindex(_:field:index:)",
                "title" : "func addIndex(String, field: String, index: Encodable) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addpointer(_:options:)",
                "title" : "func addPointer<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addrelation(_:options:)",
                "title" : "func addRelation<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/createpublisher(includekeys:options:)",
                "title" : "func createPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletefield(_:)",
                "title" : "func deleteField(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deleteindex(_:)",
                "title" : "func deleteIndex(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletepublisher(includekeys:options:)",
                "title" : "func deletePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getfields()",
                "title" : "func getFields() -> [String : String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getindexes()",
                "title" : "func getIndexes() -> [String : [String : String]]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:)",
                "title" : "func purge(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:callbackqueue:completion:)",
                "title" : "func purge(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purgepublisher(includekeys:options:)",
                "title" : "func purgePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/updatepublisher(includekeys:options:)",
                "title" : "func updatePublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseschema",
            "title" : "ParseSchema",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/information\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/information\/version",
                    "title" : "var version: ParseVersion?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/information\/getfeatures()",
                    "title" : "func getFeatures<T>() throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/information",
                "title" : "ParseServer.Information",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/check(options:)",
                "title" : "static func check(options: API.Options) async throws -> Status",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/check(options:callbackqueue:allowintermediateresponses:completion:)",
                "title" : "static func check(options: API.Options, callbackQueue: DispatchQueue, allowIntermediateResponses: Bool, completion: (Result<Status, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/checkpublisher(options:)",
                "title" : "static func checkPublisher(options: API.Options) -> AnyPublisher<Status, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/health(options:)",
                "title" : "static func health(options: API.Options) async throws -> Status",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/health(options:callbackqueue:allowintermediateresponses:completion:)",
                "title" : "static func health(options: API.Options, callbackQueue: DispatchQueue, allowIntermediateResponses: Bool, completion: (Result<Status, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/healthpublisher(options:)",
                "title" : "static func healthPublisher(options: API.Options) -> AnyPublisher<Status, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/information(options:)",
                "title" : "static func information(options: API.Options) async throws -> Information",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/information(options:callbackqueue:completion:)",
                "title" : "static func information(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Information, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseserver\/informationpublisher(options:)",
                "title" : "static func informationPublisher(options: API.Options) -> Future<Information, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/error",
                    "title" : "case error",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/initialized",
                    "title" : "case initialized",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/ok",
                    "title" : "case ok",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/starting",
                    "title" : "case starting",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseserver\/status\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseserver\/status\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/status",
                "title" : "ParseServer.Status",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseserver\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseserver\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseserver",
            "title" : "ParseServer",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsespotify\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsespotify",
            "title" : "ParseSpotify",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func linkPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func login(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func loginPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetwitter\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetwitter",
            "title" : "ParseTwitter",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/init(string:)",
                "title" : "init(string: String) throws",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/current()",
                "title" : "static func current() async throws -> ParseVersion",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-1ju9p",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-7523g",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2eh5t",
                    "title" : "static func > (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2fa7s",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2ie1v",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-4xugm",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-5i0hp",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7dags",
                    "title" : "static func >= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7eh1a",
                    "title" : "static func <= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseversion",
            "title" : "ParseVersion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(_:)",
                "title" : "init(T) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(objectid:)",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/classname",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/objectid",
                "title" : "var objectId: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/toobject()",
                "title" : "func toObject() -> T",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/object",
                "title" : "Pointer.Object",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch()",
                    "title" : "func fetch() async throws -> FetchingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/pointer",
            "title" : "Pointer",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-16e61",
                "title" : "init(QueryConstraint...)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-6muig",
                "title" : "init([QueryConstraint])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel",
                "title" : "var viewModel: QueryViewModel<ResultType>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:callbackqueue:completion:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:)",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplainpublisher(_:usingmongodb:options:)",
                "title" : "func aggregateExplainPublisher<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregatepublisher(_:options:)",
                "title" : "func aggregatePublisher([[String : Encodable]], options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:)",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplainpublisher(usingmongodb:options:)",
                "title" : "func countExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countpublisher(options:)",
                "title" : "func countPublisher(options: API.Options) -> Future<Int, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:)",
                "title" : "func distinct(String, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:callbackqueue:completion:)",
                "title" : "func distinct(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:)",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplainpublisher(_:usingmongodb:options:)",
                "title" : "func distinctExplainPublisher<U>(String, usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctpublisher(_:options:)",
                "title" : "func distinctPublisher(String, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-1jvpb",
                "title" : "func exclude(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-717l0",
                "title" : "func exclude([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-2q1ez",
                "title" : "func fields(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-71x3d",
                "title" : "func fields([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:callbackqueue:completion:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findallpublisher(batchlimit:options:)",
                "title" : "func findAllPublisher(batchLimit: Int?, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:)",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplainpublisher(usingmongodb:options:)",
                "title" : "func findExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findpublisher(options:)",
                "title" : "func findPublisher(options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:)",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<U, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplainpublisher(usingmongodb:options:)",
                "title" : "func firstExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<U, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstpublisher(options:)",
                "title" : "func firstPublisher(options: API.Options) -> Future<ResultType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/hint(_:)",
                "title" : "func hint<U>(U) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-323ik",
                "title" : "func include(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-47jms",
                "title" : "func include([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/includeall()",
                "title" : "func includeAll() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/limit(_:)",
                "title" : "func limit(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-75g9s",
                "title" : "func order([Order]?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-779cz",
                "title" : "func order(Order...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/readpreference(_:includereadpreference:subqueryreadpreference:)",
                "title" : "func readPreference(String?, includeReadPreference: String?, subqueryReadPreference: String?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-23ewt",
                "title" : "func select(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-689ic",
                "title" : "func select([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/skip(_:)",
                "title" : "func skip(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/sortbytextscore()",
                "title" : "func sortByTextScore() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe()",
                "title" : "func subscribe() async throws -> Subscription<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.method",
                "title" : "func subscribe(ParseLiveQuery) async throws -> Subscription<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback()",
                "title" : "func subscribeCallback() async throws -> SubscriptionCallback<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback(_:)",
                "title" : "func subscribeCallback(ParseLiveQuery) async throws -> SubscriptionCallback<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe()",
                "title" : "func unsubscribe() async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:)",
                "title" : "func unsubscribe<V>(V) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:client:)",
                "title" : "func unsubscribe<V>(V, client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(client:)",
                "title" : "func unsubscribe(client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:)",
                "title" : "func update<V>(V) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:client:)",
                "title" : "func update<V>(V, client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-41gct",
                "title" : "func watch(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-9h5yl",
                "title" : "func watch([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-60ukn",
                "title" : "func `where`(QueryConstraint...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-m71l",
                "title" : "func `where`([QueryConstraint]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:)",
                "title" : "func withCount(options: API.Options) async throws -> ([ResultType], Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:callbackqueue:completion:)",
                "title" : "func withCount(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<([ResultType], Int), ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplainpublisher(usingmongodb:options:)",
                "title" : "func withCountExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountpublisher(options:)",
                "title" : "func withCountPublisher(options: API.Options) -> Future<([ResultType], Int), ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.type.method",
                "title" : "static func subscribe<V>(V) async throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:client:)",
                "title" : "static func subscribe<V>(V, client: ParseLiveQuery) async throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel(_:)",
                "title" : "static func viewModel(`Self`) -> QueryViewModel<ResultType>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/ascending(_:)",
                    "title" : "case ascending(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/descending(_:)",
                    "title" : "case descending(String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/order",
                "title" : "Query.Order",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:)",
                    "title" : "func count(options: API.Options) async throws -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:callbackqueue:completion:)",
                    "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:)",
                    "title" : "func find(options: API.Options) async throws -> [ResultType]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:callbackqueue:completion:)",
                    "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:)",
                    "title" : "func first(options: API.Options) async throws -> ResultType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:callbackqueue:completion:)",
                    "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/resulttype",
                    "title" : "Query.ResultType",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/queryable-implementations",
                "title" : "Queryable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/query",
            "title" : "Query",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryconstraint",
            "title" : "QueryConstraint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querywhere\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/querywhere",
            "title" : "QueryWhere",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/triggerrequest\/init(trigger:)",
                "title" : "init<T>(trigger: T) throws",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/triggerrequest",
            "title" : "TriggerRequest",
            "type" : "struct"
          },
          {
            "title" : "Variables",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/configuration",
            "title" : "var configuration: ParseConfiguration",
            "type" : "var"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-4ugox",
            "title" : "func and<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-8cafq",
            "title" : "func and<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/clearcache()",
            "title" : "func clearCache()",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-3irrl",
            "title" : "func containedBy<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-8m6r2",
            "title" : "func containedBy<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-36xo5",
            "title" : "func containedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-f8wn",
            "title" : "func containedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-1g8ks",
            "title" : "func containsAll<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-7bkbc",
            "title" : "func containsAll<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsstring(key:substring:modifiers:)",
            "title" : "func containsString(key: String, substring: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/deleteobjectiveckeychain()",
            "title" : "func deleteObjectiveCKeychain() async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotexist(key:)",
            "title" : "func doesNotExist(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotmatchkeyinquery(key:querykey:query:)",
            "title" : "func doesNotMatchKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:object:)",
            "title" : "func equalTo<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:value:)",
            "title" : "func equalTo<T>(key: String, value: T) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equaltonocomparator(key:object:)",
            "title" : "func equalToNoComparator<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equaltonocomparator(key:value:)",
            "title" : "func equalToNoComparator<T>(key: String, value: T) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/exists(key:)",
            "title" : "func exists(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/geopoint(_:within:)-41yaf",
            "title" : "func geoPoint(String, within: ParsePolygon) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/geopoint(_:within:)-9uzx1",
            "title" : "func geoPoint(String, within: [ParseGeoPoint]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hasprefix(key:prefix:modifiers:)",
            "title" : "func hasPrefix(key: String, prefix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hassuffix(key:suffix:modifiers:)",
            "title" : "func hasSuffix(key: String, suffix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(applicationid:clientkey:primarykey:maintenancekey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cachedisk-fuew",
            "title" : "func initialize(applicationId: String, clientKey: String?, primaryKey: String?, maintenanceKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, usingAutomaticLogin: Bool, maxConnectionAttempts: Int, liveQueryConnectionAdditionalProperties: Bool, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?) async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(configuration:)",
            "title" : "func initialize(configuration: ParseConfiguration) async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnotnull(key:)",
            "title" : "func isNotNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnull(key:)",
            "title" : "func isNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matcheskeyinquery(key:querykey:query:)",
            "title" : "func matchesKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchesregex(key:regex:modifiers:)",
            "title" : "func matchesRegex(key: String, regex: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:)",
            "title" : "func matchesText(key: String, text: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:options:)",
            "title" : "func matchesText(key: String, text: String, options: [ParseTextOption : Encodable]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/near(key:geopoint:)",
            "title" : "func near(key: String, geoPoint: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-4b4r0",
            "title" : "func nor<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-l87w",
            "title" : "func nor<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-2eqxa",
            "title" : "func notContainedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-lma5",
            "title" : "func notContainedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-1117v",
            "title" : "func or<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-8hqvz",
            "title" : "func or<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/polygon(_:contains:)",
            "title" : "func polygon(String, contains: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/polygoncontains(key:point:)",
            "title" : "func polygonContains(key: String, point: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:)",
            "title" : "func related(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-23s9i",
            "title" : "func related<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-6tnr6",
            "title" : "func related<T>(key: String, object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-3ndwf",
            "title" : "func related<T>(object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-9ex2g",
            "title" : "func related<T>(object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/relative(_:)",
            "title" : "func relative(QueryConstraint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/setaccessgroup(_:synchronizeacrossdevices:)",
            "title" : "func setAccessGroup(String?, synchronizeAcrossDevices: Bool) async throws -> Bool",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/updateauthentication(_:)",
            "title" : "func updateAuthentication(((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withingeobox(key:fromsouthwest:tonortheast:)",
            "title" : "func withinGeoBox(key: String, fromSouthWest: ParseGeoPoint, toNortheast: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinkilometers(key:geopoint:distance:sorted:)",
            "title" : "func withinKilometers(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinmiles(key:geopoint:distance:sorted:)",
            "title" : "func withinMiles(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:points:)",
            "title" : "func withinPolygon(key: String, points: [ParseGeoPoint]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:polygon:)",
            "title" : "func withinPolygon(key: String, polygon: ParsePolygon) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinradians(key:geopoint:distance:sorted:)",
            "title" : "func withinRadians(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "title" : "Operators",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-4oylc",
            "title" : "func != <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-6f2gk",
            "title" : "func != <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-8iwik",
            "title" : "func != <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-5jg5t",
            "title" : "func == <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-8pl0h",
            "title" : "func == <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-998hz",
            "title" : "func == <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-35vq2",
            "title" : "func > <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-4bsb2",
            "title" : "func < <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-434pw",
            "title" : "func >= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-6tzg",
            "title" : "func <= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/parsehealth",
            "title" : "ParseHealth",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/==(_:_:)",
                "title" : "static func == <U>(Event<U>, Event<U>) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/created(_:)",
                "title" : "case created(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/deleted(_:)",
                "title" : "case deleted(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/entered(_:)",
                "title" : "case entered(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/left(_:)",
                "title" : "case left(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/updated(_:)",
                "title" : "case updated(T)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/event\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/event\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/event",
            "title" : "Event",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/config",
                "title" : "case config",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/file",
                "title" : "case file",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/livequeryconnect",
                "title" : "case liveQueryConnect",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/object(_:)",
                "title" : "case object(any ParseObject)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/objecttype(_:)",
                "title" : "case objectType(any ParseObject.Type)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobject\/classname",
                "title" : "var className: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerobject",
            "title" : "ParseHookTriggerObject",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterdelete",
                "title" : "case afterDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterevent",
                "title" : "case afterEvent",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterfind",
                "title" : "case afterFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogin",
                "title" : "case afterLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogout",
                "title" : "case afterLogout",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/aftersave",
                "title" : "case afterSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforeconnect",
                "title" : "case beforeConnect",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforedelete",
                "title" : "case beforeDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforefind",
                "title" : "case beforeFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforelogin",
                "title" : "case beforeLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesave",
                "title" : "case beforeSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesubscribe",
                "title" : "case beforeSubscribe",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggertype",
            "title" : "ParseHookTriggerType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/add",
                "title" : "case add",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/addrelation",
                "title" : "case addRelation",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/addunique",
                "title" : "case addUnique",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/batch",
                "title" : "case batch",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/delete",
                "title" : "case delete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/increment",
                "title" : "case increment",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/remove",
                "title" : "case remove",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/removerelation",
                "title" : "case removeRelation",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationcommand",
            "title" : "ParseOperationCommand",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/casesensitive",
                "title" : "case caseSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/diacriticsensitive",
                "title" : "case diacriticSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/language",
                "title" : "case language",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetextoption",
            "title" : "ParseTextOption",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/parseswift",
        "title" : "ParseSwift",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Start Syncing CareKit Data To Your Server",
            "type" : "groupMarker"
          },
          {
            "path" : "\/tutorials\/parsecarekit\/connect-parsecarekit-to-your-app",
            "title" : "Connect ParseCareKit to Your App",
            "type" : "project"
          }
        ],
        "path" : "\/tutorials\/parsecarekit",
        "title" : "Welcome to ParseCareKit",
        "type" : "overview"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}