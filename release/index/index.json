{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/iterator\/next()",
                    "title" : "func next() async -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/iterator",
                "title" : "AsyncChannel.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/init(element:)",
                "title" : "init(element: Element.Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/finish()",
                "title" : "func finish()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/send(_:)",
                "title" : "func send(Element) async",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(by:into:)-3ls94",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(by:into:)-6ugu2",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:)-2lm6a",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:)-5c06n",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:into:)-4yfgk",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:into:)-dapz",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/compactmap(_:)-24cw5",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/compactmap(_:)-7cfmu",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/flatmap(_:)-1fadd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/flatmap(_:)-5vnyd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/map(_:)-d25v",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/map(_:)-rzrm",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(_:_:)-1mjet",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(_:_:)-6zcl4",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(into:_:)-2hos3",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(into:_:)-9qah1",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchannel",
            "title" : "AsyncChannel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynclimitbuffer\/pop()",
                "title" : "func pop() async -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynclimitbuffer\/push(_:)",
                "title" : "func push(Element) async",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclimitbuffer\/policy\/bufferingnewest(_:)",
                    "title" : "case bufferingNewest(Int)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclimitbuffer\/policy\/bufferingoldest(_:)",
                    "title" : "case bufferingOldest(Int)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclimitbuffer\/policy\/unbounded",
                    "title" : "case unbounded",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynclimitbuffer\/policy",
                "title" : "AsyncLimitBuffer.Policy",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynclimitbuffer",
            "title" : "AsyncLimitBuffer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/iterator\/next()",
                    "title" : "func next() async throws -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/iterator",
                "title" : "AsyncThrowingChannel.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/init(_:)",
                "title" : "init(Element.Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/fail(_:)",
                "title" : "func fail(Error)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/finish()",
                "title" : "func finish()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/send(_:)",
                "title" : "func send(Element) async",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(by:into:)-4dy1h",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(by:into:)-9cnm8",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:)-5fo0p",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:)-7nri8",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:into:)-6q6so",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:into:)-7lgud",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/compactmap(_:)-3j086",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/compactmap(_:)-6bayd",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/flatmap(_:)-3ikei",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/flatmap(_:)-8bm8p",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/map(_:)-2fp1y",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/map(_:)-3wpxf",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(_:_:)-8fpp3",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(_:_:)-9na5l",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(into:_:)-13kql",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(into:_:)-65u9g",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel",
            "title" : "AsyncThrowingChannel",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffer\/input",
                "title" : "Input",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffer\/output",
                "title" : "Output",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffer\/pop()",
                "title" : "func pop() async throws -> Output?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffer\/push(_:)",
                "title" : "func push(Input) async",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncbuffer",
            "title" : "AsyncBuffer",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> (Base.Element, Base.Element)?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/iterator\/element",
                    "title" : "AsyncAdjacentPairsSequence.Iterator.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/iterator",
                "title" : "AsyncAdjacentPairsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/element",
                "title" : "AsyncAdjacentPairsSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(by:into:)-9ex6q",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(by:into:)-9pgz5",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:)-4c65x",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:)-8y2vb",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:into:)-17evj",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:into:)-5j04z",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/compactmap(_:)-8f7bl",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/compactmap(_:)-yde1",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/flatmap(_:)-60qnq",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/flatmap(_:)-8b9ti",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/map(_:)-1w3ji",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/map(_:)-5tmp2",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(_:_:)-23t09",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(_:_:)-2fu3d",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(into:_:)-2m6oh",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(into:_:)-7jvu5",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence",
            "title" : "AsyncAdjacentPairsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/iterator",
                "title" : "AsyncBufferSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(by:into:)-6588t",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(by:into:)-663wg",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:)-6eh9a",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:)-6oz8v",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:into:)-2pro7",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:into:)-8g71x",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/compactmap(_:)-1tl72",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/compactmap(_:)-bv66",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/flatmap(_:)-1l3sb",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/flatmap(_:)-277gw",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/map(_:)-5k84n",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/map(_:)-78sa9",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(_:_:)-7p6fl",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(_:_:)-9jpv0",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(into:_:)-78zlg",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(into:_:)-942q",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/element",
                    "title" : "AsyncBufferSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence",
            "title" : "AsyncBufferSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/init(capacity:readfunction:)",
                "title" : "init(capacity: Int, readFunction: (UnsafeMutableRawBufferPointer) async throws -> Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/next()",
                "title" : "func next() async throws -> UInt8?",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/element",
                "title" : "AsyncBufferedByteIterator.Element",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator",
            "title" : "AsyncBufferedByteIterator",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/iterator",
                "title" : "AsyncChain2Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(by:into:)-4bq9c",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(by:into:)-4bqb2",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:)-2c5um",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:)-8yyex",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:into:)-55pim",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:into:)-6b6r0",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/compactmap(_:)-21ibv",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/compactmap(_:)-47dj",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/flatmap(_:)-511jm",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/flatmap(_:)-8hdnk",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/map(_:)-7nk1f",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/map(_:)-900ww",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(_:_:)-3wrzl",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(_:_:)-9etkw",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(into:_:)-1fdh1",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(into:_:)-9i52p",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/element",
                    "title" : "AsyncChain2Sequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence",
            "title" : "AsyncChain2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/iterator",
                "title" : "AsyncChain3Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(by:into:)-5kb77",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(by:into:)-l278",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:)-4jk04",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:)-7ip8m",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:into:)-50dgb",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:into:)-97ky4",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/compactmap(_:)-72nuc",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/compactmap(_:)-9ab8i",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/flatmap(_:)-2h55n",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/flatmap(_:)-9e6z2",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/map(_:)-47zgr",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/map(_:)-7yh27",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(_:_:)-4byh6",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(_:_:)-6o0u4",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(into:_:)-2gxcq",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(into:_:)-5yub0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/element",
                    "title" : "AsyncChain3Sequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence",
            "title" : "AsyncChain3Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Collected?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/iterator",
                "title" : "AsyncChunkedByGroupSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/element",
                "title" : "AsyncChunkedByGroupSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(by:into:)-6p38q",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(by:into:)-8mv40",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:)-5gyam",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:)-8cpyr",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:into:)-6g5yu",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:into:)-79kif",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/compactmap(_:)-2e7eu",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/compactmap(_:)-35f1c",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/flatmap(_:)-5ckkd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/flatmap(_:)-d79b",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/map(_:)-4959b",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/map(_:)-57shn",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(_:_:)-3z0kv",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(_:_:)-60cri",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(into:_:)-7p7c2",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(into:_:)-7pcof",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence",
            "title" : "AsyncChunkedByGroupSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> (Subject, Collected)?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/iterator",
                "title" : "AsyncChunkedOnProjectionSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/element",
                "title" : "AsyncChunkedOnProjectionSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(by:into:)-1qwcz",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(by:into:)-7i8zs",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:)-5583l",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:)-7zmhh",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:into:)-2no4r",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:into:)-43d91",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/compactmap(_:)-4yrtm",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/compactmap(_:)-6j7hm",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/flatmap(_:)-7lnu5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/flatmap(_:)-906c2",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/map(_:)-16x5",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/map(_:)-7jw3m",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(_:_:)-4dn03",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(_:_:)-no1",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(into:_:)-1aa7y",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(into:_:)-3tvc0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence",
            "title" : "AsyncChunkedOnProjectionSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Collected?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/iterator",
                "title" : "AsyncChunksOfCountOrSignalSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/element",
                "title" : "AsyncChunksOfCountOrSignalSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(by:into:)-9g6ae",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(by:into:)-x8kf",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:)-29u2x",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:)-9rkv6",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:into:)-4xcy2",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:into:)-8fhcw",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/compactmap(_:)-5htrq",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/compactmap(_:)-8dsre",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/flatmap(_:)-3p70w",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/flatmap(_:)-3v0xr",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/map(_:)-1w3rt",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/map(_:)-2xla5",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(_:_:)-46il4",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(_:_:)-748sr",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(into:_:)-5vgsk",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(into:_:)-9ablj",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence",
            "title" : "AsyncChunksOfCountOrSignalSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Collected?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/iterator",
                "title" : "AsyncChunksOfCountSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/element",
                "title" : "AsyncChunksOfCountSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(by:into:)-3pq9r",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(by:into:)-4iywh",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:)-3ubjk",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:)-q9o3",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:into:)-1cawq",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:into:)-1nzm0",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/compactmap(_:)-1os9s",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/compactmap(_:)-5gu8z",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/flatmap(_:)-1zxci",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/flatmap(_:)-4d21d",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/map(_:)-266ni",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/map(_:)-7d3ey",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(_:_:)-5cznd",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(_:_:)-7rhy3",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(into:_:)-3mzh0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(into:_:)-wzc3",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence",
            "title" : "AsyncChunksOfCountSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/iterator",
                "title" : "AsyncCombineLatest2Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/init(_:_:)",
                "title" : "init(Base1, Base2)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/asynciterator",
                "title" : "AsyncCombineLatest2Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/element",
                "title" : "AsyncCombineLatest2Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(by:into:)-60ak9",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(by:into:)-668lv",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:)-7m8bz",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:)-9582w",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:into:)-4t3v8",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:into:)-8xok1",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/compactmap(_:)-2jhv4",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/compactmap(_:)-2wqma",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/flatmap(_:)-5m0tb",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/flatmap(_:)-5umsw",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/map(_:)-64jnp",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/map(_:)-6w8ax",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(_:_:)-2chro",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(_:_:)-4hjff",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(into:_:)-1wij9",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(into:_:)-689yt",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence",
            "title" : "AsyncCombineLatest2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/iterator",
                "title" : "AsyncCombineLatest3Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/asynciterator",
                "title" : "AsyncCombineLatest3Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/element",
                "title" : "AsyncCombineLatest3Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(by:into:)-20xoh",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(by:into:)-6c6kc",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:)-3l13o",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:)-7ga68",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:into:)-1z3",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:into:)-6dbts",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/compactmap(_:)-1md0n",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/compactmap(_:)-3s2sz",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/flatmap(_:)-2d2xe",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/flatmap(_:)-3okwp",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/map(_:)-6h242",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/map(_:)-90xuv",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(_:_:)-2ro5r",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(_:_:)-375zy",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(into:_:)-90f79",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(into:_:)-fe74",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence",
            "title" : "AsyncCombineLatest3Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/iterator",
                "title" : "AsyncCompactedSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(by:into:)-4rvm9",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(by:into:)-owiu",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:)-1n7q8",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:)-2ywx0",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:into:)-7ph9s",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:into:)-93kgs",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/compactmap(_:)-1imol",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/compactmap(_:)-3c170",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/flatmap(_:)-1g1wi",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/flatmap(_:)-27epm",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/map(_:)-1ja6u",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/map(_:)-1lz7i",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(_:_:)-4lz5n",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(_:_:)-82spl",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(into:_:)-28hzd",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(into:_:)-7en25",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence",
            "title" : "AsyncCompactedSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/init(_:interval:tolerance:clock:)",
                "title" : "init(Base, interval: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/asynciterator\/next()",
                        "title" : "func next() async rethrows -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/asynciterator",
                    "title" : "AsyncDebounceSequence.AsyncIterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(by:into:)-8vn84",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(by:into:)-8yqe7",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:)-6nsxo",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:)-9fb9b",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:into:)-7veip",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:into:)-9jqtn",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/compactmap(_:)-8a4i7",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/compactmap(_:)-9og8s",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/flatmap(_:)-171w9",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/flatmap(_:)-2dbsd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> AsyncIterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/map(_:)-63tmm",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/map(_:)-94lyj",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(_:_:)-2uzlu",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(_:_:)-3mcly",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(into:_:)-6l53c",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(into:_:)-cxxg",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/element",
                    "title" : "AsyncDebounceSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence",
            "title" : "AsyncDebounceSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/iterator",
                "title" : "AsyncExclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(by:into:)-5z7vc",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(by:into:)-690oe",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:)-3nkd3",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:)-4rouc",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:into:)-16uth",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:into:)-3aa4b",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/compactmap(_:)-4w0a0",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/compactmap(_:)-6aquc",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/flatmap(_:)-4cwvn",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/flatmap(_:)-59cvf",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/map(_:)-15grs",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/map(_:)-5ccqs",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(_:_:)-607ey",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(_:_:)-9xhbw",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(into:_:)-2eltp",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(into:_:)-978i0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence",
            "title" : "AsyncExclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/iterator",
                "title" : "AsyncInclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(by:into:)-2lxdj",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(by:into:)-82m32",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:)-6clvo",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:)-8ej9c",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:into:)-30zc5",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:into:)-9yjng",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/compactmap(_:)-5f6gc",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/compactmap(_:)-7o7oj",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/flatmap(_:)-1zhcy",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/flatmap(_:)-36qfc",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/map(_:)-5ikee",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/map(_:)-6849h",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(_:_:)-2q35a",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(_:_:)-3ztk2",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(into:_:)-21r02",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(into:_:)-6c6se",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/element",
                    "title" : "AsyncInclusiveReductionsSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence",
            "title" : "AsyncInclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/iterator",
                "title" : "AsyncInterspersedSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(by:into:)-2i2a0",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(by:into:)-9z67k",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:)-750tr",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:)-7l635",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:into:)-2v4fm",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:into:)-4lgki",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/compactmap(_:)-2wp1v",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/compactmap(_:)-8r1n4",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/flatmap(_:)-8ukns",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/flatmap(_:)-ud4u",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> AsyncInterspersedSequence<Base>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/map(_:)-2d7qs",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/map(_:)-5eski",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(_:_:)-3hqnh",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(_:_:)-6y8eo",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(into:_:)-6wj27",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(into:_:)-bk8k",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/element",
                    "title" : "AsyncInterspersedSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence",
            "title" : "AsyncInterspersedSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/iterator",
                "title" : "AsyncJoinedBySeparatorSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/asynciterator",
                "title" : "AsyncJoinedBySeparatorSequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/element",
                "title" : "AsyncJoinedBySeparatorSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(by:into:)-497vw",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(by:into:)-7mgyt",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:)-73m7x",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:)-80tkb",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:into:)-5effw",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:into:)-9ejqp",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/compactmap(_:)-5084a",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/compactmap(_:)-5zeop",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/flatmap(_:)-2btzh",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/flatmap(_:)-zx0l",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/map(_:)-4yzh4",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/map(_:)-6cfv",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(_:_:)-132f6",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(_:_:)-2klax",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(into:_:)-1rbu8",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(into:_:)-95v8y",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence",
            "title" : "AsyncJoinedBySeparatorSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/iterator",
                "title" : "AsyncJoinedSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/asynciterator",
                "title" : "AsyncJoinedSequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/element",
                "title" : "AsyncJoinedSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(by:into:)-3bsj8",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(by:into:)-8frkq",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:)-1zvyv",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:)-6ipb4",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:into:)-7skor",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:into:)-9t2y5",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/compactmap(_:)-6hiwz",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/compactmap(_:)-9r9yt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/flatmap(_:)-2f6f5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/flatmap(_:)-3x0wh",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/map(_:)-36lgq",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/map(_:)-885kb",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(_:_:)-1obhx",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(_:_:)-74zlv",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(into:_:)-6qg2h",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(into:_:)-8kf2o",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence",
            "title" : "AsyncJoinedSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/iterator\/next()",
                    "title" : "func next() async -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/iterator",
                "title" : "AsyncLazySequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/element",
                "title" : "AsyncLazySequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunked(by:into:)-7r5zb",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunked(by:into:)-z1ha",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunks(ofcount:or:)-5k4a7",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunks(ofcount:or:)-8pw4g",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunks(ofcount:or:into:)-40vp2",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/chunks(ofcount:or:into:)-4t38b",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/compactmap(_:)-66yb7",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/compactmap(_:)-8qjjv",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/flatmap(_:)-3rgbw",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/flatmap(_:)-7okcm",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/map(_:)-186qn",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/map(_:)-66rdg",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/reductions(_:_:)-2g4zl",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/reductions(_:_:)-4i9lu",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/reductions(into:_:)-6dmys",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/reductions(into:_:)-shrf",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynclazysequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynclazysequence",
            "title" : "AsyncLazySequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/init(_:_:)",
                "title" : "init(Base1, Base2)",
                "type" : "init"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/element",
                "title" : "AsyncMerge2Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/asynciterator\/next()",
                        "title" : "func next() async rethrows -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/asynciterator",
                    "title" : "AsyncMerge2Sequence.AsyncIterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(by:into:)-2327g",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(by:into:)-86xor",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:)-1ngdw",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:)-2expp",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:into:)-84tx2",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:into:)-96u5w",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/compactmap(_:)-3vx4e",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/compactmap(_:)-7tqjt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/flatmap(_:)-3k0lz",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/flatmap(_:)-xp9x",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> AsyncIterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/map(_:)-3qgeu",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/map(_:)-7yaat",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(_:_:)-41zr",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(_:_:)-57g5v",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(into:_:)-3gfuc",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(into:_:)-4p85w",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence",
            "title" : "AsyncMerge2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/init(_:_:_:)",
                "title" : "init(Base1, Base2, Base3)",
                "type" : "init"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/element",
                "title" : "AsyncMerge3Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/asynciterator\/next()",
                        "title" : "func next() async rethrows -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/asynciterator",
                    "title" : "AsyncMerge3Sequence.AsyncIterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(by:into:)-1kwbc",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(by:into:)-1wlb4",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:)-25lw0",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:)-7vay",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:into:)-6h10e",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:into:)-9fwom",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/compactmap(_:)-2nc3p",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/compactmap(_:)-5waaf",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/flatmap(_:)-2ed3h",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/flatmap(_:)-dme0",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> AsyncIterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/map(_:)-74mg2",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/map(_:)-760yk",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(_:_:)-3a09p",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(_:_:)-712wq",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(into:_:)-3avj3",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(into:_:)-5qc05",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence",
            "title" : "AsyncMerge3Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/iterator",
                "title" : "AsyncRemoveDuplicatesSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/element",
                "title" : "AsyncRemoveDuplicatesSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(by:into:)-49i2k",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(by:into:)-8s17m",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:)-21p7l",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:)-5756w",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:into:)-557pt",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:into:)-7ecfn",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/compactmap(_:)-895qt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/compactmap(_:)-g03a",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/flatmap(_:)-4rdxn",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/flatmap(_:)-5l3m5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/map(_:)-20wy4",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/map(_:)-5xo1b",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(_:_:)-2fufi",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(_:_:)-8ie2k",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(into:_:)-464w5",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(into:_:)-8r98r",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence",
            "title" : "AsyncRemoveDuplicatesSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Reduced?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/iterator",
                "title" : "AsyncThrottleSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunked(by:into:)-2qzww",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunked(by:into:)-4laox",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunks(ofcount:or:)-2i8er",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunks(ofcount:or:)-79m3h",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunks(ofcount:or:into:)-1gzfz",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/chunks(ofcount:or:into:)-9vjlx",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/compactmap(_:)-2pffj",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/compactmap(_:)-5pbxp",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/flatmap(_:)-2pwl0",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/flatmap(_:)-5ormm",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/map(_:)-4bd0b",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/map(_:)-7fugz",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/reductions(_:_:)-2vv8o",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/reductions(_:_:)-79w49",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/reductions(into:_:)-3pk3v",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/reductions(into:_:)-6mees",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/element",
                    "title" : "AsyncThrottleSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrottlesequence",
            "title" : "AsyncThrottleSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async throws -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/iterator",
                "title" : "AsyncThrowingExclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(by:into:)-4lezz",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(by:into:)-5tygy",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:)-2jl5u",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:)-80gdw",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:into:)-kg6v",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:into:)-ped7",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/compactmap(_:)-6u376",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/compactmap(_:)-83j65",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/flatmap(_:)-548yi",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/flatmap(_:)-811m0",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/map(_:)-3wt95",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/map(_:)-7q5on",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(_:_:)-22k1m",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(_:_:)-7se72",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(into:_:)-4tjxp",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(into:_:)-5udzf",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence",
            "title" : "AsyncThrowingExclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async throws -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/iterator",
                "title" : "AsyncThrowingInclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(by:into:)-23zxe",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(by:into:)-2qm85",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:)-10hv7",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:)-8rhtw",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:into:)-8oyst",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:into:)-9ycfm",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/compactmap(_:)-1lzsq",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/compactmap(_:)-6zw2y",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/flatmap(_:)-6t526",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/flatmap(_:)-7cpdo",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/map(_:)-4fu4r",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/map(_:)-9ggzu",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(_:_:)-28cnm",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(_:_:)-93q5c",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(into:_:)-25udw",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(into:_:)-8k410",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/element",
                    "title" : "AsyncThrowingInclusiveReductionsSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence",
            "title" : "AsyncThrowingInclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/iterator\/next()",
                    "title" : "func next() async throws -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/iterator",
                "title" : "AsyncThrowingRemoveDuplicatesSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/element",
                "title" : "AsyncThrowingRemoveDuplicatesSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(by:into:)-2mmen",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(by:into:)-ltul",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:)-2a76d",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:)-35evc",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:into:)-1xssb",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:into:)-7z5ip",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/compactmap(_:)-5xlsh",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/compactmap(_:)-7tejq",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/flatmap(_:)-7oo4i",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/flatmap(_:)-8wrke",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/map(_:)-3st6w",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/map(_:)-5jaa7",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(_:_:)-2b973",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(_:_:)-9hszc",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(into:_:)-49030",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(into:_:)-kljz",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence",
            "title" : "AsyncThrowingRemoveDuplicatesSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/iterator\/next()",
                    "title" : "func next() async -> C.Instant?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/iterator",
                "title" : "AsyncTimerSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/init(interval:tolerance:clock:)",
                "title" : "init(interval: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/element",
                "title" : "AsyncTimerSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/repeating(every:tolerance:)",
                "title" : "static func repeating(every: Duration, tolerance: Duration?) -> AsyncTimerSequence<SuspendingClock>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/repeating(every:tolerance:clock:)",
                "title" : "static func repeating(every: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncTimerSequence<C>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(by:into:)-4wv00",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(by:into:)-5o9w3",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:)-4rmp2",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:)-4sfex",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:into:)-5j7np",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:into:)-95ot5",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/compactmap(_:)-2ybse",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/compactmap(_:)-6fdqt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/flatmap(_:)-5f7pc",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/flatmap(_:)-5i000",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/map(_:)-5dnxh",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/map(_:)-871hb",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(_:_:)-31r18",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(_:_:)-6cgze",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(into:_:)-6fpo9",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(into:_:)-9tk2s",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynctimersequence",
            "title" : "AsyncTimerSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/iterator",
                "title" : "AsyncZip2Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/asynciterator",
                "title" : "AsyncZip2Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/element",
                "title" : "AsyncZip2Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(by:into:)-43vv3",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(by:into:)-53c8k",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:)-4pz3k",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:)-m01g",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:into:)-7mu8k",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:into:)-7tl8v",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/compactmap(_:)-8bxhi",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/compactmap(_:)-9258f",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/flatmap(_:)-7fatu",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/flatmap(_:)-9e7uy",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/map(_:)-19yvg",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/map(_:)-1ho08",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(_:_:)-6n8t3",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(_:_:)-6qx6h",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(into:_:)-5l5yj",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(into:_:)-8tk71",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence",
            "title" : "AsyncZip2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/iterator",
                "title" : "AsyncZip3Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/asynciterator",
                "title" : "AsyncZip3Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/element",
                "title" : "AsyncZip3Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/buffer(_:)",
                    "title" : "func buffer<Buffer>(() -> Buffer) -> AsyncBufferSequence<Self, Buffer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncLimitBuffer<Element>.Policy) -> AsyncBufferSequence<Self, AsyncLimitBuffer<Element>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(by:into:)-6bx6n",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(by:into:)-8y3yt",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:)-4nqfs",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:)-8pbyi",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:into:)-1pnho",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:into:)-6vob6",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/compactmap(_:)-493ac",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/compactmap(_:)-71k3f",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/flatmap(_:)-4uy4f",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/flatmap(_:)-5nsoo",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/interspersed(with:)",
                    "title" : "func interspersed(with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/map(_:)-2s1gx",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/map(_:)-8hezx",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(_:_:)-413xh",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(_:_:)-5cvl6",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(into:_:)-441ju",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(into:_:)-5n5ya",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence",
            "title" : "AsyncZip3Sequence",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/chain(_:_:)",
            "title" : "func chain<Base1, Base2>(Base1, Base2) -> AsyncChain2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/chain(_:_:_:)",
            "title" : "func chain<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncChain3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/combinelatest(_:_:)",
            "title" : "func combineLatest<Base1, Base2>(Base1, Base2) -> AsyncCombineLatest2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/combinelatest(_:_:_:)",
            "title" : "func combineLatest<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncCombineLatest3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/merge(_:_:)",
            "title" : "func merge<Base1, Base2>(Base1, Base2) -> AsyncMerge2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/merge(_:_:_:)",
            "title" : "func merge<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncMerge3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/zip(_:_:)",
            "title" : "func zip<Base1, Base2>(Base1, Base2) -> AsyncZip2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/zip(_:_:_:)",
            "title" : "func zip<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncZip3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          }
        ],
        "path" : "\/documentation\/asyncalgorithms",
        "title" : "AsyncAlgorithms",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/init(store:)",
                "title" : "init(store: OCKStore)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/checkabilitytodelete(outcomes:)",
                "title" : "func checkAbilityToDelete(outcomes: [OCKHealthKitOutcome]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(for:)",
                "title" : "func fetchTasks(for: [OCKHealthKitOutcome]) throws -> [OCKHealthKitTask]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/requesthealthkitpermissionsforalltasksinstore(completion:)",
                "title" : "func requestHealthKitPermissionsForAllTasksInStore(completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/outcome",
                "title" : "OCKHealthKitPassthroughStore.Outcome",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/task",
                "title" : "OCKHealthKitPassthroughStore.Task",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/anyevents(matching:)",
                    "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevents(query:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevents(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/anyoutcomes(matching:)",
                    "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/anytasks(matching:)",
                    "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcome(_:)",
                    "title" : "func addOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcome(_:callbackqueue:completion:)",
                    "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcomes(_:)",
                    "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcome(_:)",
                    "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcomes(_:)",
                    "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcome(_:)",
                    "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcomes(_:)",
                    "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockoutcomestore-implementations",
                "title" : "OCKOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/events(matching:)-17oib",
                    "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<OCKEvent<Task, Outcome>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/events(matching:)-24nnc",
                    "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<Event>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevent(fortask:occurrence:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchEvent(forTask: Self.Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(query:)",
                    "title" : "func fetchEvents(query: OCKEventQuery) async throws -> [Event]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(query:callbackqueue:completion:)-1wsj3",
                    "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Event]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(query:callbackqueue:completion:)-5nb3u",
                    "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadonlyeventstore-implementations",
                "title" : "OCKReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcome(query:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcomes(query:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[Outcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/outcomes(matching:)",
                    "title" : "func outcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKHealthKitOutcome>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadableoutcomestore-implementations",
                "title" : "OCKReadableOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtask(withid:)",
                    "title" : "func fetchTask(withID: String) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtask(withid:callbackqueue:completion:)",
                    "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(query:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(query:callbackqueue:completion:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKHealthKitTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/tasks(matching:)",
                    "title" : "func tasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKHealthKitTask>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadabletaskstore-implementations",
                "title" : "OCKReadableTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtask(_:)",
                    "title" : "func addTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtask(_:callbackqueue:completion:)",
                    "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtasks(_:)",
                    "title" : "func addTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtasks(_:callbackqueue:completion:)",
                    "title" : "func addTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetask(_:)",
                    "title" : "func deleteTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetask(_:callbackqueue:completion:)",
                    "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetasks(_:)",
                    "title" : "func deleteTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetasks(_:callbackqueue:completion:)",
                    "title" : "func deleteTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetask(_:)",
                    "title" : "func updateTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetask(_:callbackqueue:completion:)",
                    "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetasks(_:)",
                    "title" : "func updateTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetasks(_:callbackqueue:completion:)",
                    "title" : "func updateTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ocktaskstore-implementations",
                "title" : "OCKTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore",
            "title" : "OCKHealthKitPassthroughStore",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpostaladdress",
            "title" : "OCKPostalAddress",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/==(_:_:)",
                "title" : "static func == (OCKStore, OCKStore) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/init(name:securityapplicationgroupidentifier:type:remote:)",
                "title" : "init(name: String, securityApplicationGroupIdentifier: String?, type: OCKCoreDataStoreType, remote: OCKRemoteSynchronizable?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/name",
                "title" : "let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/securityapplicationgroupidentifier",
                "title" : "let securityApplicationGroupIdentifier: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/delete()",
                "title" : "func delete() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/synchronize(completion:)",
                "title" : "func synchronize(completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplan(_:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplan(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplans(_:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplans(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplan(_:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplans(_:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplan(_:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplan(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplans(_:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplans(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanycareplanstore-implementations",
                "title" : "OCKAnyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontact(_:)",
                    "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontact(_:callbackqueue:completion:)",
                    "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontacts(_:)",
                    "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontacts(_:callbackqueue:completion:)",
                    "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontact(_:)",
                    "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontact(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontacts(_:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontact(_:)",
                    "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontact(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontacts(_:)",
                    "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontacts(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanycontactstore-implementations",
                "title" : "OCKAnyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatient(_:)",
                    "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatient(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatients(_:)",
                    "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatients(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatient(_:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatient(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatients(_:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatients(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatient(_:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatient(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatients(_:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatients(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanypatientstore-implementations",
                "title" : "OCKAnyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anycareplans(matching:)",
                    "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplan(withid:)",
                    "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplans(query:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlycareplanstore-implementations",
                "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anycontacts(matching:)",
                    "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontact(withid:)",
                    "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontacts(query:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlycontactstore-implementations",
                "title" : "OCKAnyReadOnlyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anyevents(matching:)",
                    "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevents(query:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevents(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anyoutcomes(matching:)",
                    "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anypatients(matching:)",
                    "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatient(withid:)",
                    "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatients(query:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatients(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlypatientstore-implementations",
                "title" : "OCKAnyReadOnlyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anytasks(matching:)",
                    "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplan(_:)",
                    "title" : "func addCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplan(_:callbackqueue:completion:)",
                    "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplans(_:)",
                    "title" : "func addCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplans(_:callbackqueue:completion:)",
                    "title" : "func addCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplan(_:)",
                    "title" : "func deleteCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplans(_:)",
                    "title" : "func deleteCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplan(_:)",
                    "title" : "func updateCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplan(_:callbackqueue:completion:)",
                    "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplans(_:)",
                    "title" : "func updateCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplans(_:callbackqueue:completion:)",
                    "title" : "func updateCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockcareplanstore-implementations",
                "title" : "OCKCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontact(_:)",
                    "title" : "func addContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontact(_:callbackqueue:completion:)",
                    "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontacts(_:)",
                    "title" : "func addContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontacts(_:callbackqueue:completion:)",
                    "title" : "func addContacts([OCKContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontact(_:)",
                    "title" : "func deleteContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontact(_:callbackqueue:completion:)",
                    "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontacts(_:)",
                    "title" : "func deleteContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteContacts([OCKContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontact(_:)",
                    "title" : "func updateContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontact(_:callbackqueue:completion:)",
                    "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontacts(_:)",
                    "title" : "func updateContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontacts(_:callbackqueue:completion:)",
                    "title" : "func updateContacts([OCKContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKContact]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockcontactstore-implementations",
                "title" : "OCKContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcome(_:)",
                    "title" : "func addOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcome(_:callbackqueue:completion:)",
                    "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcomes(_:)",
                    "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcome(_:)",
                    "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcomes(_:)",
                    "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcome(_:)",
                    "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcomes(_:)",
                    "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockoutcomestore-implementations",
                "title" : "OCKOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatient(_:)",
                    "title" : "func addPatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatient(_:callbackqueue:completion:)",
                    "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatients(_:)",
                    "title" : "func addPatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatients(_:callbackqueue:completion:)",
                    "title" : "func addPatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatient(_:)",
                    "title" : "func deletePatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatient(_:callbackqueue:completion:)",
                    "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatients(_:)",
                    "title" : "func deletePatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatients(_:callbackqueue:completion:)",
                    "title" : "func deletePatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatient(_:)",
                    "title" : "func updatePatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatient(_:callbackqueue:completion:)",
                    "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatients(_:)",
                    "title" : "func updatePatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatients(_:callbackqueue:completion:)",
                    "title" : "func updatePatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockpatientstore-implementations",
                "title" : "OCKPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/events(matching:)",
                    "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<Event>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevent(fortask:occurrence:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchEvent(forTask: Self.Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevents(query:)",
                    "title" : "func fetchEvents(query: OCKEventQuery) async throws -> [Event]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevents(query:callbackqueue:completion:)",
                    "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadonlyeventstore-implementations",
                "title" : "OCKReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/careplans(matching:)",
                    "title" : "func carePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKCarePlan>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplan(withid:)",
                    "title" : "func fetchCarePlan(withID: String) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplans(query:)",
                    "title" : "func fetchCarePlans(query: OCKCarePlanQuery) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKCarePlan], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablecareplanstore-implementations",
                "title" : "OCKReadableCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/contacts(matching:)",
                    "title" : "func contacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKContact>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontact(withid:)",
                    "title" : "func fetchContact(withID: String) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontacts(query:)",
                    "title" : "func fetchContacts(query: OCKContactQuery) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKContact], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablecontactstore-implementations",
                "title" : "OCKReadableContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcome(query:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcomes(query:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKOutcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/outcomes(matching:)",
                    "title" : "func outcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKOutcome>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadableoutcomestore-implementations",
                "title" : "OCKReadableOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatient(withid:)",
                    "title" : "func fetchPatient(withID: String) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatients(query:)",
                    "title" : "func fetchPatients(query: OCKPatientQuery) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatients(query:callbackqueue:completion:)",
                    "title" : "func fetchPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKPatient], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/patients(matching:)",
                    "title" : "func patients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKPatient>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablepatientstore-implementations",
                "title" : "OCKReadablePatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtask(withid:)",
                    "title" : "func fetchTask(withID: String) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtask(withid:callbackqueue:completion:)",
                    "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtasks(query:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtasks(query:callbackqueue:completion:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/tasks(matching:)",
                    "title" : "func tasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKTask>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadabletaskstore-implementations",
                "title" : "OCKReadableTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/didrequestsynchronization(_:)",
                    "title" : "func didRequestSynchronization(OCKRemoteSynchronizable)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/remote(_:didupdateprogress:)",
                    "title" : "func remote(OCKRemoteSynchronizable, didUpdateProgress: Double)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockremotesynchronizationdelegate-implementations",
                "title" : "OCKRemoteSynchronizationDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtask(_:)",
                    "title" : "func addTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtask(_:callbackqueue:completion:)",
                    "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtasks(_:)",
                    "title" : "func addTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtasks(_:callbackqueue:completion:)",
                    "title" : "func addTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetask(_:)",
                    "title" : "func deleteTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetask(_:callbackqueue:completion:)",
                    "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetasks(_:)",
                    "title" : "func deleteTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetasks(_:callbackqueue:completion:)",
                    "title" : "func deleteTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetask(_:)",
                    "title" : "func updateTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetask(_:callbackqueue:completion:)",
                    "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetasks(_:)",
                    "title" : "func updateTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetasks(_:callbackqueue:completion:)",
                    "title" : "func updateTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ocktaskstore-implementations",
                "title" : "OCKTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstore",
            "title" : "OCKStore",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(contactstore:)",
                "title" : "func attach(contactStore: OCKAnyContactStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(eventstore:)",
                "title" : "func attach(eventStore: OCKAnyEventStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(patientstore:)",
                "title" : "func attach(patientStore: OCKAnyPatientStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(planstore:)",
                "title" : "func attach(planStore: OCKAnyCarePlanStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(store:)",
                "title" : "func attach(store: OCKAnyStoreProtocol)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(careplanstore:)",
                "title" : "func attachReadOnly(carePlanStore: OCKAnyReadOnlyCarePlanStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(contactstore:)",
                "title" : "func attachReadOnly(contactStore: OCKAnyReadOnlyContactStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(eventstore:)",
                "title" : "func attachReadOnly(eventStore: OCKAnyReadOnlyEventStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(patientstore:)",
                "title" : "func attachReadOnly(patientStore: OCKAnyReadOnlyPatientStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:shouldhandlequery:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, shouldHandleQuery: OCKCarePlanQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:shouldhandlewritingcareplan:)",
                "title" : "func carePlanStore(OCKAnyCarePlanStore, shouldHandleWritingCarePlan: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:shouldhandlequery:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, shouldHandleQuery: OCKContactQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:shouldhandlewritingcontact:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, shouldHandleWritingContact: OCKAnyContact) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:shouldhandlequery:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, shouldHandleQuery: OCKOutcomeQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:shouldhandlewritingoutcome:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, shouldHandleWritingOutcome: OCKAnyOutcome) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:shouldhandlequery:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, shouldHandleQuery: OCKPatientQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:shouldhandlewritingpatient:)",
                "title" : "func patientStore(OCKAnyPatientStore, shouldHandleWritingPatient: OCKAnyPatient) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:shouldhandlequery:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, shouldHandleQuery: OCKTaskQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:shouldhandlewritingtask:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, shouldHandleWritingTask: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplan(_:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplan(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplans(_:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplans(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplan(_:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplans(_:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplan(_:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplan(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplans(_:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplans(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanycareplanstore-implementations",
                "title" : "OCKAnyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontact(_:)",
                    "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontact(_:callbackqueue:completion:)",
                    "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontacts(_:)",
                    "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontacts(_:callbackqueue:completion:)",
                    "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontact(_:)",
                    "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontact(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontacts(_:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontact(_:)",
                    "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontact(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontacts(_:)",
                    "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontacts(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanycontactstore-implementations",
                "title" : "OCKAnyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatient(_:)",
                    "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatient(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatients(_:)",
                    "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatients(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatient(_:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatient(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatients(_:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatients(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatient(_:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatient(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatients(_:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatients(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanypatientstore-implementations",
                "title" : "OCKAnyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anycareplans(matching:)",
                    "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplan(withid:)",
                    "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplans(query:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlycareplanstore-implementations",
                "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anycontacts(matching:)",
                    "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontact(withid:)",
                    "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontacts(query:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyContact], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlycontactstore-implementations",
                "title" : "OCKAnyReadOnlyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anyevents(matching:)",
                    "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevents(query:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevents(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anyoutcomes(matching:)",
                    "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyOutcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anypatients(matching:)",
                    "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatient(withid:)",
                    "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatients(query:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatients(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlypatientstore-implementations",
                "title" : "OCKAnyReadOnlyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anytasks(matching:)",
                    "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstorecoordinator",
            "title" : "OCKStoreCoordinator",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/automaticallysynchronizes",
                "title" : "var automaticallySynchronizes: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/delegate",
                "title" : "var delegate: OCKRemoteSynchronizationDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/pullrevisions(since:mergerevision:completion:)",
                "title" : "func pullRevisions(since: OCKRevisionRecord.KnowledgeVector, mergeRevision: (OCKRevisionRecord) -> Void, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/pushrevisions(devicerevisions:deviceknowledge:completion:)",
                "title" : "func pushRevisions(deviceRevisions: [OCKRevisionRecord], deviceKnowledge: OCKRevisionRecord.KnowledgeVector, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/reply(to:store:sendreply:)",
                "title" : "func reply(to: [String : Any], store: OCKStore, sendReply: (_ message: [String : Any]) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer",
            "title" : "OCKWatchConnectivityPeer",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogress\/fractioncompleted",
                "title" : "var fractionCompleted: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogress\/iscompleted",
                "title" : "var isCompleted: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/caretaskprogress",
            "title" : "CareTaskProgress",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyPatient) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycareplan",
            "title" : "OCKAnyCarePlan",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:)",
                "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:callbackqueue:completion:)-3zehz",
                        "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:callbackqueue:completion:)-22ln2",
                "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplans(_:)",
                "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addanycareplans(_:callbackqueue:completion:)",
                        "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplans(_:callbackqueue:completion:)",
                "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:)",
                "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:callbackqueue:completion:)-5p51",
                        "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:callbackqueue:completion:)-2eqy7",
                "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplans(_:)",
                "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deleteanycareplans(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplans(_:callbackqueue:completion:)",
                "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:)",
                "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:callbackqueue:completion:)-3ctf",
                        "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:callbackqueue:completion:)-16z29",
                "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplans(_:)",
                "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updateanycareplans(_:callbackqueue:completion:)",
                        "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplans(_:callbackqueue:completion:)",
                "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycareplanstore",
            "title" : "OCKAnyCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/address",
                "title" : "var address: OCKPostalAddress?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/category",
                "title" : "var category: OCKContactCategory?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/emailaddresses",
                "title" : "var emailAddresses: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/messagingnumbers",
                "title" : "var messagingNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/organization",
                "title" : "var organization: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/othercontactinfo",
                "title" : "var otherContactInfo: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/phonenumbers",
                "title" : "var phoneNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/role",
                "title" : "var role: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/isequal(to:)",
                "title" : "func isEqual(to: OCKAnyContact) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycontact",
            "title" : "OCKAnyContact",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:)",
                "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:callbackqueue:completion:)-1czln",
                        "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:callbackqueue:completion:)-1ynz9",
                "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontacts(_:)",
                "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/addanycontacts(_:callbackqueue:completion:)",
                        "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontacts(_:callbackqueue:completion:)",
                "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:)",
                "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:callbackqueue:completion:)-5unnv",
                        "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:callbackqueue:completion:)-5xl3x",
                "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontacts(_:)",
                "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/deleteanycontacts(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontacts(_:callbackqueue:completion:)",
                "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:)",
                "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:callbackqueue:completion:)-7hfp",
                        "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:callbackqueue:completion:)-2aaxo",
                "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontacts(_:)",
                "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/updateanycontacts(_:callbackqueue:completion:)",
                        "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontacts(_:callbackqueue:completion:)",
                "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycontactstore",
            "title" : "OCKAnyContactStore",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockanyeventstore",
            "title" : "OCKAnyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyoutcome",
            "title" : "OCKAnyOutcome",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:)",
                "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:callbackqueue:completion:)-1dvp7",
                        "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:callbackqueue:completion:)-8fewj",
                "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcomes(_:)",
                "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addanyoutcomes(_:callbackqueue:completion:)",
                        "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcomes(_:callbackqueue:completion:)",
                "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:)",
                "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:callbackqueue:completion:)-4ab2n",
                        "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:callbackqueue:completion:)-7z9j9",
                "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcomes(_:)",
                "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:)",
                "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:callbackqueue:completion:)-8cd7b",
                        "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:callbackqueue:completion:)-6m13u",
                "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcomes(_:)",
                "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateanyoutcomes(_:callbackqueue:completion:)",
                        "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcomes(_:callbackqueue:completion:)",
                "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyoutcomestore",
            "title" : "OCKAnyOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/allergies",
                "title" : "var allergies: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/birthday",
                "title" : "var birthday: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/sex",
                "title" : "var sex: OCKBiologicalSex?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanypatient",
            "title" : "OCKAnyPatient",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:)",
                "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:callbackqueue:completion:)-2br3j",
                        "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:callbackqueue:completion:)-6ps1z",
                "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatients(_:)",
                "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/addanypatients(_:callbackqueue:completion:)",
                        "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatients(_:callbackqueue:completion:)",
                "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:)",
                "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:callbackqueue:completion:)-53a1q",
                        "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:callbackqueue:completion:)-567nr",
                "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatients(_:)",
                "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/deleteanypatients(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatients(_:callbackqueue:completion:)",
                "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:)",
                "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:callbackqueue:completion:)-6cgn3",
                        "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:callbackqueue:completion:)-73rnk",
                "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatients(_:)",
                "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/updateanypatients(_:callbackqueue:completion:)",
                        "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatients(_:callbackqueue:completion:)",
                "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanypatientstore",
            "title" : "OCKAnyPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/anycareplans(matching:)",
                        "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/anycareplans(matching:)",
                "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:)",
                "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:callbackqueue:completion:)-2g29x",
                        "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:callbackqueue:completion:)-v9kd",
                "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplans(query:)",
                "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchanycareplans(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplans(query:callbackqueue:completion:)",
                "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore",
            "title" : "OCKAnyReadOnlyCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/anycontacts(matching:)",
                        "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/anycontacts(matching:)",
                "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:)",
                "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:callbackqueue:completion:)-5glpj",
                        "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:callbackqueue:completion:)-iivk",
                "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontacts(query:)",
                "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchanycontacts(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontacts(query:callbackqueue:completion:)",
                "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore",
            "title" : "OCKAnyReadOnlyContactStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/anyevents(matching:)",
                        "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/anyevents(matching:)",
                "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:)",
                "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:callbackqueue:completion:)-6s3hf",
                        "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:callbackqueue:completion:)-71pef",
                "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevent(fortask:occurrence:)",
                "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                        "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevents(query:)",
                "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchanyevents(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevents(query:callbackqueue:completion:)",
                "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore",
            "title" : "OCKAnyReadOnlyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/anyoutcomes(matching:)",
                        "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/anyoutcomes(matching:)",
                "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:)",
                "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:callbackqueue:completion:)-7v674",
                        "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:callbackqueue:completion:)-17jly",
                "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcomes(query:)",
                "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore",
            "title" : "OCKAnyReadOnlyOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/anypatients(matching:)",
                        "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadablePatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/anypatients(matching:)",
                "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:)",
                "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:callbackqueue:completion:)-30a0e",
                        "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:callbackqueue:completion:)-4hg58",
                "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatients(query:)",
                "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchanypatients(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadablePatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatients(query:callbackqueue:completion:)",
                "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore",
            "title" : "OCKAnyReadOnlyPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/anytasks(matching:)",
                        "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/anytasks(matching:)",
                "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:)",
                "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:callbackqueue:completion:)-6gxsy",
                        "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:callbackqueue:completion:)-60dim",
                "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: (Result<OCKAnyTask, OCKStoreError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytasks(query:)",
                "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchanytasks(query:callbackqueue:completion:)",
                        "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytasks(query:callbackqueue:completion:)",
                "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore",
            "title" : "OCKAnyReadOnlyTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyresettablestore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyresettablestore",
            "title" : "OCKAnyResettableStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanytask",
            "title" : "OCKAnyTask",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:)",
                "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:callbackqueue:completion:)-1xk92",
                        "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:callbackqueue:completion:)-37cfz",
                "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytasks(_:)",
                "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/addanytasks(_:callbackqueue:completion:)",
                        "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytasks(_:callbackqueue:completion:)",
                "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:)",
                "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:callbackqueue:completion:)-2gxka",
                        "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:callbackqueue:completion:)-6i5s0",
                "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytasks(_:)",
                "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/deleteanytasks(_:callbackqueue:completion:)",
                        "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytasks(_:callbackqueue:completion:)",
                "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:)",
                "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:callbackqueue:completion:)-6tcpx",
                        "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:callbackqueue:completion:)-2uvf7",
                "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytasks(_:)",
                "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/updateanytasks(_:callbackqueue:completion:)",
                        "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytasks(_:callbackqueue:completion:)",
                "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanytaskstore",
            "title" : "OCKAnyTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyversionabletask",
            "title" : "OCKAnyVersionableTask",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:)",
                "title" : "func addCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:callbackqueue:completion:)-9x7bz",
                        "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:callbackqueue:completion:)-83d6",
                "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplans(_:)",
                "title" : "func addCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplans(_:callbackqueue:completion:)",
                "title" : "func addCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:)",
                "title" : "func deleteCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:callbackqueue:completion:)-8xh5w",
                        "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:callbackqueue:completion:)-2qmea",
                "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplans(_:)",
                "title" : "func deleteCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplans(_:callbackqueue:completion:)",
                "title" : "func deleteCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:)",
                "title" : "func updateCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:callbackqueue:completion:)-3i8lp",
                        "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:callbackqueue:completion:)-8zwct",
                "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplans(_:)",
                "title" : "func updateCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplans(_:callbackqueue:completion:)",
                "title" : "func updateCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplanstore",
            "title" : "OCKCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:)",
                "title" : "func addContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:callbackqueue:completion:)-34lme",
                        "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:callbackqueue:completion:)-4ol1p",
                "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontacts(_:)",
                "title" : "func addContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontacts(_:callbackqueue:completion:)",
                "title" : "func addContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:)",
                "title" : "func deleteContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:callbackqueue:completion:)-v7hh",
                        "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:callbackqueue:completion:)-1m7m5",
                "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontacts(_:)",
                "title" : "func deleteContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontacts(_:callbackqueue:completion:)",
                "title" : "func deleteContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:)",
                "title" : "func updateContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:callbackqueue:completion:)-1bfxe",
                        "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:callbackqueue:completion:)-4pk6a",
                "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontacts(_:)",
                "title" : "func updateContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontacts(_:callbackqueue:completion:)",
                "title" : "func updateContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactstore",
            "title" : "OCKContactStore",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockeventstore",
            "title" : "OCKEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:)",
                "title" : "func addOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:callbackqueue:completion:)-sy1c",
                        "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:callbackqueue:completion:)-2ul82",
                "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcomes(_:)",
                "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcomes(_:callbackqueue:completion:)",
                "title" : "func addOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:)",
                "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:callbackqueue:completion:)-5zw45",
                        "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:callbackqueue:completion:)-8tvje",
                "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcomes(_:)",
                "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcomes(_:callbackqueue:completion:)",
                "title" : "func deleteOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:)",
                "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:callbackqueue:completion:)-437j2",
                        "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:callbackqueue:completion:)-1uub8",
                "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcomes(_:)",
                "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcomes(_:callbackqueue:completion:)",
                "title" : "func updateOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomestore",
            "title" : "OCKOutcomeStore",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockoutcomevalueunderlyingtype",
            "title" : "OCKOutcomeValueUnderlyingType",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:)",
                "title" : "func addPatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:callbackqueue:completion:)-25zds",
                        "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:callbackqueue:completion:)-6aoyv",
                "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatients(_:)",
                "title" : "func addPatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatients(_:callbackqueue:completion:)",
                "title" : "func addPatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:)",
                "title" : "func deletePatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:callbackqueue:completion:)-7fglq",
                        "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:callbackqueue:completion:)-1zba2",
                "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatients(_:)",
                "title" : "func deletePatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatients(_:callbackqueue:completion:)",
                "title" : "func deletePatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:)",
                "title" : "func updatePatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:callbackqueue:completion:)-194d",
                        "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:callbackqueue:completion:)-pln1",
                "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatients(_:)",
                "title" : "func updatePatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatients(_:callbackqueue:completion:)",
                "title" : "func updatePatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatientstore",
            "title" : "OCKPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/events",
                "title" : "Events",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/events(matching:)-5nis3",
                        "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<Event>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/events(matching:)-spn",
                "title" : "func events(matching: OCKEventQuery) -> Events",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:)",
                "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)-45rkb",
                        "title" : "func fetchEvent(forTask: Self.Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)-4v8pa",
                "title" : "func fetchEvent(forTask: Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(query:)",
                "title" : "func fetchEvents(query: OCKEventQuery) async throws -> [Event]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(query:callbackqueue:completion:)-6pfk7",
                        "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(query:callbackqueue:completion:)-x40u",
                "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Event]>)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/event",
                "title" : "OCKReadOnlyEventStore.Event",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore",
            "title" : "OCKReadOnlyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/plan",
                "title" : "Plan",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/plans",
                "title" : "Plans",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/careplans(matching:)",
                "title" : "func carePlans(matching: OCKCarePlanQuery) -> Plans",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:)",
                "title" : "func fetchCarePlan(withID: String) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:callbackqueue:completion:)-63r0",
                        "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:callbackqueue:completion:)-3an8l",
                "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplans(query:)",
                "title" : "func fetchCarePlans(query: OCKCarePlanQuery) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplans(query:callbackqueue:completion:)",
                "title" : "func fetchCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore",
            "title" : "OCKReadableCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/contact",
                "title" : "Contact",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/contacts",
                "title" : "Contacts",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/contacts(matching:)",
                "title" : "func contacts(matching: OCKContactQuery) -> Contacts",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:)",
                "title" : "func fetchContact(withID: String) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:callbackqueue:completion:)-1leam",
                        "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:callbackqueue:completion:)-4pfxk",
                "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontacts(query:)",
                "title" : "func fetchContacts(query: OCKContactQuery) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontacts(query:callbackqueue:completion:)",
                "title" : "func fetchContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablecontactstore",
            "title" : "OCKReadableContactStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/outcome",
                "title" : "Outcome",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/outcomes",
                "title" : "Outcomes",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:)",
                "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:callbackqueue:completion:)-2dhk6",
                        "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:callbackqueue:completion:)-3kfq8",
                "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcomes(query:)",
                "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcomes(query:callbackqueue:completion:)",
                "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/outcomes(matching:)",
                "title" : "func outcomes(matching: OCKOutcomeQuery) -> Outcomes",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore",
            "title" : "OCKReadableOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/patient",
                "title" : "Patient",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/patients",
                "title" : "Patients",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:)",
                "title" : "func fetchPatient(withID: String) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:callbackqueue:completion:)-2vufs",
                        "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadablePatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:callbackqueue:completion:)-2k7xi",
                "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatients(query:)",
                "title" : "func fetchPatients(query: OCKPatientQuery) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatients(query:callbackqueue:completion:)",
                "title" : "func fetchPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/patients(matching:)",
                "title" : "func patients(matching: OCKPatientQuery) -> Patients",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablepatientstore",
            "title" : "OCKReadablePatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/task",
                "title" : "Task",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/tasks",
                "title" : "Tasks",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:)",
                "title" : "func fetchTask(withID: String) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:callbackqueue:completion:)-89geb",
                        "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:callbackqueue:completion:)-5wyob",
                "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtasks(query:)",
                "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtasks(query:callbackqueue:completion:)",
                "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/tasks(matching:)",
                "title" : "func tasks(matching: OCKTaskQuery) -> Tasks",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadabletaskstore",
            "title" : "OCKReadableTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/automaticallysynchronizes",
                "title" : "var automaticallySynchronizes: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/delegate",
                "title" : "var delegate: OCKRemoteSynchronizationDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/pullrevisions(since:mergerevision:completion:)",
                "title" : "func pullRevisions(since: OCKRevisionRecord.KnowledgeVector, mergeRevision: (OCKRevisionRecord) -> Void, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/pushrevisions(devicerevisions:deviceknowledge:completion:)",
                "title" : "func pushRevisions(deviceRevisions: [OCKRevisionRecord], deviceKnowledge: OCKRevisionRecord.KnowledgeVector, completion: (Error?) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockremotesynchronizable",
            "title" : "OCKRemoteSynchronizable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate\/didrequestsynchronization(_:)",
                "title" : "func didRequestSynchronization(OCKRemoteSynchronizable)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate\/remote(_:didupdateprogress:)",
                "title" : "func remote(OCKRemoteSynchronizable, didUpdateProgress: Double)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate",
            "title" : "OCKRemoteSynchronizationDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:)",
                "title" : "func addTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:callbackqueue:completion:)-9qer7",
                        "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:callbackqueue:completion:)-hgtj",
                "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtasks(_:)",
                "title" : "func addTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtasks(_:callbackqueue:completion:)",
                "title" : "func addTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:)",
                "title" : "func deleteTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:callbackqueue:completion:)-1r1pf",
                        "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:callbackqueue:completion:)-135nm",
                "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetasks(_:)",
                "title" : "func deleteTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetasks(_:callbackqueue:completion:)",
                "title" : "func deleteTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:)",
                "title" : "func updateTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:callbackqueue:completion:)-s4q9",
                        "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:callbackqueue:completion:)-8xfom",
                "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetasks(_:)",
                "title" : "func updateTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetasks(_:callbackqueue:completion:)",
                "title" : "func updateTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktaskstore",
            "title" : "OCKTaskStore",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/init(combining:)",
                "title" : "init(combining: [CareTaskProgress])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/init(events:by:)",
                "title" : "init<Progress>(events: [OCKAnyEvent], by: CareTaskProgressStrategy<Progress>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/fractioncompleted",
                "title" : "let fractionCompleted: Double",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/iscompleted",
                    "title" : "var isCompleted: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/caretaskprogress-implementations",
                "title" : "CareTaskProgress Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress",
            "title" : "AggregatedCareTaskProgress",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/fractioncompleted",
                "title" : "var fractionCompleted: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/iscompleted-2ce3j",
                "title" : "var isCompleted: Bool",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/iscompleted-7nqwq",
                    "title" : "var isCompleted: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/caretaskprogress-implementations",
                "title" : "CareTaskProgress Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/binarycaretaskprogress",
            "title" : "BinaryCareTaskProgress",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> CareStoreQueryResults<Result>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/next()",
                "title" : "func next() async throws -> Element?",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/element",
                "title" : "CareStoreQueryResults.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(by:)",
                    "title" : "func chunked(by: (Self.Element, Self.Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Self.Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(by:into:)-2coro",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(by:into:)-7jb7o",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Self.Element, Self.Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Self.Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Self.Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Self.Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Self.Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:)-1o4f5",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Self.Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:)-778x6",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Self.Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:into:)-4mz5s",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:into:)-4nih4",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/compactmap(_:)-6r0en",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/compactmap(_:)-6tp8p",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/flatmap(_:)-4hy5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/flatmap(_:)-6zdmg",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/interspersed(with:)",
                    "title" : "func interspersed(with: Self.Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/map(_:)-1vw2a",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/map(_:)-qvoo",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(_:)",
                    "title" : "func reductions((Self.Element, Self.Element) async -> Self.Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(_:_:)-6fjt1",
                    "title" : "func reductions<Result>(Result, (Result, Self.Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(_:_:)-9aq8y",
                    "title" : "func reductions<Result>(Result, (Result, Self.Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(into:_:)-5g3f2",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Self.Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(into:_:)-6alvo",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Self.Element, Self.Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/throttle(for:clock:latest:)",
                    "title" : "func throttle<C>(for: C.Instant.Duration, clock: C, latest: Bool) -> AsyncThrottleSequence<Self, C, Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/throttle(for:clock:reducing:)",
                    "title" : "func throttle<C, Reduced>(for: C.Instant.Duration, clock: C, reducing: (Reduced?, Self.Element) async -> Reduced) -> AsyncThrottleSequence<Self, C, Reduced>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/throttle(for:latest:)",
                    "title" : "func throttle(for: Duration, latest: Bool) -> AsyncThrottleSequence<Self, ContinuousClock, Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/throttle(for:reducing:)",
                    "title" : "func throttle<Reduced>(for: Duration, reducing: (Reduced?, Self.Element) async -> Reduced) -> AsyncThrottleSequence<Self, ContinuousClock, Reduced>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/carestorequeryresults",
            "title" : "CareStoreQueryResults",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/init(computeprogress:)",
                "title" : "init(computeProgress: (OCKAnyEvent) -> Progress)",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/checkingoutcomeexists",
                "title" : "static var checkingOutcomeExists: CareTaskProgressStrategy<BinaryCareTaskProgress>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/summingoutcomevalues",
                "title" : "static var summingOutcomeValues: CareTaskProgressStrategy<LinearCareTaskProgress>",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy",
            "title" : "CareTaskProgressStrategy",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/fractioncompleted",
                "title" : "var fractionCompleted: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/goal",
                "title" : "var goal: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/value",
                "title" : "var value: Double",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/iscompleted",
                    "title" : "var isCompleted: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/caretaskprogress-implementations",
                "title" : "CareTaskProgress Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/linearcaretaskprogress",
            "title" : "LinearCareTaskProgress",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/init(taskids:dateinterval:aggregator:)",
                "title" : "init(taskIDs: [String], dateInterval: DateInterval, aggregator: OCKAdherenceAggregator)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/init(taskids:dateinterval:computeprogress:)",
                "title" : "init(taskIDs: [String], dateInterval: DateInterval, computeProgress: (OCKAnyEvent) -> CareTaskProgress)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherencequery",
            "title" : "OCKAdherenceQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/init(task:outcome:scheduleevent:)",
                "title" : "init(task: OCKAnyTask, outcome: OCKAnyOutcome?, scheduleEvent: OCKScheduleEvent)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcome",
                "title" : "let outcome: OCKAnyOutcome?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/scheduleevent",
                "title" : "let scheduleEvent: OCKScheduleEvent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/task",
                "title" : "let task: OCKAnyTask",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/computeprogress(by:)",
                "title" : "func computeProgress<Progress>(by: CareTaskProgressStrategy<Progress>) -> Progress",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyevent",
            "title" : "OCKAnyEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/init(id:title:patientuuid:)",
                "title" : "init(id: String, title: String, patientUUID: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/acl",
                "title" : "var acl: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/id-3jbo7",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/patientuuid",
                "title" : "var patientUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyPatient) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplan\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplan\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplan\/id-7bowr",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplan\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplan",
            "title" : "OCKCarePlan",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientids",
                "title" : "var patientIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientremoteids",
                "title" : "var patientRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientuuids",
                "title" : "var patientUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/title(ascending:)",
                    "title" : "case title(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor",
                "title" : "OCKCarePlanQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplanquery",
            "title" : "OCKCarePlanQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(id:givenname:familyname:careplanuuid:)",
                "title" : "init(id: String, givenName: String, familyName: String, carePlanUUID: UUID?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(id:name:careplanuuid:)",
                "title" : "init(id: String, name: PersonNameComponents, carePlanUUID: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/acl",
                "title" : "var acl: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/address",
                "title" : "var address: OCKPostalAddress?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/category",
                "title" : "var category: OCKContactCategory?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/emailaddresses",
                "title" : "var emailAddresses: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/id-6s41a",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/messagingnumbers",
                "title" : "var messagingNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/organization",
                "title" : "var organization: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/othercontactinfo",
                "title" : "var otherContactInfo: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/phonenumbers",
                "title" : "var phoneNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/role",
                "title" : "var role: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/isequal(to:)",
                "title" : "func isEqual(to: OCKAnyContact) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontact\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontact\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontact\/id-69f4s",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontact\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontact",
            "title" : "OCKContact",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanids",
                "title" : "var carePlanIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanremoteids",
                "title" : "var carePlanRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanuuids",
                "title" : "var carePlanUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/familyname(ascending:)",
                    "title" : "case familyName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/givenname(ascending:)",
                    "title" : "case givenName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor",
                "title" : "OCKContactQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactquery",
            "title" : "OCKContactQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/init(task:outcome:scheduleevent:)",
                "title" : "init(task: Task, outcome: Outcome?, scheduleEvent: OCKScheduleEvent)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/id-9f0k",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/outcome",
                "title" : "var outcome: Outcome?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/scheduleevent",
                "title" : "let scheduleEvent: OCKScheduleEvent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/task",
                "title" : "let task: Task",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/computeprogress(by:)",
                "title" : "func computeProgress<Progress>(by: CareTaskProgressStrategy<Progress>) -> Progress",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockevent\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockevent\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockevent\/id-1biux",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockevent\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockevent",
            "title" : "OCKEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/taskgroupidentifiers",
                "title" : "var taskGroupIdentifiers: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/tasktags",
                "title" : "var taskTags: [String]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockeventquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockeventquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockeventquery",
            "title" : "OCKEventQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/init(quantityidentifier:quantitytype:unit:)",
                "title" : "init(quantityIdentifier: HKQuantityTypeIdentifier, quantityType: QuantityType, unit: HKUnit)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantityidentifier",
                "title" : "var quantityIdentifier: HKQuantityTypeIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.property",
                "title" : "var quantityType: QuantityType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/unit",
                "title" : "var unit: HKUnit",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/cumulative",
                    "title" : "case cumulative",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/discrete",
                    "title" : "case discrete",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum",
                "title" : "OCKHealthKitLinkage.QuantityType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage",
            "title" : "OCKHealthKitLinkage",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/init(taskuuid:taskoccurrenceindex:values:)",
                "title" : "init(taskUUID: UUID, taskOccurrenceIndex: Int, values: [OCKOutcomeValue])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/id-43fyc",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/isownedbyapp",
                "title" : "let isOwnedByApp: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/id-3hy0q",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome",
            "title" : "OCKHealthKitOutcome",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/init(id:title:careplanuuid:schedule:healthkitlinkage:)",
                "title" : "init(id: String, title: String?, carePlanUUID: UUID?, schedule: OCKSchedule, healthKitLinkage: OCKHealthKitLinkage)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/acl",
                "title" : "var acl: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/healthkitlinkage",
                "title" : "var healthKitLinkage: OCKHealthKitLinkage",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkittask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkittask",
            "title" : "OCKHealthKitTask",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/init(label:value:)",
                "title" : "init(label: String, value: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/label",
                "title" : "var label: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/value",
                "title" : "var value: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocklabeledvalue",
            "title" : "OCKLabeledValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklog\/isenabled",
                "title" : "static var isEnabled: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/init(author:title:content:)",
                "title" : "init(author: String?, title: String?, content: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/author",
                "title" : "var author: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/content",
                "title" : "var content: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocknote\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocknote\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocknote",
            "title" : "OCKNote",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/init(taskuuid:taskoccurrenceindex:values:)",
                "title" : "init(taskUUID: UUID, taskOccurrenceIndex: Int, values: [OCKOutcomeValue])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/acl",
                "title" : "var acl: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/id-9p8tj",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcome\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcome\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcome\/id-4tawp",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcome\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcome",
            "title" : "OCKOutcome",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskremoteids",
                "title" : "var taskRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskuuids",
                "title" : "var taskUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomequery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomequery",
            "title" : "OCKOutcomeQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/==(_:_:)",
                "title" : "static func == (OCKOutcomeValue, OCKOutcomeValue) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/init(_:units:)",
                "title" : "init(OCKOutcomeValueUnderlyingType, units: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/booleanvalue",
                "title" : "var booleanValue: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/createddate",
                "title" : "var createdDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/datavalue",
                "title" : "var dataValue: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/datevalue",
                "title" : "var dateValue: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/doublevalue",
                "title" : "var doubleValue: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/integervalue",
                "title" : "var integerValue: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/kind",
                "title" : "var kind: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/numbervalue",
                "title" : "var numberValue: NSNumber?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/stringvalue",
                "title" : "var stringValue: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/type",
                "title" : "var type: OCKOutcomeValueType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/units",
                "title" : "var units: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/value",
                "title" : "var value: OCKOutcomeValueUnderlyingType",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomevalue",
            "title" : "OCKOutcomeValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(id:givenname:familyname:)",
                "title" : "init(id: String, givenName: String, familyName: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(id:name:)",
                "title" : "init(id: String, name: PersonNameComponents)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/acl",
                "title" : "var acl: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/age",
                "title" : "var age: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/allergies",
                "title" : "var allergies: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/birthday",
                "title" : "var birthday: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/id-3hyl8",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/sex",
                "title" : "var sex: OCKBiologicalSex?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatient\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatient\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatient\/id-8fhne",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatient\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatient",
            "title" : "OCKPatient",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/familyname(ascending:)",
                    "title" : "case familyName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/givenname(ascending:)",
                    "title" : "case givenName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/groupidentifier(ascending:)",
                    "title" : "case groupIdentifier(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor",
                "title" : "OCKPatientQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatientquery",
            "title" : "OCKPatientQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_(_:_:)-4glug",
                    "title" : "static func < (OCKRevisionRecord.KnowledgeVector, OCKRevisionRecord.KnowledgeVector) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/init(_:)",
                    "title" : "init([UUID : Int])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/processes",
                    "title" : "var processes: [UUID : Int]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/uuids",
                    "title" : "var uuids: [UUID]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/clock(for:)",
                    "title" : "func clock(for: UUID) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/increment(clockfor:)",
                    "title" : "func increment(clockFor: UUID)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/merge(with:)",
                    "title" : "func merge(with: KnowledgeVector)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-4icmo",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-6ql4w",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_(_:_:)-8yqa5",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_=(_:_:)-1a24z",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_=(_:_:)-h0ff",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct",
                "title" : "OCKRevisionRecord.KnowledgeVector",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/init(entities:knowledgevector:)",
                "title" : "init(entities: [OCKEntity], knowledgeVector: KnowledgeVector)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/entities",
                "title" : "let entities: [OCKEntity]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.property",
                "title" : "let knowledgeVector: KnowledgeVector",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockrevisionrecord",
            "title" : "OCKRevisionRecord",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(composing:)-35hze",
                "title" : "init(composing: [OCKScheduleElement])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(composing:)-6h2mg",
                "title" : "init(composing: [OCKSchedule])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/elements",
                "title" : "let elements: [OCKScheduleElement]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/enddate()",
                "title" : "func endDate() -> Date?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/event(foroccurrenceindex:)",
                "title" : "func event(forOccurrenceIndex: Int) -> OCKScheduleEvent?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/events(from:to:)",
                "title" : "func events(from: Date, to: Date) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/offset(by:)",
                "title" : "func offset(by: DateComponents) -> OCKSchedule",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/startdate()",
                "title" : "func startDate() -> Date",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/subscript(_:)",
                "title" : "subscript(Int) -> OCKScheduleEvent",
                "type" : "subscript"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/dailyattime(hour:minutes:start:end:text:duration:targetvalues:)",
                "title" : "static func dailyAtTime(hour: Int, minutes: Int, start: Date, end: Date?, text: String?, duration: OCKScheduleElement.Duration, targetValues: [OCKOutcomeValue]) -> OCKSchedule",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/weeklyattime(weekday:hours:minutes:start:end:targetvalues:text:duration:)",
                "title" : "static func weeklyAtTime(weekday: Int, hours: Int, minutes: Int, start: Date, end: Date?, targetValues: [OCKOutcomeValue], text: String?, duration: OCKScheduleElement.Duration) -> OCKSchedule",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockschedule\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockschedule\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockschedule",
            "title" : "OCKSchedule",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/init(start:end:interval:text:targetvalues:duration:)",
                "title" : "init(start: Date, end: Date?, interval: DateComponents, text: String?, targetValues: [OCKOutcomeValue], duration: Duration)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.property",
                "title" : "var duration: Duration",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/elements",
                "title" : "var elements: [OCKScheduleElement]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/end",
                "title" : "var end: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/interval",
                "title" : "var interval: DateComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/start",
                "title" : "let start: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/targetvalues",
                "title" : "var targetValues: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/text",
                "title" : "var text: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/date(ofoccurrence:)",
                "title" : "func date(ofOccurrence: Int) -> Date?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/events(betweenoccurrenceindex:and:)",
                "title" : "func events(betweenOccurrenceIndex: Int, and: Int) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/events(from:to:)",
                "title" : "func events(from: Date, to: Date) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/offset(by:)",
                "title" : "func offset(by: DateComponents) -> OCKScheduleElement",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/subscript(_:)",
                "title" : "subscript(Int) -> OCKScheduleEvent",
                "type" : "subscript"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/allday",
                    "title" : "case allDay",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/seconds(_:)",
                    "title" : "case seconds(Double)",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/hours(_:)",
                    "title" : "static func hours(Double) -> Duration",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/minutes(_:)",
                    "title" : "static func minutes(Double) -> Duration",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum",
                "title" : "OCKScheduleElement.Duration",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockscheduleelement",
            "title" : "OCKScheduleElement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/element",
                "title" : "var element: OCKScheduleElement",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/end",
                "title" : "var end: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/occurrence",
                "title" : "var occurrence: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/start",
                "title" : "var start: Date",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockscheduleevent",
            "title" : "OCKScheduleEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_(_:_:)-38m1c",
                "title" : "static func < (OCKSemanticVersion, OCKSemanticVersion) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(_:)",
                "title" : "init?(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(majorversion:minorversion:patchnumber:)",
                "title" : "init(majorVersion: Int, minorVersion: Int, patchNumber: Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/majorversion",
                "title" : "let majorVersion: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/minorversion",
                "title" : "let minorVersion: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/patchnumber",
                "title" : "let patchNumber: Int",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parse(_:)",
                "title" : "static func parse(String) throws -> OCKSemanticVersion",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/emptystring",
                    "title" : "case emptyString",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidmajorversion",
                    "title" : "case invalidMajorVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidminorversion",
                    "title" : "case invalidMinorVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidpatchversion",
                    "title" : "case invalidPatchVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/toomanyseparators",
                    "title" : "case tooManySeparators",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror",
                "title" : "OCKSemanticVersion.ParsingError",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-fzx5",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-h0m2",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_(_:_:)-1u2cp",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_=(_:_:)-2fnev",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_=(_:_:)-7c29c",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocksemanticversion",
            "title" : "OCKSemanticVersion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/init(id:title:careplanuuid:schedule:)",
                "title" : "init(id: String, title: String?, carePlanUUID: UUID?, schedule: OCKSchedule)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/acl",
                "title" : "var acl: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktask",
            "title" : "OCKTask",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanids",
                "title" : "var carePlanIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanremoteids",
                "title" : "var carePlanRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanuuids",
                "title" : "var carePlanUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/excludestaskswithnoevents",
                "title" : "var excludesTasksWithNoEvents: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/groupidentifier(ascending:)",
                    "title" : "case groupIdentifier(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/title(ascending:)",
                    "title" : "case title(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor",
                "title" : "OCKTaskQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktaskquery",
            "title" : "OCKTaskQuery",
            "type" : "struct"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockanystoreprotocol",
            "title" : "OCKAnyStoreProtocol",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockresultclosure",
            "title" : "OCKResultClosure",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockstoreprotocol",
            "title" : "OCKStoreProtocol",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/noevents",
                "title" : "case noEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/notasks",
                "title" : "case noTasks",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/progress(_:)",
                "title" : "case progress(Double)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockadherence\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockadherence\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherence",
            "title" : "OCKAdherence",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/comparetargetvalues",
                "title" : "case compareTargetValues",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/custom(_:)",
                "title" : "case custom(([OCKAnyEvent]) -> OCKAdherence)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/outcomeexists",
                "title" : "case outcomeExists",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/percentofoutcomevaluesthatexist",
                "title" : "case percentOfOutcomeValuesThatExist",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/percentoftargetvaluesmet",
                "title" : "case percentOfTargetValuesMet",
                "type" : "case"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/aggregate(events:)",
                "title" : "func aggregate(events: [OCKAnyEvent]) -> OCKAdherence",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherenceaggregator",
            "title" : "OCKAdherenceAggregator",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/female",
                "title" : "case female",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/male",
                "title" : "case male",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/other(_:)",
                "title" : "case other(String)",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(from:)-1bbpq",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/rawvalue",
                "title" : "var rawValue: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(from:)-80psh",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockbiologicalsex",
            "title" : "OCKBiologicalSex",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/careprovider",
                "title" : "case careProvider",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/friendsandfamily",
                "title" : "case friendsAndFamily",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactcategory",
            "title" : "OCKContactCategory",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/inmemory",
                "title" : "case inMemory",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/ondisk(protection:)",
                "title" : "case onDisk(protection: FileProtectionType)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcoredatastoretype",
            "title" : "OCKCoreDataStoreType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/careplan(_:)",
                "title" : "case carePlan(OCKCarePlan)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/contact(_:)",
                "title" : "case contact(OCKContact)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/healthkittask(_:)",
                "title" : "case healthKitTask(OCKHealthKitTask)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/outcome(_:)",
                "title" : "case outcome(OCKOutcome)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/patient(_:)",
                "title" : "case patient(OCKPatient)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/task(_:)",
                "title" : "case task(OCKTask)",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.property",
                "title" : "var entityType: EntityType",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/parseentity()",
                "title" : "func parseEntity() throws -> PCKEntity",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/careplan",
                    "title" : "case carePlan",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/contact",
                    "title" : "case contact",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/healthkittask",
                    "title" : "case healthKitTask",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/outcome",
                    "title" : "case outcome",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/patient",
                    "title" : "case patient",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/task",
                    "title" : "case task",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum",
                "title" : "OCKEntity.EntityType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockentity\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockentity",
            "title" : "OCKEntity",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/countoutcomevalues",
                "title" : "case countOutcomeValues",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/countoutcomes",
                "title" : "case countOutcomes",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/custom(_:)",
                "title" : "case custom(([OCKAnyEvent]) -> Double)",
                "type" : "case"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/aggregate(events:)",
                "title" : "func aggregate(events: [OCKAnyEvent]) -> Double",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockeventaggregator",
            "title" : "OCKEventAggregator",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/binary",
                "title" : "case binary",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/boolean",
                "title" : "case boolean",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/date",
                "title" : "case date",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/double",
                "title" : "case double",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/integer",
                "title" : "case integer",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/text",
                "title" : "case text",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype",
            "title" : "OCKOutcomeValueType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/addfailed(reason:)",
                "title" : "case addFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/deletefailed(reason:)",
                "title" : "case deleteFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/fetchfailed(reason:)",
                "title" : "case fetchFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/invalidvalue(reason:)",
                "title" : "case invalidValue(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/remotesynchronizationfailed(reason:)",
                "title" : "case remoteSynchronizationFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/timedout(reason:)",
                "title" : "case timedOut(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/updatefailed(reason:)",
                "title" : "case updateFailed(reason: String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/errordescription-4ygi8",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/errordescription-71d97",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstoreerror",
            "title" : "OCKStoreError",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekitstore",
        "title" : "CareKitStore",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/deque\/init(_:)-1tqf4",
                "title" : "init<C>(C)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/deque\/init(minimumcapacity:)",
                "title" : "init(minimumCapacity: Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/deque\/init(unsafeuninitializedcapacity:initializingwith:)",
                "title" : "init(unsafeUninitializedCapacity: Int, initializingWith: (inout UnsafeMutableBufferPointer<Element>, inout Int) throws -> Void) rethrows",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/deque\/append(contentsof:)-29aoh",
                "title" : "func append<C>(contentsOf: C)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/deque\/popfirst()",
                "title" : "func popFirst() -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/deque\/prepend(_:)",
                "title" : "func prepend(Element)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/deque\/prepend(contentsof:)-51zn6",
                "title" : "func prepend<C>(contentsOf: C)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/deque\/prepend(contentsof:)-96y15",
                "title" : "func prepend<S>(contentsOf: S)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/firstrange(of:)-6o81s",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/joined(separator:)-7f1k2",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/count-69a3h",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/count-8wcnm",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/underestimatedcount-gxre",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/contains(_:)-1wjaz",
                    "title" : "func contains<C>(C) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/firstrange(of:)-81nai",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/map(_:)-885cp",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-24der",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-82ctn",
                    "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-1klky",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-6ee8i",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-ejld",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/index",
                    "title" : "Deque.Index",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/indices-swift.typealias",
                    "title" : "Deque.Indices",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subsequence",
                    "title" : "Deque.SubSequence",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Element...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/expressiblebyarrayliteral-implementations",
                "title" : "ExpressibleByArrayLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/partition(by:)-7fwft",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/partition(by:)-90y0t",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/shuffle(using:)",
                    "title" : "func shuffle<T>(using: inout T)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/sort(by:)",
                    "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/swapat(_:_:)-2riuy",
                    "title" : "func swapAt(Self.Index, Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/swapat(_:_:)-7910s",
                    "title" : "func swapAt(Int, Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/withcontiguousmutablestorageifavailable(_:)-4goyj",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/withcontiguousmutablestorageifavailable(_:)-9ksuh",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-1b1nh",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-1li81",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-2gsji",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-3hvat",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-47peg",
                    "title" : "subscript(Range<Self.Index>) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/mutablecollection-implementations",
                "title" : "MutableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/indices-swift.property",
                    "title" : "var indices: Range<Int>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-22tpo",
                    "title" : "subscript(Range<Int>) -> Slice<`Self`>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/subscript(_:)-9nk44",
                    "title" : "subscript(Int) -> Element",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/+(_:_:)-2ezjl",
                    "title" : "static func + <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/+(_:_:)-2udes",
                    "title" : "static func + <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/+(_:_:)-647oo",
                    "title" : "static func + <Other>(Other, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/+=(_:_:)",
                    "title" : "static func += <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/init(_:)-2pl79",
                    "title" : "init<S>(S)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/init(_:)-8tyaw",
                    "title" : "init<S>(S)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/init(repeating:count:)-4v1gt",
                    "title" : "init(repeating: Element, count: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/init(repeating:count:)-5n2n3",
                    "title" : "init(repeating: Self.Element, count: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/append(_:)-6xmiz",
                    "title" : "func append(Self.Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/append(_:)-9h4m7",
                    "title" : "func append(Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/append(contentsof:)-6ewjz",
                    "title" : "func append<S>(contentsOf: S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/append(contentsof:)-8rqnl",
                    "title" : "func append<S>(contentsOf: S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/applying(_:)",
                    "title" : "func applying(CollectionDifference<Self.Element>) -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/insert(_:at:)-6fcpk",
                    "title" : "func insert(Self.Element, at: Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/insert(_:at:)-9hsp7",
                    "title" : "func insert(Element, at: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/insert(contentsof:at:)-1d60f",
                    "title" : "func insert<C>(contentsOf: C, at: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/insert(contentsof:at:)-quf0",
                    "title" : "func insert<C>(contentsOf: C, at: Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/poplast()",
                    "title" : "func popLast() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/remove(at:)-25pt",
                    "title" : "func remove(at: Self.Index) -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/remove(at:)-3imgi",
                    "title" : "func remove(at: Int) -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removeall(keepingcapacity:)-2cas8",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removeall(keepingcapacity:)-yeby",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removeall(where:)-2ynh1",
                    "title" : "func removeAll(where: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removeall(where:)-5e3im",
                    "title" : "func removeAll(where: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removefirst()-1vdmt",
                    "title" : "func removeFirst() -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removefirst()-5sg5i",
                    "title" : "func removeFirst() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removefirst(_:)-2vuji",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removefirst(_:)-8phg7",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removelast()",
                    "title" : "func removeLast() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removelast(_:)",
                    "title" : "func removeLast(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removesubrange(_:)-3ab3y",
                    "title" : "func removeSubrange<R>(R)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removesubrange(_:)-6dkhw",
                    "title" : "func removeSubrange(Range<Self.Index>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/removesubrange(_:)-8oy85",
                    "title" : "func removeSubrange(Range<Int>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/replace(_:with:maxreplacements:)",
                    "title" : "func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/replacesubrange(_:with:)-1sroc",
                    "title" : "func replaceSubrange<C>(Range<Self.Index>, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/replacesubrange(_:with:)-2xunu",
                    "title" : "func replaceSubrange<C, R>(R, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/replacesubrange(_:with:)-5rtzd",
                    "title" : "func replaceSubrange<C>(Range<Int>, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/replacing(_:with:maxreplacements:)",
                    "title" : "func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/replacing(_:with:subrange:maxreplacements:)",
                    "title" : "func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/reservecapacity(_:)-7qlut",
                    "title" : "func reserveCapacity(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/reservecapacity(_:)-9lqxx",
                    "title" : "func reserveCapacity(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/trimprefix(_:)",
                    "title" : "func trimPrefix<Prefix>(Prefix)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/trimprefix(while:)",
                    "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/rangereplaceablecollection-implementations",
                "title" : "RangeReplaceableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/deque\/iterator\/next()",
                        "title" : "func next() -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/collections\/deque\/iterator",
                    "title" : "Deque.Iterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/underestimatedcount-8l15r",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/contains(_:)-8w2ss",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/flatmap(_:)-3f66n",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/flatmap(_:)-4q9nu",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/joined(separator:)-4husz",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/joined(separator:)-4r7h7",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/makeiterator()",
                    "title" : "func makeIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/map(_:)-47t1m",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-3lk93",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/withcontiguousstorageifavailable(_:)-4bcpo",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/deque\/withcontiguousstorageifavailable(_:)-b0eu",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/deque\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/collections\/deque",
            "title" : "Deque",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/keys",
                    "title" : "var keys: OrderedSet<Key>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/values",
                    "title" : "var values: OrderedDictionary.Values",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(forkey:)",
                    "title" : "func index(forKey: Key) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/partition(by:)",
                    "title" : "func partition(by: (Element) throws -> Bool) rethrows -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/remove(at:)",
                    "title" : "func remove(at: Int) -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removeall(keepingcapacity:)",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removeall(where:)",
                    "title" : "func removeAll(where: (`Self`.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removefirst()",
                    "title" : "func removeFirst() -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removefirst(_:)",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removelast()",
                    "title" : "func removeLast() -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removelast(_:)",
                    "title" : "func removeLast(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-5x7oo",
                    "title" : "func removeSubrange<R>(R)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-7wdak",
                    "title" : "func removeSubrange(Range<Int>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffle(using:)",
                    "title" : "func shuffle<T>(using: inout T)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sort(by:)",
                    "title" : "func sort(by: (Element, Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/swapat(_:_:)",
                    "title" : "func swapAt(Int, Int)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/count-27ymz",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/count-6a7hk",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/isempty-4kp5o",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/isempty-7jqki",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/underestimatedcount-6rl6l",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/map(_:)-4vxr9",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-18wmp",
                        "title" : "subscript<R>(R) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-ybix",
                        "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/custommirror",
                        "title" : "var customMirror: Mirror",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/customreflectable-implementations",
                    "title" : "CustomReflectable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/==(_:_:)",
                        "title" : "static func == (`Self`, `Self`) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/keys",
                            "title" : "var keys: OrderedSet<Key>.SubSequence",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/values",
                            "title" : "var values: OrderedDictionary.Values.SubSequence",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(forkey:)",
                            "title" : "func index(forKey: Key) -> Int?",
                            "type" : "method"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/last",
                                "title" : "var last: Self.Element?",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/difference(from:by:)",
                                "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/droplast(_:)",
                                "title" : "func dropLast(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/last(where:)",
                                "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/lastindex(where:)",
                                "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/poplast()",
                                "title" : "func popLast() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast()",
                                "title" : "func removeLast() -> Self.Element",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast(_:)",
                                "title" : "func removeLast(Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/reversed()",
                                "title" : "func reversed() -> ReversedCollection<Self>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(_:)",
                                "title" : "func suffix(Int) -> Self.SubSequence",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/bidirectionalcollection-implementations",
                            "title" : "BidirectionalCollection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/count-4ikvn",
                                "title" : "var count: Int",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/count-6y247",
                                "title" : "var count: Int",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/first",
                                "title" : "var first: Self.Element?",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/isempty-3eihg",
                                "title" : "var isEmpty: Bool",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/isempty-9owap",
                                "title" : "var isEmpty: Bool",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/underestimatedcount-2e1n8",
                                "title" : "var underestimatedCount: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/drop(while:)",
                                "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/dropfirst(_:)",
                                "title" : "func dropFirst(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/firstindex(where:)",
                                "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:)",
                                "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:limitedby:)",
                                "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-4t4nh",
                                "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/popfirst()",
                                "title" : "func popFirst() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(_:)",
                                "title" : "func prefix(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(through:)",
                                "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(upto:)",
                                "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(while:)",
                                "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement()",
                                "title" : "func randomElement() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement(using:)",
                                "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst()",
                                "title" : "func removeFirst() -> Self.Element",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst(_:)",
                                "title" : "func removeFirst(Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                                "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(from:)",
                                "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimprefix(while:)",
                                "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimmingprefix(while:)",
                                "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "title" : "Subscripts",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-7s7y6",
                                "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                                "type" : "subscript"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-98vi9",
                                "title" : "subscript<R>(R) -> Self.SubSequence",
                                "type" : "subscript"
                              }
                            ],
                            "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/collection-implementations",
                            "title" : "Collection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/endindex",
                                "title" : "var endIndex: Int",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.property",
                                "title" : "var indices: Range<Int>",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/startindex",
                                "title" : "var startIndex: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/distance(from:to:)",
                                "title" : "func distance(from: Int, to: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(after:)",
                                "title" : "func formIndex(after: inout Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(before:)",
                                "title" : "func formIndex(before: inout Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:)",
                                "title" : "func index(Int, offsetBy: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:limitedby:)",
                                "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(after:)",
                                "title" : "func index(after: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(before:)",
                                "title" : "func index(before: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "title" : "Subscripts",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-38loo",
                                "title" : "subscript(Range<Int>) -> SubSequence",
                                "type" : "subscript"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-68n2a",
                                "title" : "subscript(Int) -> Element",
                                "type" : "subscript"
                              },
                              {
                                "title" : "Type Aliases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/index",
                                "title" : "OrderedDictionary.Elements.SubSequence.Index",
                                "type" : "typealias"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.typealias",
                                "title" : "OrderedDictionary.Elements.SubSequence.Indices",
                                "type" : "typealias"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/subsequence",
                                "title" : "OrderedDictionary.Elements.SubSequence.SubSequence",
                                "type" : "typealias"
                              }
                            ],
                            "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomaccesscollection-implementations",
                            "title" : "RandomAccessCollection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Structures",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator\/next()",
                                    "title" : "func next() -> Element?",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator",
                                "title" : "OrderedDictionary.Elements.SubSequence.Iterator",
                                "type" : "struct"
                              },
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/lazy",
                                "title" : "var lazy: LazySequence<Self>",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/underestimatedcount-8ynsh",
                                "title" : "var underestimatedCount: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/allsatisfy(_:)",
                                "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/compactmap(_:)",
                                "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/contains(where:)",
                                "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/elementsequal(_:by:)",
                                "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/enumerated()",
                                "title" : "func enumerated() -> EnumeratedSequence<Self>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/filter(_:)",
                                "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/first(where:)",
                                "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-2beoe",
                                "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-88yc7",
                                "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/foreach(_:)",
                                "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/lexicographicallyprecedes(_:by:)",
                                "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/makeiterator()",
                                "title" : "func makeIterator() -> Iterator",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-5srcs",
                                "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/max(by:)",
                                "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/min(by:)",
                                "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(_:_:)",
                                "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(into:_:)",
                                "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled()",
                                "title" : "func shuffled() -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled(using:)",
                                "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/sorted(by:)",
                                "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/starts(with:by:)",
                                "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/withcontiguousstorageifavailable(_:)",
                                "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                                "type" : "method"
                              },
                              {
                                "title" : "Type Aliases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/element",
                                "title" : "OrderedDictionary.Elements.SubSequence.Element",
                                "type" : "typealias"
                              }
                            ],
                            "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence\/sequence-implementations",
                            "title" : "Sequence Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subsequence",
                        "title" : "OrderedDictionary.Elements.SubSequence",
                        "type" : "struct"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/distance(from:to:)",
                        "title" : "func distance(from: Int, to: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(after:)",
                        "title" : "func formIndex(after: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/formindex(before:)",
                        "title" : "func formIndex(before: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:)",
                        "title" : "func index(Int, offsetBy: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(after:)",
                        "title" : "func index(after: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index(before:)",
                        "title" : "func index(before: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-4xwc2",
                        "title" : "subscript(Int) -> Element",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-5kdk6",
                        "title" : "subscript(Range<Int>) -> SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/index",
                        "title" : "OrderedDictionary.Elements.Index",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/indices",
                        "title" : "OrderedDictionary.Elements.Indices",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/underestimatedcount-47kr5",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/underestimatedcount-4lmkk",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-806a1",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-91r64",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/makeiterator()",
                        "title" : "func makeIterator() -> OrderedDictionary<Key, Value>.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/map(_:)-5j1b0",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/element",
                        "title" : "OrderedDictionary.Elements.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.struct",
                "title" : "OrderedDictionary.Elements",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/elements",
                    "title" : "var elements: Array<Value>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withunsafebufferpointer(_:)",
                    "title" : "func withUnsafeBufferPointer<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withunsafemutablebufferpointer(_:)",
                    "title" : "func withUnsafeMutableBufferPointer<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/difference(from:)",
                        "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-3nlux",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined(separator:)-1mqyi",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lastindex(of:)",
                        "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/underestimatedcount-19kdj",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/contains(_:)-316th",
                        "title" : "func contains<C>(C) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstindex(of:)",
                        "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-1abqc",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(of:)",
                        "title" : "func index(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/makeiterator()",
                        "title" : "func makeIterator() -> IndexingIterator<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/map(_:)-35c33",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/ranges(of:)",
                        "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-10hnb",
                        "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7mv79",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/trimmingprefix(_:)",
                        "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-17pjd",
                        "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-2tivk",
                        "title" : "subscript<R>(R) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-50r43",
                        "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/==(_:_:)",
                        "title" : "static func == (`Self`, `Self`) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/partition(by:)-6cdt6",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/partition(by:)-7ahp1",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/partition(by:)-9x0i5",
                        "title" : "func partition(by: (Value) throws -> Bool) rethrows -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reverse()",
                        "title" : "func reverse()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffle()",
                        "title" : "func shuffle()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffle(using:)",
                        "title" : "func shuffle<T>(using: inout T)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sort()",
                        "title" : "func sort()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sort(by:)",
                        "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-77eiy",
                        "title" : "func swapAt(Int, Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-7t6ng",
                        "title" : "func swapAt(Self.Index, Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-3l1og",
                        "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-4xcqv",
                        "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-2dy6a",
                        "title" : "subscript(Range<Self.Index>) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-43dve",
                        "title" : "subscript<R>(R) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-5j0dp",
                        "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-6ve5i",
                        "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-8skh",
                        "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/mutablecollection-implementations",
                    "title" : "MutableCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/distance(from:to:)",
                        "title" : "func distance(from: Int, to: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(after:)",
                        "title" : "func formIndex(after: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/formindex(before:)",
                        "title" : "func formIndex(before: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:)",
                        "title" : "func index(Int, offsetBy: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(after:)",
                        "title" : "func index(after: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index(before:)",
                        "title" : "func index(before: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/subscript(_:)-25vfz",
                        "title" : "subscript(Int) -> Value",
                        "type" : "subscript"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/index",
                        "title" : "OrderedDictionary.Values.Index",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/indices",
                        "title" : "OrderedDictionary.Values.Indices",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/underestimatedcount-5cuom",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/contains(_:)-1926",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-4xf12",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-5nzbh",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined()",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined(separator:)-8009t",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/joined(separator:)-9chrb",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/map(_:)-9ei4k",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7bb2j",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8v21t",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Value>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8wk8n",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/element",
                        "title" : "OrderedDictionary.Values.Element",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/iterator",
                        "title" : "OrderedDictionary.Values.Iterator",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.struct",
                "title" : "OrderedDictionary.Values",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(_:uniquingkeyswith:)-2y39b",
                "title" : "init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(_:uniquingkeyswith:)-zhfp",
                "title" : "init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(grouping:by:)-6m2zw",
                "title" : "init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(grouping:by:)-6mahw",
                "title" : "init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(minimumcapacity:persistent:)",
                "title" : "init(minimumCapacity: Int, persistent: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(uncheckeduniquekeys:values:)",
                "title" : "init<Keys, Values>(uncheckedUniqueKeys: Keys, values: Values)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-2j0dw",
                "title" : "init<S>(uncheckedUniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-6gxhj",
                "title" : "init<S>(uncheckedUniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(uniquekeys:values:)",
                "title" : "init<Keys, Values>(uniqueKeys: Keys, values: Values)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(uniquekeyswithvalues:)-5ux9r",
                "title" : "init<S>(uniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/init(uniquekeyswithvalues:)-88mzi",
                "title" : "init<S>(uniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/elements-swift.property",
                "title" : "var elements: Elements",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/keys",
                "title" : "var keys: OrderedSet<Key>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/values-swift.property",
                "title" : "var values: Values",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/compactmapvalues(_:)",
                "title" : "func compactMapValues<T>((Value) throws -> T?) rethrows -> OrderedDictionary<Key, T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/filter(_:)",
                "title" : "func filter((Element) throws -> Bool) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/index(forkey:)",
                "title" : "func index(forKey: Key) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/mapvalues(_:)",
                "title" : "func mapValues<T>((Value) throws -> T) rethrows -> OrderedDictionary<Key, T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/merge(_:uniquingkeyswith:)-6ka2i",
                "title" : "func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/merge(_:uniquingkeyswith:)-9wkad",
                "title" : "func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/merging(_:uniquingkeyswith:)-2e0xa",
                "title" : "func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/merging(_:uniquingkeyswith:)-4z49c",
                "title" : "func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/partition(by:)",
                "title" : "func partition(by: (Element) throws -> Bool) rethrows -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/remove(at:)",
                "title" : "func remove(at: Int) -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removeall(where:)",
                "title" : "func removeAll(where: (`Self`.Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removefirst()",
                "title" : "func removeFirst() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removefirst(_:)",
                "title" : "func removeFirst(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removelast()",
                "title" : "func removeLast() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removelast(_:)",
                "title" : "func removeLast(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removesubrange(_:)-512n3",
                "title" : "func removeSubrange(Range<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removesubrange(_:)-8rmzx",
                "title" : "func removeSubrange<R>(R)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/removevalue(forkey:)",
                "title" : "func removeValue(forKey: Key) -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/reservecapacity(_:)",
                "title" : "func reserveCapacity(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/reverse()",
                "title" : "func reverse()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/shuffle()",
                "title" : "func shuffle()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/shuffle(using:)",
                "title" : "func shuffle<T>(using: inout T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/sort()",
                "title" : "func sort()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/sort(by:)",
                "title" : "func sort(by: (Element, Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/swapat(_:_:)",
                "title" : "func swapAt(Int, Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/updatevalue(_:forkey:)",
                "title" : "func updateValue(Value, forKey: Key) -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/updatevalue(_:forkey:insertingat:)",
                "title" : "func updateValue(Value, forKey: Key, insertingAt: Int) -> (originalMember: Value?, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/updatevalue(forkey:default:with:)",
                "title" : "func updateValue<R>(forKey: Key, default: () -> Value, with: (inout Value) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/updatevalue(forkey:insertingdefault:at:with:)",
                "title" : "func updateValue<R>(forKey: Key, insertingDefault: () -> Value, at: Int, with: (inout Value) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/subscript(_:)",
                "title" : "subscript(Key) -> Value?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/subscript(_:default:)",
                "title" : "subscript(Key, default _: () -> Value) -> Value",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/ordereddictionary\/index",
                "title" : "OrderedDictionary.Index",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/init(dictionaryliteral:)",
                    "title" : "init(dictionaryLiteral: (Key, Value)...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/expressiblebydictionaryliteral-implementations",
                "title" : "ExpressibleByDictionaryLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/ordereddictionary\/iterator\/next()",
                        "title" : "func next() -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/collections\/ordereddictionary\/iterator",
                    "title" : "OrderedDictionary.Iterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/underestimatedcount-4rg3j",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/underestimatedcount-leu5",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/flatmap(_:)-4t9a4",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/flatmap(_:)-7ykj5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/makeiterator()",
                    "title" : "func makeIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/map(_:)",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/ordereddictionary\/element",
                    "title" : "OrderedDictionary.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/collections\/ordereddictionary\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/collections\/ordereddictionary",
            "title" : "OrderedDictionary",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-23otz",
                    "title" : "init(`Self`)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-7u7kx",
                    "title" : "init<Value>(Dictionary<Element, Value>.Keys)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-9639t",
                    "title" : "init(Set<Element>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/formintersection(_:)-80iht",
                    "title" : "func formIntersection<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-75z52",
                    "title" : "func formSymmetricDifference<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/formunion(_:)-8tuol",
                    "title" : "func formUnion<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/intersection(_:)-6ee3o",
                    "title" : "func intersection<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-25vmx",
                    "title" : "func isDisjoint(with: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-8nfqs",
                    "title" : "func isDisjoint<S>(with: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-7n66e",
                    "title" : "func isStrictSubset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-91par",
                    "title" : "func isStrictSubset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-9o6mg",
                    "title" : "func isStrictSubset(of: `Self`) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-1e0xt",
                    "title" : "func isStrictSuperset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-5dsfd",
                    "title" : "func isStrictSuperset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-89ig3",
                    "title" : "func isStrictSuperset(of: `Self`) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-801lo",
                    "title" : "func isSubset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-952h5",
                    "title" : "func isSubset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-2vtig",
                    "title" : "func isSuperset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-9krpz",
                    "title" : "func isSuperset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/subtract(_:)-4pjhu",
                    "title" : "func subtract<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/subtracting(_:)-8e6mw",
                    "title" : "func subtracting<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/symmetricdifference(_:)-7r79p",
                    "title" : "func symmetricDifference<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/union(_:)-23dm1",
                    "title" : "func union<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/custommirror",
                        "title" : "var customMirror: Mirror",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/customreflectable-implementations",
                    "title" : "CustomReflectable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/==(_:_:)",
                        "title" : "static func == (`Self`, `Self`) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init(arrayliteral:)-1tjdx",
                        "title" : "init(arrayLiteral: Element...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/expressiblebyarrayliteral-implementations",
                    "title" : "ExpressibleByArrayLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-5b080",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init(_:)-6svoq",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/init(arrayliteral:)-39slg",
                        "title" : "init(arrayLiteral: Self.Element...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/contains(_:)",
                        "title" : "func contains(Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/formintersection(_:)-4ow38",
                        "title" : "func formIntersection(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-8pkt5",
                        "title" : "func formSymmetricDifference(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/formunion(_:)-6ijb",
                        "title" : "func formUnion(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/insert(_:)",
                        "title" : "func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/intersection(_:)-3q45l",
                        "title" : "func intersection(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-3wuso",
                        "title" : "func isDisjoint(with: `Self`) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isdisjoint(with:)-7sbsg",
                        "title" : "func isDisjoint(with: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsubset(of:)-33z0l",
                        "title" : "func isStrictSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/isstrictsuperset(of:)-8pbce",
                        "title" : "func isStrictSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-2dx31",
                        "title" : "func isSubset(of: `Self`) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issubset(of:)-n4t7",
                        "title" : "func isSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-4ea6h",
                        "title" : "func isSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/issuperset(of:)-9t33p",
                        "title" : "func isSuperset(of: `Self`) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/remove(_:)",
                        "title" : "func remove(Element) -> Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/subtract(_:)-4d5uc",
                        "title" : "func subtract(`Self`)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/subtract(_:)-627eq",
                        "title" : "func subtract(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/subtracting(_:)-3ct1b",
                        "title" : "func subtracting(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/symmetricdifference(_:)-6aed7",
                        "title" : "func symmetricDifference(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/union(_:)-79uk3",
                        "title" : "func union(`Self`) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/update(with:)",
                        "title" : "func update(with: Element) -> Element?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/collections\/orderedset\/unorderedview\/element",
                        "title" : "OrderedSet.UnorderedView.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/unorderedview\/setalgebra-implementations",
                    "title" : "SetAlgebra Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/unorderedview",
                "title" : "OrderedSet.UnorderedView",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(_:)-2d3a9",
                "title" : "init<Value>(Dictionary<Element, Value>.Keys)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(_:)-3d7qr",
                "title" : "init<C>(C)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(_:)-5zktd",
                "title" : "init<S>(S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(_:)-68j7",
                "title" : "init(`Self`)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(_:)-7rt2h",
                "title" : "init(UnorderedView)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(_:)-8tli8",
                "title" : "init(Set<Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(_:)-8zm9d",
                "title" : "init(SubSequence)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(minimumcapacity:persistent:)",
                "title" : "init(minimumCapacity: Int, persistent: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/init(uncheckeduniqueelements:)",
                "title" : "init<S>(uncheckedUniqueElements: S)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/elements",
                "title" : "var elements: [Element]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/unordered",
                "title" : "var unordered: UnorderedView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/append(_:)",
                "title" : "func append(Element) -> (inserted: Bool, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/append(contentsof:)",
                "title" : "func append<S>(contentsOf: S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/applying(_:)",
                "title" : "func applying(CollectionDifference<Element>) -> `Self`?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/contains(_:)",
                "title" : "func contains(Element) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/difference(from:)",
                "title" : "func difference(from: `Self`) -> CollectionDifference<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/firstindex(of:)",
                "title" : "func firstIndex(of: Element) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formintersection(_:)-2a4y4",
                "title" : "func formIntersection(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formintersection(_:)-43o1u",
                "title" : "func formIntersection(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formintersection(_:)-7odn2",
                "title" : "func formIntersection<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formsymmetricdifference(_:)-2ll2z",
                "title" : "func formSymmetricDifference(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formsymmetricdifference(_:)-391sm",
                "title" : "func formSymmetricDifference<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formsymmetricdifference(_:)-96csi",
                "title" : "func formSymmetricDifference(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formunion(_:)-3dkzw",
                "title" : "func formUnion(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formunion(_:)-59end",
                "title" : "func formUnion<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/formunion(_:)-6pksr",
                "title" : "func formUnion(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/insert(_:at:)",
                "title" : "func insert(Element, at: Int) -> (inserted: Bool, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/intersection(_:)-4o09a",
                "title" : "func intersection(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/intersection(_:)-80md4",
                "title" : "func intersection<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/intersection(_:)-9yzg3",
                "title" : "func intersection(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isdisjoint(with:)-4tsmx",
                "title" : "func isDisjoint(with: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isdisjoint(with:)-54iy6",
                "title" : "func isDisjoint(with: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isdisjoint(with:)-6vmoh",
                "title" : "func isDisjoint(with: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isdisjoint(with:)-7nqur",
                "title" : "func isDisjoint<S>(with: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsubset(of:)-10abw",
                "title" : "func isStrictSubset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsubset(of:)-4efhn",
                "title" : "func isStrictSubset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsubset(of:)-8m21h",
                "title" : "func isStrictSubset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsubset(of:)-9lv3x",
                "title" : "func isStrictSubset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-3kfwa",
                "title" : "func isStrictSuperset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-5e6d5",
                "title" : "func isStrictSuperset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-7u97x",
                "title" : "func isStrictSuperset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/isstrictsuperset(of:)-98d9s",
                "title" : "func isStrictSuperset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issubset(of:)-3mw6r",
                "title" : "func isSubset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issubset(of:)-8yb29",
                "title" : "func isSubset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issubset(of:)-9hxl4",
                "title" : "func isSubset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issubset(of:)-ptij",
                "title" : "func isSubset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issuperset(of:)-2bbv8",
                "title" : "func isSuperset(of: UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issuperset(of:)-4rrsh",
                "title" : "func isSuperset(of: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issuperset(of:)-7oow7",
                "title" : "func isSuperset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/issuperset(of:)-7xvog",
                "title" : "func isSuperset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/lastindex(of:)",
                "title" : "func lastIndex(of: Element) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/partition(by:)",
                "title" : "func partition(by: (Element) throws -> Bool) rethrows -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/remove(_:)",
                "title" : "func remove(Element) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/remove(at:)",
                "title" : "func remove(at: Int) -> `Self`.Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removeall(where:)",
                "title" : "func removeAll(where: (Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removefirst()",
                "title" : "func removeFirst() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removefirst(_:)",
                "title" : "func removeFirst(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removelast()",
                "title" : "func removeLast() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removelast(_:)",
                "title" : "func removeLast(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removesubrange(_:)-2fqke",
                "title" : "func removeSubrange(Range<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/removesubrange(_:)-62u6a",
                "title" : "func removeSubrange<R>(R)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/reservecapacity(_:)",
                "title" : "func reserveCapacity(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/reverse()",
                "title" : "func reverse()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/shuffle()",
                "title" : "func shuffle()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/shuffle(using:)",
                "title" : "func shuffle<T>(using: inout T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/sort()",
                "title" : "func sort()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/sort(by:)",
                "title" : "func sort(by: (Element, Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/subtract(_:)-3b6nj",
                "title" : "func subtract(`Self`)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/subtract(_:)-9rtmd",
                "title" : "func subtract(UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/subtract(_:)-9wmg8",
                "title" : "func subtract<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/subtracting(_:)-1gl4y",
                "title" : "func subtracting<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/subtracting(_:)-5graf",
                "title" : "func subtracting(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/subtracting(_:)-7kl8r",
                "title" : "func subtracting(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/swapat(_:_:)",
                "title" : "func swapAt(Int, Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/symmetricdifference(_:)-1810l",
                "title" : "func symmetricDifference(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/symmetricdifference(_:)-8dvm6",
                "title" : "func symmetricDifference(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/symmetricdifference(_:)-9huk7",
                "title" : "func symmetricDifference<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/union(_:)-2939h",
                "title" : "func union<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/union(_:)-3lt5i",
                "title" : "func union(UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/union(_:)-67y2h",
                "title" : "func union(`Self`) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/update(_:at:)",
                "title" : "func update(Element, at: Int) -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/updateorappend(_:)",
                "title" : "func updateOrAppend(Element) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/collections\/orderedset\/updateorinsert(_:at:)",
                "title" : "func updateOrInsert(Element, at: Int) -> (originalMember: Element?, index: Int)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/difference(from:)-4dq1z",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/firstrange(of:)-38ioh",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/joined(separator:)-9vy69",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/count-5pqyp",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/count-625oz",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/isempty-6zr06",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/isempty-8fqtr",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/underestimatedcount-6s830",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/firstrange(of:)-9s1o",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/map(_:)-7i7ee",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/subscript(_:)-1f4x9",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/subscript(_:)-3qjhg",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Element...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/expressiblebyarrayliteral-implementations",
                "title" : "ExpressibleByArrayLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/last",
                            "title" : "var last: Self.Element?",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/difference(from:)",
                            "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/difference(from:by:)",
                            "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/droplast(_:)",
                            "title" : "func dropLast(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/firstrange(of:)-4zhmi",
                            "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/joined(separator:)-72f98",
                            "title" : "func joined(separator: String) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/last(where:)",
                            "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/lastindex(of:)",
                            "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/lastindex(where:)",
                            "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/poplast()",
                            "title" : "func popLast() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/removelast()",
                            "title" : "func removeLast() -> Self.Element",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/removelast(_:)",
                            "title" : "func removeLast(Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/reversed()",
                            "title" : "func reversed() -> ReversedCollection<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/suffix(_:)",
                            "title" : "func suffix(Int) -> Self.SubSequence",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/collections\/orderedset\/subsequence\/bidirectionalcollection-implementations",
                        "title" : "BidirectionalCollection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/count-1t72h",
                            "title" : "var count: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/count-st6c",
                            "title" : "var count: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/first",
                            "title" : "var first: Self.Element?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/isempty-66too",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/isempty-7t4b5",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/underestimatedcount-8wfmh",
                            "title" : "var underestimatedCount: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/drop(while:)",
                            "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/dropfirst(_:)",
                            "title" : "func dropFirst(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/firstindex(of:)",
                            "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/firstindex(where:)",
                            "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/firstrange(of:)-13m6n",
                            "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/formindex(_:offsetby:)",
                            "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/formindex(_:offsetby:limitedby:)",
                            "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/index(of:)",
                            "title" : "func index(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/makeiterator()",
                            "title" : "func makeIterator() -> IndexingIterator<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/map(_:)-3aqct",
                            "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/popfirst()",
                            "title" : "func popFirst() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/prefix(_:)",
                            "title" : "func prefix(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/prefix(through:)",
                            "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/prefix(upto:)",
                            "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/prefix(while:)",
                            "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/randomelement()",
                            "title" : "func randomElement() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/randomelement(using:)",
                            "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/ranges(of:)",
                            "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/removefirst()",
                            "title" : "func removeFirst() -> Self.Element",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/removefirst(_:)",
                            "title" : "func removeFirst(Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                            "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/split(separator:maxsplits:omittingemptysubsequences:)",
                            "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/suffix(from:)",
                            "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/trimprefix(_:)",
                            "title" : "func trimPrefix<Prefix>(Prefix)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/trimprefix(while:)",
                            "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/trimmingprefix(_:)",
                            "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/trimmingprefix(while:)",
                            "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "title" : "Subscripts",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-3pqvw",
                            "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                            "type" : "subscript"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-8r0e1",
                            "title" : "subscript<R>(R) -> Self.SubSequence",
                            "type" : "subscript"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/iterator",
                            "title" : "OrderedSet.SubSequence.Iterator",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/collections\/orderedset\/subsequence\/collection-implementations",
                        "title" : "Collection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/==(_:_:)",
                            "title" : "static func == (`Self`, `Self`) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/collections\/orderedset\/subsequence\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/collections\/orderedset\/subsequence\/hashable-implementations",
                        "title" : "Hashable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/endindex",
                            "title" : "var endIndex: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/indices-swift.property",
                            "title" : "var indices: Indices",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/startindex",
                            "title" : "var startIndex: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/distance(from:to:)",
                            "title" : "func distance(from: Int, to: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/formindex(after:)",
                            "title" : "func formIndex(after: inout Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/formindex(before:)",
                            "title" : "func formIndex(before: inout Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/index(_:offsetby:)",
                            "title" : "func index(Int, offsetBy: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/index(_:offsetby:limitedby:)",
                            "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/index(after:)",
                            "title" : "func index(after: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/index(before:)",
                            "title" : "func index(before: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "title" : "Subscripts",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-8zt5n",
                            "title" : "subscript(Int) -> Element",
                            "type" : "subscript"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/subscript(_:)-9h1wd",
                            "title" : "subscript(Range<Int>) -> SubSequence",
                            "type" : "subscript"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/index",
                            "title" : "OrderedSet.SubSequence.Index",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/indices-swift.typealias",
                            "title" : "OrderedSet.SubSequence.Indices",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/subsequence",
                            "title" : "OrderedSet.SubSequence.SubSequence",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/collections\/orderedset\/subsequence\/randomaccesscollection-implementations",
                        "title" : "RandomAccessCollection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/lazy",
                            "title" : "var lazy: LazySequence<Self>",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/underestimatedcount-7fqo1",
                            "title" : "var underestimatedCount: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/allsatisfy(_:)",
                            "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/compactmap(_:)",
                            "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/contains(_:)",
                            "title" : "func contains(Self.Element) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/contains(where:)",
                            "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/elementsequal(_:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/elementsequal(_:by:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/enumerated()",
                            "title" : "func enumerated() -> EnumeratedSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/filter(_:)",
                            "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/first(where:)",
                            "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/flatmap(_:)-87q9z",
                            "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/flatmap(_:)-iuyu",
                            "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/foreach(_:)",
                            "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/joined()",
                            "title" : "func joined() -> FlattenSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/joined(separator:)-42wk1",
                            "title" : "func joined(separator: String) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/joined(separator:)-6dlvl",
                            "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/lexicographicallyprecedes(_:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/lexicographicallyprecedes(_:by:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/map(_:)-wv4l",
                            "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/max()",
                            "title" : "func max() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/max(by:)",
                            "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/min()",
                            "title" : "func min() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/min(by:)",
                            "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/reduce(_:_:)",
                            "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/reduce(into:_:)",
                            "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/shuffled()",
                            "title" : "func shuffled() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/shuffled(using:)",
                            "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/sorted()",
                            "title" : "func sorted() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/sorted(by:)",
                            "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/starts(with:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/starts(with:by:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-16p2s",
                            "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-9f4iv",
                            "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/collections\/orderedset\/subsequence\/element",
                            "title" : "OrderedSet.SubSequence.Element",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/collections\/orderedset\/subsequence\/sequence-implementations",
                        "title" : "Sequence Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/collections\/orderedset\/subsequence",
                    "title" : "OrderedSet.SubSequence",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/indices-swift.property",
                    "title" : "var indices: Indices",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/subscript(_:)-3zzoq",
                    "title" : "subscript(Range<Int>) -> SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/subscript(_:)-7e56c",
                    "title" : "subscript(Int) -> Element",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/index",
                    "title" : "OrderedSet.Index",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/indices-swift.typealias",
                    "title" : "OrderedSet.Indices",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/underestimatedcount-6vimf",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/flatmap(_:)-4upo",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/flatmap(_:)-mpwk",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/joined(separator:)-364rm",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/joined(separator:)-7er73",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/map(_:)-60smk",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/withcontiguousstorageifavailable(_:)-8bjz2",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/withcontiguousstorageifavailable(_:)-8k26k",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/collections\/orderedset\/iterator",
                    "title" : "OrderedSet.Iterator",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/collections\/orderedset\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/collections\/orderedset",
            "title" : "OrderedSet",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/collections",
        "title" : "Collections",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/dequemodule",
        "title" : "DequeModule",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/orderedcollections",
        "title" : "OrderedCollections",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Initialize the SDK",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parsecarekit\/parseremote\/init(uuid:auto:subscribetoserverupdates:defaultacl:)",
            "title" : "init(uuid: UUID, auto: Bool, subscribeToServerUpdates: Bool, defaultACL: ParseACL?) async throws",
            "type" : "init"
          },
          {
            "path" : "\/documentation\/parsecarekit\/parseremote\/init(uuid:auto:replacepckstoreclasses:subscribetoserverupdates:defaultacl:)",
            "title" : "init(uuid: UUID, auto: Bool, replacePCKStoreClasses: [PCKStoreClass : PCKSynchronizable], subscribeToServerUpdates: Bool, defaultACL: ParseACL?) async throws",
            "type" : "init"
          },
          {
            "path" : "\/documentation\/parsecarekit\/parseremote\/init(uuid:auto:replacepckstoreclasses:customclasses:subscribetoserverupdates:defaultacl:)",
            "title" : "init(uuid: UUID, auto: Bool, replacePCKStoreClasses: [PCKStoreClass : PCKSynchronizable]?, customClasses: [String : PCKSynchronizable], subscribeToServerUpdates: Bool, defaultACL: ParseACL?) async throws",
            "type" : "init"
          },
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckutility\/decoder()",
                "title" : "class func decoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckutility\/encoder()",
                "title" : "class func encoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckutility\/jsonencoder()",
                "title" : "class func jsonEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckutility\/setaccessgroup(filename:)",
                "title" : "class func setAccessGroup(fileName: String) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckutility\/setupserver(filename:authentication:)",
                "title" : "class func setupServer(fileName: String, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?) async throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckutility",
            "title" : "PCKUtility",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/automaticallysynchronizes",
                "title" : "var automaticallySynchronizes: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/customclassestosynchronize",
                "title" : "var customClassesToSynchronize: [String : PCKSynchronizable]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/delegate",
                "title" : "var delegate: OCKRemoteSynchronizationDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/parseremotedelegate",
                "title" : "var parseRemoteDelegate: ParseRemoteDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/pckstoreclassestosynchronize",
                "title" : "var pckStoreClassesToSynchronize: [PCKStoreClass : PCKSynchronizable]!",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/uuid",
                "title" : "var uuid: UUID!",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/pullrevisions(since:mergerevision:completion:)",
                "title" : "func pullRevisions(since: OCKRevisionRecord.KnowledgeVector, mergeRevision: (OCKRevisionRecord) -> Void, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremote\/pushrevisions(devicerevisions:deviceknowledge:completion:)",
                "title" : "func pushRevisions(deviceRevisions: [CareKitStore.OCKRevisionRecord], deviceKnowledge: CareKitStore.OCKRevisionRecord.KnowledgeVector, completion: (Error?) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/parseremote",
            "title" : "ParseRemote",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parsecarekit\/pckobjectable\/init(uuid:)-15gcp",
                        "title" : "init?(uuid: UUID?)",
                        "type" : "init"
                      }
                    ],
                    "title" : "PCKObjectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/init(uuid:)-62qc2",
                "title" : "init?(uuid: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/clock",
                "title" : "var clock: PCKClock?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/encodingforparse",
                "title" : "var encodingForParse: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/entityid",
                "title" : "var entityId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parsecarekit\/pckobjectable\/id-5um9s",
                        "title" : "var id: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "PCKObjectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/id-7q3rm",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/logicalclock",
                "title" : "var logicalClock: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/timezone",
                "title" : "var timezone: TimeZone?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parsecarekit\/pckobjectable\/uuid-2ngs0",
                        "title" : "var uuid: UUID?",
                        "type" : "property"
                      }
                    ],
                    "title" : "PCKObjectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/uuid-7pv6w",
                "title" : "var uuid: UUID?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/canconverttocarekit()",
                "title" : "func canConvertToCareKit() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/copycommonvalues(from:)",
                "title" : "func copyCommonValues(from: Self)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/encodeobjectable(to:)",
                "title" : "func encodeObjectable(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/copyvalues(from:to:)",
                "title" : "static func copyValues(from: Self, to: Self) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/createcurrentdateinterval(for:)",
                "title" : "static func createCurrentDateInterval(for: Date) -> DateInterval",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/first(_:options:)",
                "title" : "static func first(UUID?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/first(_:options:completion:)",
                "title" : "static func first(UUID?, options: API.Options, completion: (Result<Self, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/firstpublisher(_:options:)",
                "title" : "static func firstPublisher(UUID?, options: API.Options) -> Future<Self, Error>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckobjectable\/==(_:_:)",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckobjectable\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckobjectable\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckobjectable",
            "title" : "PCKObjectable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckroleable\/owner",
                "title" : "var owner: RoleUser?",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parsecarekit\/pckroleable\/appendstring-9rbwr",
                        "title" : "static var appendString: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "PCKRoleable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckroleable\/appendstring-35gxz",
                "title" : "static var appendString: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckroleable\/create(with:)",
                "title" : "static func create(with: RoleUser) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckroleable\/rolename(owner:)",
                "title" : "static func roleName(owner: RoleUser?) throws -> String",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckroleable\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckroleable\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckroleable",
            "title" : "PCKRoleable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcksynchronizable\/addtocloud(_:completion:)",
                "title" : "func addToCloud(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcksynchronizable\/new(with:)",
                "title" : "func new(with: OCKEntity) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcksynchronizable\/pullrevisions(since:cloudclock:remoteid:mergerevision:)",
                "title" : "func pullRevisions(since: Int, cloudClock: OCKRevisionRecord.KnowledgeVector, remoteID: String, mergeRevision: (Result<OCKRevisionRecord, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcksynchronizable\/pushrevision(_:cloudclock:remoteid:completion:)",
                "title" : "func pushRevision(ParseRemoteDelegate?, cloudClock: Int, remoteID: String, completion: (Error?) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pcksynchronizable",
            "title" : "PCKSynchronizable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/effectivedate",
                "title" : "var effectiveDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/nextversions",
                "title" : "var nextVersions: [Pointer<Self>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/previousversions",
                "title" : "var previousVersions: [Pointer<Self>]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/copyversionedvalues(from:)",
                "title" : "func copyVersionedValues(from: Self)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/encodeversionable(to:)",
                "title" : "func encodeVersionable(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/find(for:options:)",
                "title" : "func find(for: Date, options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/find(for:options:callbackqueue:completion:)",
                "title" : "func find(for: Date, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/findpublisher(for:options:)",
                "title" : "func findPublisher(for: Date, options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/save(options:)",
                "title" : "func save(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/save(options:completion:)",
                "title" : "func save(options: API.Options, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/savepublisher(for:options:)",
                "title" : "func savePublisher(for: Date, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckversionable\/query(for:)",
                "title" : "static func query(for: Date) -> Query<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckversionable",
            "title" : "PCKVersionable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremotedelegate\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremotedelegate\/needstore()",
                "title" : "func needStore() -> OCKAnyStoreProtocol",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parseremotedelegate\/successfullypusheddatatocloud()",
                "title" : "func successfullyPushedDataToCloud()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/parseremotedelegate",
            "title" : "ParseRemoteDelegate",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/clock",
                "title" : "var clock: PCKClock?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/effectivedate",
                "title" : "var effectiveDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/encodingforparse",
                "title" : "var encodingForParse: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/entityid",
                "title" : "var entityId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/logicalclock",
                "title" : "var logicalClock: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/nextversions",
                "title" : "var nextVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/patient",
                "title" : "var patient: PCKPatient?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/patientuuid",
                "title" : "var patientUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/previousversions",
                "title" : "var previousVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/timezone",
                "title" : "var timezone: TimeZone?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/addtocloud(_:completion:)",
                "title" : "func addToCloud(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/converttocarekit()",
                "title" : "func convertToCareKit() throws -> OCKCarePlan",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/new(with:)",
                "title" : "func new(with: OCKEntity) throws -> PCKCarePlan",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/pullrevisions(since:cloudclock:remoteid:mergerevision:)",
                "title" : "func pullRevisions(since: Int, cloudClock: OCKRevisionRecord.KnowledgeVector, remoteID: String, mergeRevision: (Result<OCKRevisionRecord, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/pushrevision(_:cloudclock:remoteid:completion:)",
                "title" : "func pushRevision(ParseRemoteDelegate?, cloudClock: Int, remoteID: String, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/classname-swift.type.property-4wvbc",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/copycarekit(_:)",
                "title" : "static func copyCareKit(OCKAnyCarePlan) throws -> PCKCarePlan",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/copyvalues(from:to:)",
                "title" : "static func copyValues(from: PCKCarePlan, to: PCKCarePlan) throws -> PCKCarePlan",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/debugdescription-1322a",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/debugdescription-91bju",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/description-1scc3",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/description-7ps6i",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/delete()",
                    "title" : "func delete() async throws -> Self.DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/==(_:_:)",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/fetch()",
                    "title" : "func fetch() async throws -> Self.FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/id-149sm",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/classname-swift.type.property-3wrb8",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/init(uuid:)",
                    "title" : "init?(uuid: UUID?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/id-4cwhg",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/uuid",
                    "title" : "var uuid: UUID?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/canconverttocarekit()",
                    "title" : "func canConvertToCareKit() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/copycommonvalues(from:)",
                    "title" : "func copyCommonValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/encodeobjectable(to:)",
                    "title" : "func encodeObjectable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/createcurrentdateinterval(for:)",
                    "title" : "static func createCurrentDateInterval(for: Date) -> DateInterval",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/first(_:options:)",
                    "title" : "static func first(UUID?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/first(_:options:completion:)",
                    "title" : "static func first(UUID?, options: API.Options, completion: (Result<Self, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/firstpublisher(_:options:)",
                    "title" : "static func firstPublisher(UUID?, options: API.Options) -> Future<Self, Error>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/pckobjectable-implementations",
                "title" : "PCKObjectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/copyversionedvalues(from:)",
                    "title" : "func copyVersionedValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/encodeversionable(to:)",
                    "title" : "func encodeVersionable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/find(for:options:)",
                    "title" : "func find(for: Date, options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/find(for:options:callbackqueue:completion:)",
                    "title" : "func find(for: Date, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/findpublisher(for:options:)",
                    "title" : "func findPublisher(for: Date, options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/save(options:completion:)",
                    "title" : "func save(options: API.Options, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/savepublisher(for:options:)",
                    "title" : "func savePublisher(for: Date, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/query(for:)",
                    "title" : "static func query(for: Date) -> Query<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/pckversionable-implementations",
                "title" : "PCKVersionable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/debugdescription-8o42h",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/description-5j1cs",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/id-1rs5v",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation(_:key:with:)-swift.method-75fry",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation(_:key:with:)-swift.method-9tsfk",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/query",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/query(_:)-24h2u",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/query(_:)-8kbn3",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/queryrelations(_:parent:)-8ttqt",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/queryrelations(_:parent:)-9775",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation(_:key:with:)-swift.type.method-5dk5f",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/relation(_:key:with:)-swift.type.method-5x2po",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcareplan\/save()",
                    "title" : "func save() async throws -> Self.SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcareplan\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckcareplan",
            "title" : "PCKCarePlan",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/uuid",
                "title" : "var uuid: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/vector",
                "title" : "var vector: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/merge(with:)",
                "title" : "func merge(with: PCKClock) throws -> PCKClock",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckclock\/classname-swift.type.property-7tzyb",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/debugdescription-3rkzl",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/debugdescription-5ljob",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/description-4pkj4",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/description-96w3u",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/delete()",
                    "title" : "func delete() async throws -> Self.DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/fetch()",
                    "title" : "func fetch() async throws -> Self.FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/id-22610",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/classname-swift.type.property-1ee2o",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/debugdescription-3evm5",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/description-448wq",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/id-7e2gb",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation(_:key:with:)-swift.method-1vlke",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation(_:key:with:)-swift.method-8eq09",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/query",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/query(_:)-40qe9",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/query(_:)-9zily",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/queryrelations(_:parent:)-88a18",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/queryrelations(_:parent:)-9sbb0",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation(_:key:with:)-swift.type.method-4m47d",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/relation(_:key:with:)-swift.type.method-8pey7",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckclock\/save()",
                    "title" : "func save() async throws -> Self.SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckclock\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckclock",
            "title" : "PCKClock",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/address",
                "title" : "var address: OCKPostalAddress?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/careplan",
                "title" : "var carePlan: PCKCarePlan?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/category",
                "title" : "var category: OCKContactCategory?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/clock",
                "title" : "var clock: PCKClock?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/effectivedate",
                "title" : "var effectiveDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/emailaddresses",
                "title" : "var emailAddresses: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/encodingforparse",
                "title" : "var encodingForParse: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/entityid",
                "title" : "var entityId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/logicalclock",
                "title" : "var logicalClock: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/messagingnumbers",
                "title" : "var messagingNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/name",
                "title" : "var name: PersonNameComponents?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/nextversions",
                "title" : "var nextVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/organization",
                "title" : "var organization: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/othercontactinfo",
                "title" : "var otherContactInfo: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/phonenumbers",
                "title" : "var phoneNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/previousversions",
                "title" : "var previousVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/role",
                "title" : "var role: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/timezone",
                "title" : "var timezone: TimeZone?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/addtocloud(_:completion:)",
                "title" : "func addToCloud(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/converttocarekit()",
                "title" : "func convertToCareKit() throws -> OCKContact",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/new(with:)",
                "title" : "func new(with: OCKEntity) throws -> PCKContact",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/pullrevisions(since:cloudclock:remoteid:mergerevision:)",
                "title" : "func pullRevisions(since: Int, cloudClock: OCKRevisionRecord.KnowledgeVector, remoteID: String, mergeRevision: (Result<OCKRevisionRecord, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/pushrevision(_:cloudclock:remoteid:completion:)",
                "title" : "func pushRevision(ParseRemoteDelegate?, cloudClock: Int, remoteID: String, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/classname-swift.type.property-2bf0l",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/copycarekit(_:)",
                "title" : "static func copyCareKit(OCKAnyContact) throws -> PCKContact",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckcontact\/copyvalues(from:to:)",
                "title" : "static func copyValues(from: PCKContact, to: PCKContact) throws -> PCKContact",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/debugdescription-6nvch",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/debugdescription-8rtx5",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/description-1aiqz",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/description-274v0",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/delete()",
                    "title" : "func delete() async throws -> Self.DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/==(_:_:)",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/fetch()",
                    "title" : "func fetch() async throws -> Self.FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/id-7p08v",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/classname-swift.type.property-5m3o8",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/init(uuid:)",
                    "title" : "init?(uuid: UUID?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/id-1bxed",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/uuid",
                    "title" : "var uuid: UUID?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/canconverttocarekit()",
                    "title" : "func canConvertToCareKit() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/copycommonvalues(from:)",
                    "title" : "func copyCommonValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/encodeobjectable(to:)",
                    "title" : "func encodeObjectable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/createcurrentdateinterval(for:)",
                    "title" : "static func createCurrentDateInterval(for: Date) -> DateInterval",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/first(_:options:)",
                    "title" : "static func first(UUID?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/first(_:options:completion:)",
                    "title" : "static func first(UUID?, options: API.Options, completion: (Result<Self, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/firstpublisher(_:options:)",
                    "title" : "static func firstPublisher(UUID?, options: API.Options) -> Future<Self, Error>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/pckobjectable-implementations",
                "title" : "PCKObjectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/copyversionedvalues(from:)",
                    "title" : "func copyVersionedValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/encodeversionable(to:)",
                    "title" : "func encodeVersionable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/find(for:options:)",
                    "title" : "func find(for: Date, options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/find(for:options:callbackqueue:completion:)",
                    "title" : "func find(for: Date, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/findpublisher(for:options:)",
                    "title" : "func findPublisher(for: Date, options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/save(options:completion:)",
                    "title" : "func save(options: API.Options, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/savepublisher(for:options:)",
                    "title" : "func savePublisher(for: Date, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/query(for:)",
                    "title" : "static func query(for: Date) -> Query<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/pckversionable-implementations",
                "title" : "PCKVersionable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/debugdescription-6lk23",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/description-9d09e",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/id-42eun",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation(_:key:with:)-swift.method-74psx",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation(_:key:with:)-swift.method-8ew7r",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/query",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/query(_:)-16lhn",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/query(_:)-6xvfr",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/queryrelations(_:parent:)-49xm",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/queryrelations(_:parent:)-8u8mz",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation(_:key:with:)-swift.type.method-88vyu",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/relation(_:key:with:)-swift.type.method-oeuo",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckcontact\/save()",
                    "title" : "func save() async throws -> Self.SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckcontact\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckcontact",
            "title" : "PCKContact",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/careplan",
                "title" : "var carePlan: PCKCarePlan?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/clock",
                "title" : "var clock: PCKClock?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/effectivedate",
                "title" : "var effectiveDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/encodingforparse",
                "title" : "var encodingForParse: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/entityid",
                "title" : "var entityId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/healthkitlinkage",
                "title" : "var healthKitLinkage: OCKHealthKitLinkage?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/impactsadherence",
                "title" : "var impactsAdherence: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/logicalclock",
                "title" : "var logicalClock: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/nextversions",
                "title" : "var nextVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/previousversions",
                "title" : "var previousVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/schedule",
                "title" : "var schedule: OCKSchedule?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/timezone",
                "title" : "var timezone: TimeZone?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/addtocloud(_:completion:)",
                "title" : "func addToCloud(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/converttocarekit()",
                "title" : "func convertToCareKit() throws -> OCKHealthKitTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/new(with:)",
                "title" : "func new(with: OCKEntity) throws -> PCKHealthKitTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/pullrevisions(since:cloudclock:remoteid:mergerevision:)",
                "title" : "func pullRevisions(since: Int, cloudClock: OCKRevisionRecord.KnowledgeVector, remoteID: String, mergeRevision: (Result<OCKRevisionRecord, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/pushrevision(_:cloudclock:remoteid:completion:)",
                "title" : "func pushRevision(ParseRemoteDelegate?, cloudClock: Int, remoteID: String, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/classname-swift.type.property-54jrc",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/copycarekit(_:)",
                "title" : "static func copyCareKit(OCKAnyTask) throws -> PCKHealthKitTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/copyvalues(from:to:)",
                "title" : "static func copyValues(from: PCKHealthKitTask, to: PCKHealthKitTask) throws -> PCKHealthKitTask",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/debugdescription-2koom",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/debugdescription-459us",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/description-3wz8a",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/description-4dn6d",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/delete()",
                    "title" : "func delete() async throws -> Self.DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/==(_:_:)",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/fetch()",
                    "title" : "func fetch() async throws -> Self.FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/id-36xo1",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/classname-swift.type.property-1jy0u",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/init(uuid:)",
                    "title" : "init?(uuid: UUID?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/id-4s2xl",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/uuid",
                    "title" : "var uuid: UUID?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/canconverttocarekit()",
                    "title" : "func canConvertToCareKit() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/copycommonvalues(from:)",
                    "title" : "func copyCommonValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/encodeobjectable(to:)",
                    "title" : "func encodeObjectable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/createcurrentdateinterval(for:)",
                    "title" : "static func createCurrentDateInterval(for: Date) -> DateInterval",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/first(_:options:)",
                    "title" : "static func first(UUID?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/first(_:options:completion:)",
                    "title" : "static func first(UUID?, options: API.Options, completion: (Result<Self, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/firstpublisher(_:options:)",
                    "title" : "static func firstPublisher(UUID?, options: API.Options) -> Future<Self, Error>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/pckobjectable-implementations",
                "title" : "PCKObjectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/copyversionedvalues(from:)",
                    "title" : "func copyVersionedValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/encodeversionable(to:)",
                    "title" : "func encodeVersionable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/find(for:options:)",
                    "title" : "func find(for: Date, options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/find(for:options:callbackqueue:completion:)",
                    "title" : "func find(for: Date, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/findpublisher(for:options:)",
                    "title" : "func findPublisher(for: Date, options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/save(options:completion:)",
                    "title" : "func save(options: API.Options, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/savepublisher(for:options:)",
                    "title" : "func savePublisher(for: Date, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/query(for:)",
                    "title" : "static func query(for: Date) -> Query<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/pckversionable-implementations",
                "title" : "PCKVersionable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/debugdescription-3hqar",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/description-38en1",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/id-9v9v5",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation(_:key:with:)-swift.method-3j47h",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation(_:key:with:)-swift.method-3jmx5",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/query",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/query(_:)-6o5y1",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/query(_:)-6sn2p",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/queryrelations(_:parent:)-68bhc",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/queryrelations(_:parent:)-8czpw",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation(_:key:with:)-swift.type.method-45h8j",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/relation(_:key:with:)-swift.type.method-8rup2",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/save()",
                    "title" : "func save() async throws -> Self.SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckhealthkittask\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckhealthkittask",
            "title" : "PCKHealthKitTask",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/clock",
                "title" : "var clock: PCKClock?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/effectivedate",
                "title" : "var effectiveDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/encodingforparse",
                "title" : "var encodingForParse: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/entityid",
                "title" : "var entityId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/logicalclock",
                "title" : "var logicalClock: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/nextversions",
                "title" : "var nextVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/previousversions",
                "title" : "var previousVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/task",
                "title" : "var task: PCKTask?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/taskuuid",
                "title" : "var taskUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/timezone",
                "title" : "var timezone: TimeZone?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/addtocloud(_:completion:)",
                "title" : "func addToCloud(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/converttocarekit()",
                "title" : "func convertToCareKit() throws -> OCKOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/copyrelational(_:)",
                "title" : "func copyRelational(PCKOutcome) -> PCKOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/fetchlocaldataandsave(_:completion:)",
                "title" : "func fetchLocalDataAndSave(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/findoutcomesinbackground(completion:)",
                "title" : "func findOutcomesInBackground(completion: ([PCKOutcome]?, Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/new(with:)",
                "title" : "func new(with: OCKEntity) throws -> PCKOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/prepareencodingrelational(_:)",
                "title" : "func prepareEncodingRelational(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/pullrevisions(since:cloudclock:remoteid:mergerevision:)",
                "title" : "func pullRevisions(since: Int, cloudClock: OCKRevisionRecord.KnowledgeVector, remoteID: String, mergeRevision: (Result<OCKRevisionRecord, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/pushrevision(_:cloudclock:remoteid:completion:)",
                "title" : "func pushRevision(ParseRemoteDelegate?, cloudClock: Int, remoteID: String, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/classname-swift.type.property-631pn",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/copycarekit(_:)",
                "title" : "static func copyCareKit(OCKAnyOutcome) throws -> PCKOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/copyvalues(from:to:)",
                "title" : "static func copyValues(from: PCKOutcome, to: PCKOutcome) throws -> PCKOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/querynotdeleted()",
                "title" : "static func queryNotDeleted() -> Query<PCKOutcome>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/tagwithid(_:)",
                "title" : "static func tagWithId(OCKOutcome) -> OCKOutcome?",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/debugdescription-1bzhr",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/debugdescription-92lu1",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/description-8skrr",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/description-9dr1g",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/delete()",
                    "title" : "func delete() async throws -> Self.DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/==(_:_:)",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/fetch()",
                    "title" : "func fetch() async throws -> Self.FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/id-97u1q",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/classname-swift.type.property-2jafh",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/init(uuid:)",
                    "title" : "init?(uuid: UUID?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/id-3krp8",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/uuid",
                    "title" : "var uuid: UUID?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/canconverttocarekit()",
                    "title" : "func canConvertToCareKit() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/copycommonvalues(from:)",
                    "title" : "func copyCommonValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/encodeobjectable(to:)",
                    "title" : "func encodeObjectable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/createcurrentdateinterval(for:)",
                    "title" : "static func createCurrentDateInterval(for: Date) -> DateInterval",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/first(_:options:)",
                    "title" : "static func first(UUID?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/first(_:options:completion:)",
                    "title" : "static func first(UUID?, options: API.Options, completion: (Result<Self, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/firstpublisher(_:options:)",
                    "title" : "static func firstPublisher(UUID?, options: API.Options) -> Future<Self, Error>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/pckobjectable-implementations",
                "title" : "PCKObjectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/copyversionedvalues(from:)",
                    "title" : "func copyVersionedValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/encodeversionable(to:)",
                    "title" : "func encodeVersionable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/find(for:options:)",
                    "title" : "func find(for: Date, options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/find(for:options:callbackqueue:completion:)",
                    "title" : "func find(for: Date, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/findpublisher(for:options:)",
                    "title" : "func findPublisher(for: Date, options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/save(options:completion:)",
                    "title" : "func save(options: API.Options, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/savepublisher(for:options:)",
                    "title" : "func savePublisher(for: Date, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/query(for:)",
                    "title" : "static func query(for: Date) -> Query<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/pckversionable-implementations",
                "title" : "PCKVersionable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/debugdescription-55iba",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/description-2g249",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/id-95qyw",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation(_:key:with:)-swift.method-1stz3",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation(_:key:with:)-swift.method-a7bo",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/query",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/query(_:)-4q37d",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/query(_:)-5inaj",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/queryrelations(_:parent:)-5tiaz",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/queryrelations(_:parent:)-93vsm",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation(_:key:with:)-swift.type.method-4hsi6",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/relation(_:key:with:)-swift.type.method-7kefg",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckoutcome\/save()",
                    "title" : "func save() async throws -> Self.SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckoutcome\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckoutcome",
            "title" : "PCKOutcome",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/allergies",
                "title" : "var allergies: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/birthday",
                "title" : "var birthday: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/clock",
                "title" : "var clock: PCKClock?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/effectivedate",
                "title" : "var effectiveDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/encodingforparse",
                "title" : "var encodingForParse: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/entityid",
                "title" : "var entityId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/logicalclock",
                "title" : "var logicalClock: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/name",
                "title" : "var name: PersonNameComponents?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/nextversions",
                "title" : "var nextVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/previousversions",
                "title" : "var previousVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/sex",
                "title" : "var sex: OCKBiologicalSex?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/timezone",
                "title" : "var timezone: TimeZone?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/addtocloud(_:completion:)",
                "title" : "func addToCloud(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/converttocarekit()",
                "title" : "func convertToCareKit() throws -> OCKPatient",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/new(with:)",
                "title" : "func new(with: OCKEntity) throws -> PCKPatient",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/pullrevisions(since:cloudclock:remoteid:mergerevision:)",
                "title" : "func pullRevisions(since: Int, cloudClock: OCKRevisionRecord.KnowledgeVector, remoteID: String, mergeRevision: (Result<OCKRevisionRecord, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/pushrevision(_:cloudclock:remoteid:completion:)",
                "title" : "func pushRevision(ParseRemoteDelegate?, cloudClock: Int, remoteID: String, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/classname-swift.type.property-5v375",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/copycarekit(_:)",
                "title" : "static func copyCareKit(OCKAnyPatient) throws -> PCKPatient",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckpatient\/copyvalues(from:to:)",
                "title" : "static func copyValues(from: PCKPatient, to: PCKPatient) throws -> PCKPatient",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/debugdescription-1w1d3",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/debugdescription-9koy8",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/description-2h9r",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/description-7damy",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/delete()",
                    "title" : "func delete() async throws -> Self.DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/==(_:_:)",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/fetch()",
                    "title" : "func fetch() async throws -> Self.FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/id-44nt2",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/classname-swift.type.property-c49h",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/init(uuid:)",
                    "title" : "init?(uuid: UUID?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/id-27w7j",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/uuid",
                    "title" : "var uuid: UUID?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/canconverttocarekit()",
                    "title" : "func canConvertToCareKit() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/copycommonvalues(from:)",
                    "title" : "func copyCommonValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/encodeobjectable(to:)",
                    "title" : "func encodeObjectable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/createcurrentdateinterval(for:)",
                    "title" : "static func createCurrentDateInterval(for: Date) -> DateInterval",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/first(_:options:)",
                    "title" : "static func first(UUID?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/first(_:options:completion:)",
                    "title" : "static func first(UUID?, options: API.Options, completion: (Result<Self, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/firstpublisher(_:options:)",
                    "title" : "static func firstPublisher(UUID?, options: API.Options) -> Future<Self, Error>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/pckobjectable-implementations",
                "title" : "PCKObjectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/copyversionedvalues(from:)",
                    "title" : "func copyVersionedValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/encodeversionable(to:)",
                    "title" : "func encodeVersionable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/find(for:options:)",
                    "title" : "func find(for: Date, options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/find(for:options:callbackqueue:completion:)",
                    "title" : "func find(for: Date, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/findpublisher(for:options:)",
                    "title" : "func findPublisher(for: Date, options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/save(options:completion:)",
                    "title" : "func save(options: API.Options, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/savepublisher(for:options:)",
                    "title" : "func savePublisher(for: Date, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/query(for:)",
                    "title" : "static func query(for: Date) -> Query<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/pckversionable-implementations",
                "title" : "PCKVersionable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/debugdescription-cyfc",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/description-5mlwx",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/id-2hw90",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation(_:key:with:)-swift.method-2cvkn",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation(_:key:with:)-swift.method-35lw4",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/query",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/query(_:)-5kir3",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/query(_:)-ww3a",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/queryrelations(_:parent:)-22884",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/queryrelations(_:parent:)-78wa4",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation(_:key:with:)-swift.type.method-2kuvv",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/relation(_:key:with:)-swift.type.method-5d0dh",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckpatient\/save()",
                    "title" : "func save() async throws -> Self.SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckpatient\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckpatient",
            "title" : "PCKPatient",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/careplan",
                "title" : "var carePlan: PCKCarePlan?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/clock",
                "title" : "var clock: PCKClock?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/effectivedate",
                "title" : "var effectiveDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/encodingforparse",
                "title" : "var encodingForParse: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/entityid",
                "title" : "var entityId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/impactsadherence",
                "title" : "var impactsAdherence: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/logicalclock",
                "title" : "var logicalClock: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/nextversions",
                "title" : "var nextVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/previousversions",
                "title" : "var previousVersions: [Pointer<`Self`>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/schedule",
                "title" : "var schedule: OCKSchedule?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/timezone",
                "title" : "var timezone: TimeZone?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/addtocloud(_:completion:)",
                "title" : "func addToCloud(ParseRemoteDelegate?, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/converttocarekit()",
                "title" : "func convertToCareKit() throws -> OCKTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/new(with:)",
                "title" : "func new(with: OCKEntity) throws -> PCKTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/pullrevisions(since:cloudclock:remoteid:mergerevision:)",
                "title" : "func pullRevisions(since: Int, cloudClock: OCKRevisionRecord.KnowledgeVector, remoteID: String, mergeRevision: (Result<OCKRevisionRecord, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/pushrevision(_:cloudclock:remoteid:completion:)",
                "title" : "func pushRevision(ParseRemoteDelegate?, cloudClock: Int, remoteID: String, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/classname-swift.type.property-9lg1d",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/copycarekit(_:)",
                "title" : "static func copyCareKit(OCKAnyTask) throws -> PCKTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pcktask\/copyvalues(from:to:)",
                "title" : "static func copyValues(from: PCKTask, to: PCKTask) throws -> PCKTask",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/debugdescription-1vljv",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/debugdescription-5gccd",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/description-7wow",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/description-qnsz",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/delete()",
                    "title" : "func delete() async throws -> Self.DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/==(_:_:)",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/fetch()",
                    "title" : "func fetch() async throws -> Self.FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/id-654yo",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/classname-swift.type.property-8fnfo",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/init(uuid:)",
                    "title" : "init?(uuid: UUID?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/id-9f6vb",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/uuid",
                    "title" : "var uuid: UUID?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/canconverttocarekit()",
                    "title" : "func canConvertToCareKit() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/copycommonvalues(from:)",
                    "title" : "func copyCommonValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/encodeobjectable(to:)",
                    "title" : "func encodeObjectable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/createcurrentdateinterval(for:)",
                    "title" : "static func createCurrentDateInterval(for: Date) -> DateInterval",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/first(_:options:)",
                    "title" : "static func first(UUID?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/first(_:options:completion:)",
                    "title" : "static func first(UUID?, options: API.Options, completion: (Result<Self, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/firstpublisher(_:options:)",
                    "title" : "static func firstPublisher(UUID?, options: API.Options) -> Future<Self, Error>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/pckobjectable-implementations",
                "title" : "PCKObjectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/copyversionedvalues(from:)",
                    "title" : "func copyVersionedValues(from: Self)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/encodeversionable(to:)",
                    "title" : "func encodeVersionable(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/find(for:options:)",
                    "title" : "func find(for: Date, options: API.Options) async throws -> [Self]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/find(for:options:callbackqueue:completion:)",
                    "title" : "func find(for: Date, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/findpublisher(for:options:)",
                    "title" : "func findPublisher(for: Date, options: API.Options) -> Future<[Self], ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/save(options:completion:)",
                    "title" : "func save(options: API.Options, completion: (Result<PCKSynchronizable, Error>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/savepublisher(for:options:)",
                    "title" : "func savePublisher(for: Date, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/query(for:)",
                    "title" : "static func query(for: Date) -> Query<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/pckversionable-implementations",
                "title" : "PCKVersionable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/debugdescription-18n20",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/description-9t4lm",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/id-9po9j",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation(_:key:with:)-swift.method-466w3",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation(_:key:with:)-swift.method-6c4y7",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/query",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/query(_:)-1512j",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/query(_:)-1716z",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/queryrelations(_:parent:)-246bf",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/queryrelations(_:parent:)-4o1nd",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation(_:key:with:)-swift.type.method-3rezj",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/relation(_:key:with:)-swift.type.method-4gg3e",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pcktask\/save()",
                    "title" : "func save() async throws -> Self.SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pcktask\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pcktask",
            "title" : "PCKTask",
            "type" : "struct"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/careplankey\/classname",
                "title" : "static let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/careplankey\/patient",
                "title" : "static let patient: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/careplankey\/title",
                "title" : "static let title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/careplankey",
            "title" : "CarePlanKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/clockkey\/classname",
                "title" : "static let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/clockkey\/uuid",
                "title" : "static let uuid: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/clockkey\/vector",
                "title" : "static let vector: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/clockkey",
            "title" : "ClockKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/address",
                "title" : "static let address: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/careplan",
                "title" : "static let carePlan: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/category",
                "title" : "static let category: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/classname",
                "title" : "static let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/emailaddresses",
                "title" : "static let emailAddresses: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/messagingnumbers",
                "title" : "static let messagingNumbers: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/name",
                "title" : "static let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/organization",
                "title" : "static let organization: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/othercontactinfo",
                "title" : "static let otherContactInfo: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/phonenumbers",
                "title" : "static let phoneNumbers: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/role",
                "title" : "static let role: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/contactkey\/title",
                "title" : "static let title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/contactkey",
            "title" : "ContactKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/asset",
                "title" : "static let asset: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/clock",
                "title" : "static let clock: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/clockuuid",
                "title" : "static let clockUUID: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/createddate",
                "title" : "static let createdDate: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/entityid",
                "title" : "static let entityId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/groupidentifier",
                "title" : "static let groupIdentifier: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/logicalclock",
                "title" : "static let logicalClock: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/notes",
                "title" : "static let notes: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/remoteid",
                "title" : "static let remoteID: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/source",
                "title" : "static let source: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/tags",
                "title" : "static let tags: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/timezone",
                "title" : "static let timezone: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/updateddate",
                "title" : "static let updatedDate: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/objectablekey\/userinfo",
                "title" : "static let userInfo: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/objectablekey",
            "title" : "ObjectableKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/outcomekey\/classname",
                "title" : "static let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/outcomekey\/deleteddate",
                "title" : "static let deletedDate: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/outcomekey\/task",
                "title" : "static let task: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/outcomekey\/taskoccurrenceindex",
                "title" : "static let taskOccurrenceIndex: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/outcomekey\/values",
                "title" : "static let values: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/outcomekey",
            "title" : "OutcomeKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/careplan(_:)",
                "title" : "case carePlan(PCKCarePlan)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/contact(_:)",
                "title" : "case contact(PCKContact)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/healthkittask(_:)",
                "title" : "case healthKitTask(PCKHealthKitTask)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/outcome(_:)",
                "title" : "case outcome(PCKOutcome)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/patient(_:)",
                "title" : "case patient(PCKPatient)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/task(_:)",
                "title" : "case task(PCKTask)",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.property",
                "title" : "var entityType: EntityType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/value",
                "title" : "var value: any PCKVersionable",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/carekit()",
                "title" : "func careKit() throws -> OCKEntity",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckentity\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/careplan",
                    "title" : "case carePlan",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/contact",
                    "title" : "case contact",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/healthkittask",
                    "title" : "case healthKitTask",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/outcome",
                    "title" : "case outcome",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/patient",
                    "title" : "case patient",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/task",
                    "title" : "case task",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckentity\/entitytype-swift.enum",
                "title" : "PCKEntity.EntityType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckentity\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckentity\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckentity",
            "title" : "PCKEntity",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/careplan",
                "title" : "case carePlan",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/contact",
                "title" : "case contact",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/healthkittask",
                "title" : "case healthKitTask",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/outcome",
                "title" : "case outcome",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/patient",
                "title" : "case patient",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/task",
                "title" : "case task",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckstoreclass\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckstoreclass\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parsecarekit\/pckstoreclass\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parsecarekit\/pckstoreclass\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/pckstoreclass",
            "title" : "PCKStoreClass",
            "type" : "enum"
          },
          {
            "path" : "\/documentation\/parsecarekit\/parsecarekitconstants",
            "title" : "ParseCareKitConstants",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parsekey\/acl",
                "title" : "static let ACL: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parsekey\/createdat",
                "title" : "static let createdAt: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parsekey\/name",
                "title" : "static let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parsekey\/objectid",
                "title" : "static let objectId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/parsekey\/updatedat",
                "title" : "static let updatedAt: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/parsekey",
            "title" : "ParseKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/patientkey\/allergies",
                "title" : "static let allergies: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/patientkey\/birthday",
                "title" : "static let birthday: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/patientkey\/classname",
                "title" : "static let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/patientkey\/name",
                "title" : "static let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/patientkey\/sex",
                "title" : "static let sex: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/patientkey",
            "title" : "PatientKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/taskkey\/careplan",
                "title" : "static let carePlan: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/taskkey\/classname",
                "title" : "static let className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/taskkey\/elements",
                "title" : "static let elements: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/taskkey\/impactsadherence",
                "title" : "static let impactsAdherence: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/taskkey\/instructions",
                "title" : "static let instructions: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/taskkey\/title",
                "title" : "static let title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/taskkey",
            "title" : "TaskKey",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parsecarekit\/versionablekey\/deleteddate",
                "title" : "static let deletedDate: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/versionablekey\/effectivedate",
                "title" : "static let effectiveDate: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/versionablekey\/nextversionuuids",
                "title" : "static let nextVersionUUIDs: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parsecarekit\/versionablekey\/previousversionuuids",
                "title" : "static let previousVersionUUIDs: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parsecarekit\/versionablekey",
            "title" : "VersionableKey",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/parsecarekit",
        "title" : "ParseCareKit",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/parsecarekittests",
        "title" : "ParseCareKitTests",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/init(cloudcode:)",
                "title" : "init(cloudCode: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcode",
                "title" : "var cloudCode: T",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/results",
                "title" : "var results: T.ReturnType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/cloudcodetype",
                "title" : "CloudViewModel.CloudCodeType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/cloudviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/cloudviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudviewmodel",
            "title" : "CloudViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/init(serverurl:isdefault:notificationqueue:)",
                "title" : "init(serverURL: URL?, isDefault: Bool, notificationQueue: DispatchQueue) async throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/authenticationdelegate",
                "title" : "var authenticationDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/receivedelegate",
                "title" : "var receiveDelegate: ParseLiveQueryDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/status",
                "title" : "var status: ConnectionStatus",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/closeall()",
                "title" : "func closeAll() async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/ispendingsubscription(_:)",
                "title" : "func isPendingSubscription<T>(Query<T>) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/issubscribed(_:)",
                "title" : "func isSubscribed<T>(Query<T>) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:)",
                "title" : "func open(isUserWantsToConnect: Bool) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/open(isuserwantstoconnect:completion:)",
                "title" : "func open(isUserWantsToConnect: Bool, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/openpublisher(isuserwantstoconnect:)",
                "title" : "func openPublisher(isUserWantsToConnect: Bool) -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/removependingsubscription(_:)",
                "title" : "func removePendingSubscription<T>(Query<T>) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping()",
                "title" : "func sendPing() async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendping(pongreceivehandler:)",
                "title" : "func sendPing(pongReceiveHandler: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/sendpingpublisher()",
                "title" : "func sendPingPublisher() -> Future<Void, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/subscribe(_:)",
                "title" : "func subscribe<T>(T) async throws -> T",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/client",
                "title" : "static var client: ParseLiveQuery?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parselivequery\/defaultclient",
                "title" : "class var defaultClient: ParseLiveQuery?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_(_:_:)-3ydrw",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/connected",
                    "title" : "case connected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/connecting",
                    "title" : "case connecting",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/disconnected",
                    "title" : "case disconnected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/socketestablished",
                    "title" : "case socketEstablished",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/socketnotestablished",
                    "title" : "case socketNotEstablished",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:)-6uyv",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:)-99jnt",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_(_:_:)-4vmc5",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_=(_:_:)-1mh6z",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/_=(_:_:)-84tti",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequery\/connectionstatus",
                "title" : "ParseLiveQuery.ConnectionStatus",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselivequery\/close()",
                    "title" : "func close() async",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequery\/livequerysocketdelegate-implementations",
                "title" : "LiveQuerySocketDelegate Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequery",
            "title" : "ParseLiveQuery",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/results",
                "title" : "var results: [QueryViewModel<T>.Object]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/count(options:)",
                "title" : "func count(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/find(options:)",
                "title" : "func find(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/first(options:)",
                "title" : "func first(options: API.Options) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryviewmodel\/object",
                "title" : "QueryViewModel.Object",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryviewmodel",
            "title" : "QueryViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/event",
                "title" : "var event: (query: Query<T>, event: Event<T>)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/issubscribed",
                "title" : "var isSubscribed: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/isunsubscribed",
                "title" : "var isUnsubscribed: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/subscribed",
                "title" : "var subscribed: (query: Query<T>, isNew: Bool)?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/unsubscribed",
                "title" : "var unsubscribed: Query<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscription\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscription",
            "title" : "Subscription",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/init(query:)",
                "title" : "init(query: Query<T>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/query",
                "title" : "var query: Query<T>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handle(_:_:)",
                "title" : "func handle((T) -> Event<T>, (Query<T>, T) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleevent(_:)",
                "title" : "func handleEvent((Query<T>, Event<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handlesubscribe(_:)",
                "title" : "func handleSubscribe((Query<T>, Bool) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/handleunsubscribe(_:)",
                "title" : "func handleUnsubscribe((Query<T>) -> Void) -> SubscriptionCallback",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/subscriptioncallback\/object",
                "title" : "SubscriptionCallback.Object",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/parseswift\/subscriptioncallback",
            "title" : "SubscriptionCallback",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/cloudcodetype",
                "title" : "CloudCodeType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/init(cloudcode:)",
                "title" : "init(cloudCode: CloudCodeType)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/cloudobservable\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/cloudobservable",
            "title" : "CloudObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/deletable\/deletingtype",
                "title" : "DeletingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/deletable\/delete()-3qlhy",
                        "title" : "func delete() async throws -> DeletingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Deletable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete()-3wdvi",
                "title" : "func delete() async throws -> DeletingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/delete(options:)",
                        "title" : "func delete(options: API.Options) async throws",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/deletable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws -> DeletingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/deletable",
            "title" : "Deletable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/fetchable\/fetchingtype",
                "title" : "FetchingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/fetchable\/fetch()-1n2zp",
                        "title" : "func fetch() async throws -> FetchingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Fetchable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch()-2agid",
                "title" : "func fetch() async throws -> FetchingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/fetch(includekeys:options:)",
                        "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/fetchable\/fetch(includekeys:options:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> FetchingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/fetchable",
            "title" : "Fetchable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/endpoint-6b5zy",
                        "title" : "var endpoint: API.Endpoint",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/endpoint-65g5f",
                "title" : "var endpoint: API.Endpoint",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/issaved",
                "title" : "var isSaved: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/objectable\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-swift.property",
                        "title" : "var className: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/objectable\/classname-swift.type.property-499yb",
                        "title" : "static var className: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "Objectable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/objectable\/classname-swift.type.property-7kg6w",
                "title" : "static var className: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/objectable",
            "title" : "Objectable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/authenticateduser",
                "title" : "AuthenticatedUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked()-97br7",
                        "title" : "func isLinked() async -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked()-5a3xp",
                "title" : "func isLinked() async -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:)",
                "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/link(authdata:options:callbackqueue:completion:)",
                "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/linkpublisher(authdata:options:)",
                "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/login(authdata:options:callbackqueue:completion:)",
                "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseauthentication\/loginpublisher(authdata:options:)",
                "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-li6i",
                        "title" : "func strip() async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip()-7jyyz",
                "title" : "func strip() async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-80krh",
                        "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/strip(_:)-ovl0",
                "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-87j4",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:)-5hyok",
                "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-6aslp",
                        "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(_:options:callbackqueue:completion:)-7rp64",
                "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-2h790",
                        "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:)-8buh1",
                "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-372np",
                        "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlink(options:callbackqueue:completion:)-6gyvj",
                "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-1p5pj",
                        "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(_:options:)-2zjlv",
                "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-9jbvk",
                        "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/unlinkpublisher(options:)-2wrer",
                "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-30q3o",
                        "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseAuthentication Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseauthentication\/islinked(with:)-7d4nj",
                "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseauthentication",
            "title" : "ParseAuthentication",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsecloudtypeable",
            "title" : "ParseCloudTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclouduser\/sessiontoken",
                "title" : "var sessionToken: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclouduser",
            "title" : "ParseCloudUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/returntype",
                "title" : "ReturnType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/functionjobname",
                "title" : "var functionJobName: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel",
                "title" : "var viewModel: CloudViewModel<Self>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:)",
                "title" : "func runFunction(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunction(options:callbackqueue:completion:)",
                "title" : "func runFunction(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/runfunctionpublisher(options:)",
                "title" : "func runFunctionPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:)",
                "title" : "func startJob(options: API.Options) async throws -> ReturnType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjob(options:callbackqueue:completion:)",
                "title" : "func startJob(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ReturnType, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/startjobpublisher(options:)",
                "title" : "func startJobPublisher(options: API.Options) -> Future<ReturnType, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsecloudable\/viewmodel(_:)",
                "title" : "static func viewModel(Self) -> CloudViewModel<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsecloudable",
            "title" : "ParseCloudable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:)",
                "title" : "func save(options: API.Options) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Bool, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<Bool, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfig\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfig",
            "title" : "ParseConfig",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencodable\/description",
                "title" : "var description: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencodable",
            "title" : "ParseEncodable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-6r9at",
                        "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makedummyuploadtask()-71gc1",
                "title" : "func makeDummyUploadTask() throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-52ukn",
                        "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseFileTransferable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/makesuccessfuluploadresponse(_:url:)-h8xr",
                "title" : "func makeSuccessfulUploadResponse(String, url: URL) throws -> (Data, HTTPURLResponse?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:from:completion:)",
                "title" : "func upload(with: URLRequest, from: Data?, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefiletransferable\/upload(with:fromfile:completion:)",
                "title" : "func upload(with: URLRequest, fromFile: URL, completion: (Data?, URLResponse?, URLRequest?, Error?) -> Void) throws -> URLSessionUploadTask",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefiletransferable",
            "title" : "ParseFileTransferable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/init(name:url:)",
                "title" : "init(name: String, url: URL?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionable",
            "title" : "ParseHookFunctionable",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/parseswift\/parsehookparametable",
            "title" : "ParseHookParametable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/usertype",
                "title" : "UserType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/user",
                "title" : "var user: UserType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:)",
                "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuser(options:callbackqueue:completion:)",
                "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/hydrateuserpublisher(options:)",
                "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookrequestable\/options()",
                "title" : "func options() -> API.Options",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookrequestable",
            "title" : "ParseHookRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequestable",
            "title" : "ParseHookTriggerRequestable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(classname:triggername:url:)",
                "title" : "init(className: String, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(object:triggername:url:)",
                "title" : "init<T>(object: T, triggerName: ParseHookTriggerType, url: URL)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/init(triggername:url:)",
                "title" : "init(triggerName: ParseHookTriggerType, url: URL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/triggername",
                "title" : "var triggerName: ParseHookTriggerType?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:)",
                "title" : "func fetchAll(options: API.Options) async throws -> [Self]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.method",
                "title" : "func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchallpublisher(options:)",
                "title" : "func fetchAllPublisher(options: API.Options) -> Future<[Self], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/updatepublisher(options:)",
                "title" : "func updatePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerable\/fetchall(options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func fetchAll(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[Self], ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerable",
            "title" : "ParseHookTriggerable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookable\/url",
                "title" : "var url: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookable",
            "title" : "ParseHookable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appidentifier",
                "title" : "var appIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appname",
                "title" : "var appName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/appversion",
                "title" : "var appVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/badge",
                "title" : "var badge: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/channels",
                "title" : "var channels: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetoken",
                "title" : "var deviceToken: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/devicetype",
                "title" : "var deviceType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/localeidentifier",
                "title" : "var localeIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/parseversion",
                "title" : "var parseVersion: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/timezone",
                "title" : "var timeZone: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/setdevicetoken(_:)",
                "title" : "func setDeviceToken(Data)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/become(_:copyentireinstallation:options:callbackqueue:completion:)",
                "title" : "static func become(String, copyEntireInstallation: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/becomepublisher(_:copyentireinstallation:options:)",
                "title" : "static func becomePublisher(String, copyEntireInstallation: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:)",
                "title" : "static func deleteObjCKeychain(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func deleteObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstallation\/deleteobjckeychainpublisher(options:)",
                "title" : "static func deleteObjCKeychainPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstallation\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstallation\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseinstallation\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstallation",
            "title" : "ParseInstallation",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-7npe",
                        "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/closedsocket(_:reason:)-170q6",
                "title" : "func closedSocket(URLSessionWebSocketTask.CloseCode?, reason: Data?)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-3krd3",
                "title" : "func received(URLSessionTaskTransactionMetrics)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-1f3yl",
                        "title" : "func received(Error)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-798hl",
                        "title" : "func received(URLSessionTaskTransactionMetrics)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:)-4tgno",
                "title" : "func received(Error)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-o1ge",
                        "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/received(_:completionhandler:)-8g2o0",
                "title" : "func received(URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-6cmf4",
                        "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseLiveQueryDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselivequerydelegate\/receivedunsupported(_:socketmessage:)-83dzx",
                "title" : "func receivedUnsupported(Data?, socketMessage: URLSessionWebSocketTask.Message?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselivequerydelegate",
            "title" : "ParseLiveQueryDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/init(objectid:)",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeable-96fqk",
                        "title" : "var mergeable: Self",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeable-1pmms",
                "title" : "var mergeable: Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/operation",
                "title" : "var operation: ParseOperation<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation",
                "title" : "var relation: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/get(_:)",
                "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.method",
                "title" : "func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.method",
                "title" : "func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.method",
                "title" : "func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/hassameobjectid(as:)",
                "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/isdirtyforkey(_:)",
                "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseinstallation\/merge(with:)",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseInstallation Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-4hjo0",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/merge(with:)",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseuser\/merge(with:)",
                        "title" : "func merge(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/merge(with:)-6romo",
                "title" : "func merge(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseinstallation\/mergeparse(with:)",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseInstallation Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-6csd5",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/mergeparse(with:)",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseuser\/mergeparse(with:)",
                        "title" : "func mergeParse(with: Self) throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseUser Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/mergeparse(with:)-9yft4",
                "title" : "func mergeParse(with: Self) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:child:)",
                "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:classname:)",
                "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:)",
                "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.method-1w6vg",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.method-4e4g",
                "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert()",
                "title" : "func revert() throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/revert(_:)",
                "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/savepublisher(ignoringcustomobjectidconfig:options:)",
                "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/set(_:to:)",
                "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-1tqz7",
                        "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/shouldrestorekey(_:original:)-9ntkl",
                "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/topointer()",
                "title" : "func toPointer() throws -> Pointer<Self>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query",
                "title" : "static var query: Query<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getdecoder()-swift.type.method",
                "title" : "static func getDecoder() -> JSONDecoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getencoder()-swift.type.method",
                "title" : "static func getEncoder() -> ParseEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/getjsonencoder()-swift.type.method",
                "title" : "static func getJSONEncoder() -> JSONEncoder",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-27shx",
                "title" : "static func query([QueryConstraint]) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/query(_:)-3tnph",
                "title" : "static func query(QueryConstraint...) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-87cdn",
                "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/queryrelations(_:parent:)-xpkl",
                "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.type.method-47yjk",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseobject\/relation(_:key:with:)-swift.type.method-98tek",
                "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseobject\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseobject\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseobject",
            "title" : "ParseObject",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationable\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationable\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationable\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationable\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationable",
            "title" : "ParseOperationable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/delete(valuefor:)",
                "title" : "func delete(valueFor: String) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/deleteall()",
                "title" : "func deleteAll() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/get(valuefor:)",
                "title" : "func get<T>(valueFor: String) throws -> T?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseprimitivestorable\/set(_:for:)",
                "title" : "func set<T>(T, for: String) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseprimitivestorable",
            "title" : "ParsePrimitiveStorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplepayloadable\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplepayloadable",
            "title" : "ParsePushApplePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasepayloadable",
            "title" : "ParsePushFirebasePayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadable\/init()",
                "title" : "init()",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadable",
            "title" : "ParsePushPayloadable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtype",
                "title" : "PushType",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/payload",
                "title" : "var payload: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/query",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatusable\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatusable\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatusable",
            "title" : "ParsePushStatusable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsequeryscorable\/score",
                "title" : "var score: Double?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsequeryscorable",
            "title" : "ParseQueryScorable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelationoperationable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelationoperationable\/objects",
                "title" : "var objects: [Pointer<Object>]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserelationoperationable",
            "title" : "ParseRelationOperationable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/roleuser",
                "title" : "RoleUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:)-3m5k4",
                        "title" : "init(name: String) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:)-56bux",
                "title" : "init(name: String) throws",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-8u3ui",
                        "title" : "init(name: String, acl: ParseACL) throws",
                        "type" : "init"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/init(name:acl:)-3h6fq",
                "title" : "init(name: String, acl: ParseACL) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/name",
                "title" : "var name: String?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/roles-1kfkg",
                        "title" : "var roles: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/roles-7omk",
                "title" : "var roles: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parserole\/users-6uxer",
                        "title" : "var users: ParseRelation<Self>?",
                        "type" : "property"
                      }
                    ],
                    "title" : "ParseRole Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/users-7o4v6",
                "title" : "var users: ParseRelation<Self>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryroles()",
                "title" : "func queryRoles() throws -> Query<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserole\/queryusers()",
                "title" : "func queryUsers() throws -> Query<RoleUser>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserole\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserole\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserole\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserole\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserole",
            "title" : "ParseRole",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessionuser",
                "title" : "SessionUser",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/createdwith",
                "title" : "var createdWith: [String : String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/expiresat",
                "title" : "var expiresAt: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/installationid",
                "title" : "var installationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/restricted",
                "title" : "var restricted: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/sessiontoken",
                "title" : "var sessionToken: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsesession\/user",
                "title" : "var user: SessionUser",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsesession\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsesession\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsesession\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsesession",
            "title" : "ParseSession",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetypeable\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetypeable\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetypeable",
            "title" : "ParseTypeable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.property",
                "title" : "var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.property",
                "title" : "var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/authdata",
                "title" : "var authData: [String : [String : String]?]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/email",
                "title" : "var email: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/emailverified",
                "title" : "var emailVerified: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.property",
                "title" : "var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.property",
                "title" : "var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.property",
                "title" : "var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.property",
                "title" : "var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.property",
                "title" : "var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.property",
                "title" : "var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/password",
                "title" : "var password: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.property",
                "title" : "var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.property",
                "title" : "var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/username",
                "title" : "var username: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-swift.method",
                "title" : "func become(sessionToken: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.method",
                "title" : "func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/becomepublisher(sessiontoken:options:)-swift.method",
                "title" : "func becomePublisher(sessionToken: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/createpublisher(options:)",
                "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/islinked(with:)",
                "title" : "func isLinked(with: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:)",
                "title" : "func replace(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replace(options:callbackqueue:completion:)",
                "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/replacepublisher(options:)",
                "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/savepublisher(options:ignoringcustomobjectidconfig:)",
                "title" : "func savePublisher(options: API.Options, ignoringCustomObjectIdConfig: Bool) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:)",
                "title" : "func signup(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(options:callbackqueue:completion:)",
                "title" : "func signup(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(options:)",
                "title" : "func signupPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/strip(_:)",
                "title" : "func strip(String) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:)",
                "title" : "func unlink(String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlink(_:options:callbackqueue:completion:)",
                "title" : "func unlink(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/unlinkpublisher(_:options:)",
                "title" : "func unlinkPublisher(String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/anonymous-swift.type.property",
                "title" : "static var anonymous: ParseAnonymous<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/apple-swift.type.property",
                "title" : "static var apple: ParseApple<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/facebook-swift.type.property",
                "title" : "static var facebook: ParseFacebook<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/github-swift.type.property",
                "title" : "static var github: ParseGitHub<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/google-swift.type.property",
                "title" : "static var google: ParseGoogle<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/instagram-swift.type.property",
                "title" : "static var instagram: ParseInstagram<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/ldap-swift.type.property",
                "title" : "static var ldap: ParseLDAP<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkedin-swift.type.property",
                "title" : "static var linkedin: ParseLinkedIn<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/spotify-swift.type.property",
                "title" : "static var spotify: ParseSpotify<Self>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/twitter-swift.type.property",
                "title" : "static var twitter: ParseTwitter<Self>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:)-swift.type.method",
                "title" : "static func become(sessionToken: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/become(sessiontoken:options:callbackqueue:completion:)-swift.type.method",
                "title" : "static func become(sessionToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/becomepublisher(sessiontoken:options:)-swift.type.method",
                "title" : "static func becomePublisher(sessionToken: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/current()",
                "title" : "static func current() async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:)",
                "title" : "static func link(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/link(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func link(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/linkpublisher(_:authdata:options:)",
                "title" : "static func linkPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:)",
                "title" : "static func login(String, authData: [String : String], options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(_:authdata:options:callbackqueue:completion:)",
                "title" : "static func login(String, authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:email:password:authdata:options:)",
                "title" : "static func login(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/login(username:email:password:authdata:options:callbackqueue:completion:)",
                "title" : "static func login(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginas(objectid:options:)",
                "title" : "static func loginAs(objectId: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginas(objectid:options:callbackqueue:completion:)",
                "title" : "static func loginAs(objectId: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginaspublisher(objectid:options:)",
                "title" : "static func loginAsPublisher(objectId: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(_:authdata:options:)",
                "title" : "static func loginPublisher(String, authData: [String : String], options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginpublisher(username:email:password:authdata:options:)",
                "title" : "static func loginPublisher(username: String?, email: String?, password: String, authData: [String : [String : String]?]?, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychain(options:callbackqueue:completion:)",
                "title" : "static func loginUsingObjCKeychain(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/loginusingobjckeychainpublisher(options:)",
                "title" : "static func loginUsingObjCKeychainPublisher(options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:)",
                "title" : "static func logout(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logout(options:callbackqueue:completion:)",
                "title" : "static func logout(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/logoutpublisher(options:)",
                "title" : "static func logoutPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:)",
                "title" : "static func passwordReset(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordreset(email:options:callbackqueue:completion:)",
                "title" : "static func passwordReset(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/passwordresetpublisher(email:options:)",
                "title" : "static func passwordResetPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/sessiontoken()",
                "title" : "static func sessionToken() async throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:)",
                "title" : "static func signup(username: String, password: String, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signup(username:password:options:callbackqueue:completion:)",
                "title" : "static func signup(username: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/signuppublisher(username:password:options:)",
                "title" : "static func signupPublisher(username: String, password: String, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:)",
                "title" : "static func verificationEmail(email: String, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemail(email:options:callbackqueue:completion:)",
                "title" : "static func verificationEmail(email: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verificationemailpublisher(email:options:)",
                "title" : "static func verificationEmailPublisher(email: String, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options) async throws -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypassword(password:usingpost:options:callbackqueue:completion:)",
                "title" : "static func verifyPassword(password: String, usingPost: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseuser\/verifypasswordpublisher(password:usingpost:options:)",
                "title" : "static func verifyPasswordPublisher(password: String, usingPost: Bool, options: API.Options) -> Future<Self, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseuser\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseuser\/classname",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseuser\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseuser",
            "title" : "ParseUser",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/count(options:)",
                "title" : "func count(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/find(options:)",
                "title" : "func find(options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryobservable\/first(options:)",
                "title" : "func first(options: API.Options) async",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryobservable",
            "title" : "QueryObservable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/object",
                "title" : "Object",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/init(query:)",
                "title" : "init(query: Query<Object>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/query",
                "title" : "var query: Query<Object>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didreceive(_:)",
                "title" : "func didReceive(Data) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didsubscribe(_:)",
                "title" : "func didSubscribe(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/querysubscribable\/didunsubscribe()",
                "title" : "func didUnsubscribe()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/querysubscribable",
            "title" : "QuerySubscribable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/resulttype",
                "title" : "ResultType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:)",
                "title" : "func count(options: API.Options) async throws -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/count(options:callbackqueue:completion:)",
                "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:)",
                "title" : "func find(options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/find(options:callbackqueue:completion:)",
                "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:)",
                "title" : "func first(options: API.Options) async throws -> ResultType",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/queryable\/first(options:callbackqueue:completion:)",
                "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryable",
            "title" : "Queryable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/savable\/savingtype",
                "title" : "SavingType",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/savable\/save()-6n6v7",
                        "title" : "func save() async throws -> SavingType",
                        "type" : "method"
                      }
                    ],
                    "title" : "Savable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save()-51ej7",
                "title" : "func save() async throws -> SavingType",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/parseswift\/parseobject\/save(options:)",
                        "title" : "func save(options: API.Options) async throws -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "ParseObject Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/parseswift\/savable\/save(options:)",
                "title" : "func save(options: API.Options) async throws -> SavingType",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/savable",
            "title" : "Savable",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/api\/options",
                "title" : "API.Options",
                "type" : "typealias"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/aggregate(classname:)",
                    "title" : "case aggregate(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/any(_:)",
                    "title" : "case any(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/batch",
                    "title" : "case batch",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/config",
                    "title" : "case config",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/event(event:)",
                    "title" : "case event(event: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/file(filename:)",
                    "title" : "case file(fileName: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/functions(name:)",
                    "title" : "case functions(name: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/health",
                    "title" : "case health",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hookfunction(request:)",
                    "title" : "case hookFunction(request: FunctionRequest)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hookfunctions",
                    "title" : "case hookFunctions",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hooktrigger(request:)",
                    "title" : "case hookTrigger(request: TriggerRequest)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/hooktriggers",
                    "title" : "case hookTriggers",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/installation(objectid:)",
                    "title" : "case installation(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/installations",
                    "title" : "case installations",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/jobs(name:)",
                    "title" : "case jobs(name: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/login",
                    "title" : "case login",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/loginas",
                    "title" : "case loginAs",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/logout",
                    "title" : "case logout",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/object(classname:objectid:)",
                    "title" : "case object(className: String, objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/objects(classname:)",
                    "title" : "case objects(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/passwordreset",
                    "title" : "case passwordReset",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/purge(classname:)",
                    "title" : "case purge(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/push",
                    "title" : "case push",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/role(objectid:)",
                    "title" : "case role(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/roles",
                    "title" : "case roles",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/schema(classname:)",
                    "title" : "case schema(className: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/schemas",
                    "title" : "case schemas",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/session(objectid:)",
                    "title" : "case session(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/sessions",
                    "title" : "case sessions",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/user(objectid:)",
                    "title" : "case user(objectId: String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/users",
                    "title" : "case users",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/verificationemail",
                    "title" : "case verificationEmail",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/verifypassword",
                    "title" : "case verifyPassword",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/urlcomponent",
                    "title" : "var urlComponent: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/endpoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/endpoint",
                "title" : "API.Endpoint",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/==(_:_:)",
                    "title" : "static func == (API.Option, API.Option) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/cachepolicy(_:)",
                    "title" : "case cachePolicy(URLRequest.CachePolicy)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/context(_:)",
                    "title" : "case context(Encodable)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/filesize(_:)",
                    "title" : "case fileSize(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/installationid(_:)",
                    "title" : "case installationId(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/metadata(_:)",
                    "title" : "case metadata([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/mimetype(_:)",
                    "title" : "case mimeType(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/removemimetype",
                    "title" : "case removeMimeType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/serverurl(_:)",
                    "title" : "case serverURL(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/sessiontoken(_:)",
                    "title" : "case sessionToken(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/tags(_:)",
                    "title" : "case tags([String : String])",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/useprimarykey",
                    "title" : "case usePrimaryKey",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/api\/option\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/api\/option\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/api\/option\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/api\/option",
                "title" : "API.Option",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/api",
            "title" : "API",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/parseswift\/functionrequest",
            "title" : "FunctionRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicread",
                "title" : "var publicRead: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/publicwrite",
                "title" : "var publicWrite: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(objectid:)",
                "title" : "func getReadAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(role:)",
                "title" : "func getReadAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(rolename:)",
                "title" : "func getReadAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getreadaccess(user:)",
                "title" : "func getReadAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(objectid:)",
                "title" : "func getWriteAccess(objectId: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(role:)",
                "title" : "func getWriteAccess<T>(role: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(rolename:)",
                "title" : "func getWriteAccess(roleName: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/getwriteaccess(user:)",
                "title" : "func getWriteAccess<T>(user: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(objectid:value:)",
                "title" : "func setReadAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(role:value:)",
                "title" : "func setReadAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(rolename:value:)",
                "title" : "func setReadAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setreadaccess(user:value:)",
                "title" : "func setReadAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(objectid:value:)",
                "title" : "func setWriteAccess(objectId: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(role:value:)",
                "title" : "func setWriteAccess<T>(role: T, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(rolename:value:)",
                "title" : "func setWriteAccess(roleName: String, value: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setwriteaccess(user:value:)",
                "title" : "func setWriteAccess<T>(user: T, value: Bool)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/defaultacl()",
                "title" : "static func defaultACL() async throws -> ParseACL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseacl\/setdefaultacl(_:withaccessforcurrentuser:)",
                "title" : "static func setDefaultACL(ParseACL, withAccessForCurrentUser: Bool) async throws -> ParseACL",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/read",
                    "title" : "case read",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/write",
                    "title" : "case write",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-630fw",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/init(from:)-3nwp2",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseacl\/access\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseacl\/access\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/access",
                "title" : "ParseACL.Access",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseacl\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseacl\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseacl",
            "title" : "ParseACL",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/init(name:dimensions:at:)",
                "title" : "init(name: String, dimensions: [String : Codable]?, at: Date?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/date",
                "title" : "var date: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/dimensions",
                "title" : "var dimensions: [String : Codable]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(dimensions:at:options:callbackqueue:completion:)",
                "title" : "func track(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:)",
                "title" : "func track(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/track(options:callbackqueue:completion:)",
                "title" : "func track(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(dimensions:at:options:)",
                "title" : "func trackPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackpublisher(options:)",
                "title" : "func trackPublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(dimensions:at:options:callbackqueue:completion:)",
                "title" : "static func trackAppOpened(dimensions: [String : String]?, at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(launchoptions:at:options:)",
                "title" : "static func trackAppOpened(launchOptions: [UIApplication.LaunchOptionsKey : Any], at: Date?, options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopened(launchoptions:at:options:callbackqueue:completion:)",
                "title" : "static func trackAppOpened(launchOptions: [UIApplication.LaunchOptionsKey : Any], at: Date?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopenedpublisher(dimensions:at:options:)",
                "title" : "static func trackAppOpenedPublisher(dimensions: [String : String]?, at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanalytics\/trackappopenedpublisher(launchoptions:at:options:)",
                "title" : "static func trackAppOpenedPublisher(launchOptions: [UIApplication.LaunchOptionsKey : Any], at: Date?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanalytics\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanalytics\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanalytics",
            "title" : "ParseAnalytics",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:)",
                "title" : "func login(options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/login(options:callbackqueue:completion:)",
                "title" : "func login(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(options:)",
                "title" : "func loginPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseanonymous\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseanonymous\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseanonymous",
            "title" : "ParseAnonymous",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/link(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func link(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(user:identitytoken:options:)",
                "title" : "func linkPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/login(user:identitytoken:options:callbackqueue:completion:)",
                "title" : "func login(user: String, identityToken: Data, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(user:identitytoken:options:)",
                "title" : "func loginPublisher(user: String, identityToken: Data, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseapple\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseapple\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseapple",
            "title" : "ParseApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(base64:)",
                "title" : "init(base64: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/init(data:)",
                "title" : "init(data: Data)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsebytes\/base64",
                "title" : "let base64: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsebytes\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsebytes\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsebytes",
            "title" : "ParseBytes",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/init(requiresauthentication:publicaccess:)",
                "title" : "init(requiresAuthentication: Bool, publicAccess: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/protectedfields",
                "title" : "var protectedFields: [String : Set<String>]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/readuserfields",
                "title" : "var readUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/writeuserfields",
                "title" : "var writeUserFields: Set<String>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addpointerfields(_:on:)",
                "title" : "func addPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-2hwwg",
                "title" : "func addProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-3ld7d",
                "title" : "func addProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-6fcbm",
                "title" : "func addProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfields(_:for:)-7mmnw",
                "title" : "func addProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldspublic(_:)",
                "title" : "func addProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsrequiresauthentication(_:)",
                "title" : "func addProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/addprotectedfieldsuser(_:userfield:)",
                "title" : "func addProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getpointerfields(_:)",
                "title" : "func getPointerFields(Action) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-1ibkv",
                "title" : "func getProtectedFields<R>(R) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-35eqy",
                "title" : "func getProtectedFields(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-3oyee",
                "title" : "func getProtectedFields<U>(Pointer<U>) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfields(_:)-6ueex",
                "title" : "func getProtectedFields<U>(U) throws -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldspublic()",
                "title" : "func getProtectedFieldsPublic() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsrequiresauthentication()",
                "title" : "func getProtectedFieldsRequiresAuthentication() -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/getprotectedfieldsuser(_:)",
                "title" : "func getProtectedFieldsUser(String) -> Set<String>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-37b9k",
                "title" : "func hasAccess<U>(Action, for: U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-7qp10",
                "title" : "func hasAccess<R>(Action, for: R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-94bwb",
                "title" : "func hasAccess(Action, for: String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccess(_:for:)-msxs",
                "title" : "func hasAccess<U>(Action, for: Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccesspublic(_:)",
                "title" : "func hasAccessPublic(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasaccessrequiresauthentication(_:)",
                "title" : "func hasAccessRequiresAuthentication(Action) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-31rh7",
                "title" : "func hasReadAccess<U>(Pointer<U>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-4yuat",
                "title" : "func hasReadAccess<R>(R) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-7lyeb",
                "title" : "func hasReadAccess(String) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccess(_:)-bbom",
                "title" : "func hasReadAccess<U>(U) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccesspublic()",
                "title" : "func hasReadAccessPublic() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/hasreadaccessrequiresauthentication()",
                "title" : "func hasReadAccessRequiresAuthentication() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-5ldwm",
                "title" : "func hasWriteAccess<R>(R, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-7ov62",
                "title" : "func hasWriteAccess(String, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-8k62f",
                "title" : "func hasWriteAccess<U>(Pointer<U>, checkAddField: Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccess(_:checkaddfield:)-9svo4",
                "title" : "func hasWriteAccess<U>(U, checkAddField: Bool) throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccesspublic(_:)",
                "title" : "func hasWriteAccessPublic(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/haswriteaccessrequiresauthentication(_:)",
                "title" : "func hasWriteAccessRequiresAuthentication(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removepointerfields(_:on:)",
                "title" : "func removePointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-4w6oa",
                "title" : "func removeProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-7qajb",
                "title" : "func removeProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-8it6u",
                "title" : "func removeProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfields(_:for:)-9c9jl",
                "title" : "func removeProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldspublic(_:)",
                "title" : "func removeProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsrequiresauthentication(_:)",
                "title" : "func removeProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/removeprotectedfieldsuser(_:userfield:)",
                "title" : "func removeProtectedFieldsUser(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-1fd37",
                "title" : "func setAccess(Bool, on: Action, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-2clcm",
                "title" : "func setAccess<R>(Bool, on: Action, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-b3t7",
                "title" : "func setAccess<U>(Bool, on: Action, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccess(_:on:for:)-z0aw",
                "title" : "func setAccess<U>(Bool, on: Action, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccesspublic(_:on:)",
                "title" : "func setAccessPublic(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setaccessrequiresauthentication(_:on:)",
                "title" : "func setAccessRequiresAuthentication(Bool, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setpointerfields(_:on:)",
                "title" : "func setPointerFields(Set<String>, on: Action) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-2fsdg",
                "title" : "func setProtectedFields(Set<String>, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-3ewb1",
                "title" : "func setProtectedFields<U>(Set<String>, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-46xeu",
                "title" : "func setProtectedFields<U>(Set<String>, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:for:)-7w0s5",
                "title" : "func setProtectedFields<R>(Set<String>, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfields(_:userfield:)",
                "title" : "func setProtectedFields(Set<String>, userField: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldspublic(_:)",
                "title" : "func setProtectedFieldsPublic(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setprotectedfieldsrequiresauthentication(_:)",
                "title" : "func setProtectedFieldsRequiresAuthentication(Set<String>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-3nc5c",
                "title" : "func setReadAccess<R>(Bool, for: R) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-464o",
                "title" : "func setReadAccess<U>(Bool, for: Pointer<U>) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-4q3c9",
                "title" : "func setReadAccess(Bool, for: String) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccess(_:for:)-6ssgv",
                "title" : "func setReadAccess<U>(Bool, for: U) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccesspublic(_:)",
                "title" : "func setReadAccessPublic(Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setreadaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setReadAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-3axhs",
                "title" : "func setWriteAccess<U>(Bool, for: Pointer<U>, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4gvup",
                "title" : "func setWriteAccess<U>(Bool, for: U, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-4ws0r",
                "title" : "func setWriteAccess(Bool, for: String, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccess(_:for:canaddfield:)-5qka",
                "title" : "func setWriteAccess<R>(Bool, for: R, canAddField: Bool) throws -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccesspublic(_:canaddfield:)",
                "title" : "func setWriteAccessPublic(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseclp\/setwriteaccessrequiresauthentication(_:canaddfield:)",
                "title" : "func setWriteAccessRequiresAuthentication(Bool, canAddField: Bool) -> ParseCLP",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/addfield",
                    "title" : "case addField",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/count",
                    "title" : "case count",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/create",
                    "title" : "case create",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/delete",
                    "title" : "case delete",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/find",
                    "title" : "case find",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/get",
                    "title" : "case get",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/update",
                    "title" : "case update",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseclp\/action\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseclp\/action\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/action",
                "title" : "ParseCLP.Action",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseclp\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseclp\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseclp",
            "title" : "ParseCLP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/current()",
                "title" : "static func current() async throws -> [String : V]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetch(options:)",
                "title" : "static func fetch(options: API.Options) async throws -> [String : V]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetch(options:callbackqueue:completion:)",
                "title" : "static func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[String : V], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/fetchpublisher(options:)",
                "title" : "static func fetchPublisher(options: API.Options) -> Future<[String : V], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/save(_:options:)",
                "title" : "static func save([String : V], options: API.Options) async throws -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/save(_:options:callbackqueue:completion:)",
                "title" : "static func save([String : V], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Bool, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfigcodable\/savepublisher(_:options:)",
                "title" : "static func savePublisher([String : V], options: API.Options) -> Future<Bool, ParseError>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfigcodable",
            "title" : "ParseConfigCodable",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/init(applicationid:clientkey:primarykey:webhookkey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cachediskcapacity:u-81oic",
                "title" : "init(applicationId: String, clientKey: String?, primaryKey: String?, webhookKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, maxConnectionAttempts: Int, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/applicationid",
                "title" : "var applicationId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachediskcapacity",
                "title" : "var cacheDiskCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/cachememorycapacity",
                "title" : "var cacheMemoryCapacity: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/clientkey",
                "title" : "var clientKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/httpadditionalheaders",
                "title" : "var httpAdditionalHeaders: [AnyHashable : Any]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isdeletingkeychainifneeded",
                "title" : "var isDeletingKeychainIfNeeded: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/ismigratingfromobjcsdk",
                "title" : "var isMigratingFromObjcSDK: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isrequiringcustomobjectids",
                "title" : "var isRequiringCustomObjectIds: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingdataprotectionkeychain",
                "title" : "var isUsingDataProtectionKeychain: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingequalqueryconstraint",
                "title" : "var isUsingEqualQueryConstraint: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingpostforquery",
                "title" : "var isUsingPostForQuery: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/isusingtransactions",
                "title" : "var isUsingTransactions: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerymaxconnectionattempts",
                "title" : "var liveQueryMaxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/livequerysserverurl",
                "title" : "var liveQuerysServerURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/maxconnectionattempts",
                "title" : "var maxConnectionAttempts: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/parsefiletransfer",
                "title" : "var parseFileTransfer: ParseFileTransferable",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/primarykey",
                "title" : "var primaryKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/primitivestore",
                "title" : "var primitiveStore: ParsePrimitiveStorable",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/requestcachepolicy",
                "title" : "var requestCachePolicy: URLRequest.CachePolicy",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseconfiguration\/serverurl",
                "title" : "var serverURL: URL",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseconfiguration",
            "title" : "ParseConfiguration",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseencoder\/encode(_:acl:skipkeys:)",
                "title" : "func encode<T>(T, acl: ParseACL?, skipKeys: SkipKeys) throws -> Data",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/cloud",
                    "title" : "case cloud",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/custom(_:)",
                    "title" : "case custom(Set<String>)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/customobjectid",
                    "title" : "case customObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/none",
                    "title" : "case none",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys\/object",
                    "title" : "case object",
                    "type" : "case"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseencoder\/skipkeys",
                "title" : "ParseEncoder.SkipKeys",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseencoder",
            "title" : "ParseEncoder",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(code:message:)",
                "title" : "init(code: Code, message: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(code:message:swift:)",
                "title" : "init(code: Code, message: String, swift: Swift.Error)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/init(othercode:message:)",
                "title" : "init(otherCode: Int, message: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.property",
                "title" : "let code: Code",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/message",
                "title" : "let message: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/othercode",
                "title" : "let otherCode: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseerror\/swift",
                "title" : "let swift: Swift.Error?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/accountalreadylinked",
                    "title" : "case accountAlreadyLinked",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/aggregateerror",
                    "title" : "case aggregateError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/cachemiss",
                    "title" : "case cacheMiss",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/changedimmutablefielderror",
                    "title" : "case changedImmutableFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/clientdisconnected",
                    "title" : "case clientDisconnected",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/commandunavailable",
                    "title" : "case commandUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/connectionfailed",
                    "title" : "case connectionFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicaterequest",
                    "title" : "case duplicateRequest",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/duplicatevalue",
                    "title" : "case duplicateValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/exceededquota",
                    "title" : "case exceededQuota",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeletefailure",
                    "title" : "case fileDeleteFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filedeleteunnamedfailure",
                    "title" : "case fileDeleteUnnamedFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filereaderror",
                    "title" : "case fileReadError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filesavefailure",
                    "title" : "case fileSaveFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/filetoolarge",
                    "title" : "case fileTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hostingerror",
                    "title" : "case hostingError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/incorrecttype",
                    "title" : "case incorrectType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/inefficientqueryerror",
                    "title" : "case inefficientQueryError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/internalserver",
                    "title" : "case internalServer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidacl",
                    "title" : "case invalidACL",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidauthdataerror",
                    "title" : "case invalidAuthDataError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelname",
                    "title" : "case invalidChannelName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidchannelsarrayerror",
                    "title" : "case invalidChannelsArrayError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidclassname",
                    "title" : "case invalidClassName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidcontentlength",
                    "title" : "case invalidContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetoken",
                    "title" : "case invalidDeviceToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invaliddevicetypeerror",
                    "title" : "case invalidDeviceTypeError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidemailaddress",
                    "title" : "case invalidEmailAddress",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalideventname",
                    "title" : "case invalidEventName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidexpirationerror",
                    "title" : "case invalidExpirationError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidfilename",
                    "title" : "case invalidFileName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidimagedata",
                    "title" : "case invalidImageData",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidinstallationiderror",
                    "title" : "case invalidInstallationIdError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidjson",
                    "title" : "case invalidJSON",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidkeyname",
                    "title" : "case invalidKeyName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlimiterror",
                    "title" : "case invalidLimitError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidlinkedsession",
                    "title" : "case invalidLinkedSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidnestedkey",
                    "title" : "case invalidNestedKey",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpointer",
                    "title" : "case invalidPointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidpushtime",
                    "title" : "case invalidPushTime",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidquery",
                    "title" : "case invalidQuery",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidrolename",
                    "title" : "case invalidRoleName",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidschemaoperation",
                    "title" : "case invalidSchemaOperation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsessiontoken",
                    "title" : "case invalidSessionToken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidskiperror",
                    "title" : "case invalidSkipError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidsubscriptiontype",
                    "title" : "case invalidSubscriptionType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/invalidvalue",
                    "title" : "case invalidValue",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/linkedidmissing",
                    "title" : "case linkedIdMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfaerror",
                    "title" : "case mfaError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/mfatokenrequired",
                    "title" : "case mfaTokenRequired",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontentlength",
                    "title" : "case missingContentLength",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingcontenttype",
                    "title" : "case missingContentType",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingobjectid",
                    "title" : "case missingObjectId",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/missingrequiredfielderror",
                    "title" : "case missingRequiredFieldError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objectnotfound",
                    "title" : "case objectNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/objecttoolarge",
                    "title" : "case objectTooLarge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/operationforbidden",
                    "title" : "case operationForbidden",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/other",
                    "title" : "case other",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/othercause",
                    "title" : "case otherCause",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/pushmisconfigured",
                    "title" : "case pushMisconfigured",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/requestlimitexceeded",
                    "title" : "case requestLimitExceeded",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/scriptfailed",
                    "title" : "case scriptFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/serviceunavailable",
                    "title" : "case serviceUnavailable",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/timeout",
                    "title" : "case timeout",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsavedfilefailure",
                    "title" : "case unsavedFileFailure",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/unsupportedservice",
                    "title" : "case unsupportedService",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercanonlybecreatedthroughsignup",
                    "title" : "case userCanOnlyBeCreatedThroughSignUp",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usercannotbealteredwithoutsession",
                    "title" : "case userCannotBeAlteredWithoutSession",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailmissing",
                    "title" : "case userEmailMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/useremailtaken",
                    "title" : "case userEmailTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userpasswordmissing",
                    "title" : "case userPasswordMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/userwithemailnotfound",
                    "title" : "case userWithEmailNotFound",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernamemissing",
                    "title" : "case usernameMissing",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/usernametaken",
                    "title" : "case usernameTaken",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/validationfailed",
                    "title" : "case validationFailed",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/webhookerror",
                    "title" : "case webhookError",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/xdomainrequest",
                    "title" : "case xDomainRequest",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-4z7ws",
                        "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-5rs0d",
                        "title" : "func containedIn(ParseError.Code...) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-6j9cy",
                        "title" : "func containedIn([ParseError.Code]) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/containedin(_:)-749cm",
                        "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-43i1q",
                        "title" : "func equalsTo(ParseError.Code) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/equalsto(_:)-5x7gp",
                        "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/code-swift.enum",
                "title" : "ParseError.Code",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/debugdescription-2nfx4",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/debugdescription-40hjo",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/==(_:_:)",
                    "title" : "static func == (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-18mqc",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-5oudf",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-6itoq",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/containedin(_:)-95ktw",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-786kn",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/equalsto(_:)-9xnax",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/errordescription-nht8",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/errordescription-tx34",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseerror",
            "title" : "ParseError",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/link(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func linkPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:accesstoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, accessToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/login(userid:authenticationtoken:expiresin:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:accesstoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, accessToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(userid:authenticationtoken:expiresin:options:)",
                "title" : "func loginPublisher(userId: String, authenticationToken: String, expiresIn: Int?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefacebook\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefacebook\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefacebook",
            "title" : "ParseFacebook",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefield\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/acl",
                    "title" : "case acl",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/array",
                    "title" : "case array",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/boolean",
                    "title" : "case boolean",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/bytes",
                    "title" : "case bytes",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/date",
                    "title" : "case date",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/file",
                    "title" : "case file",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/geopoint",
                    "title" : "case geoPoint",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/number",
                    "title" : "case number",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/object",
                    "title" : "case object",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/pointer",
                    "title" : "case pointer",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/polygon",
                    "title" : "case polygon",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/relation",
                    "title" : "case relation",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/string",
                    "title" : "case string",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsefield\/fieldtype\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/fieldtype",
                "title" : "ParseField.FieldType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefield\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefield\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefield",
            "title" : "ParseField",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-3ggr5",
                "title" : "init(required: Bool, defauleValue: V?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/init(required:defaulevalue:)-96ibo",
                "title" : "init(required: Bool, defauleValue: V?) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/debugdescription",
                "title" : "var debugDescription: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/defaultvalue",
                "title" : "var defaultValue: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefieldoptions\/required",
                "title" : "var required: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefieldoptions",
            "title" : "ParseFieldOptions",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:cloudurl:metadata:tags:options:)",
                "title" : "init(name: String, cloudURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:data:mimetype:metadata:tags:options:)",
                "title" : "init(name: String, data: Data, mimeType: String?, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/init(name:localurl:metadata:tags:options:)",
                "title" : "init(name: String, localURL: URL, metadata: [String : String]?, tags: [String : String]?, options: API.Options)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/cloudurl",
                "title" : "var cloudURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/data",
                "title" : "var data: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/id-3kemr",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/localurl",
                "title" : "var localURL: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/metadata",
                "title" : "var metadata: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/mimetype",
                "title" : "var mimeType: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/options",
                "title" : "var options: API.Options",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/tags",
                "title" : "var tags: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/deletepublisher(options:)",
                "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:callbackqueue:progress:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetch(options:progress:)",
                "title" : "func fetch(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:)",
                "title" : "func fetchPublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/fetchpublisher(options:progress:)",
                "title" : "func fetchPublisher(options: API.Options, progress: ((URLSessionDownloadTask, Int64, Int64, Int64) -> Void)) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/hash(into:)",
                "title" : "func hash(into: inout Hasher)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:callbackqueue:progress:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:progress:)",
                "title" : "func save(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) async throws -> ParseFile",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/save(options:stream:callbackqueue:progress:completion:)",
                "title" : "func save(options: API.Options, stream: InputStream, callbackQueue: DispatchQueue, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?, completion: (ParseError?) -> Void) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefile\/savepublisher(options:progress:)",
                "title" : "func savePublisher(options: API.Options, progress: ((URLSessionTask, Int64, Int64, Int64) -> Void)?) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription-5c855",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription-67efx",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description-28w87",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description-8pkhz",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete()",
                    "title" : "func delete() async throws -> DeletingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/id-7xdxx",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/debugdescription-4zrao",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/description-6ba8p",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsefile\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> ParseFile",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsefile\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefile",
            "title" : "ParseFile",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/init()",
                "title" : "init?()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/defaultdatadirectorypath",
                "title" : "var defaultDataDirectoryPath: URL?",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/downloaddirectory()",
                "title" : "static func downloadDirectory() throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-3nh5r",
                "title" : "static func fileExists(String) throws -> URL",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsefilemanager\/fileexists(_:)-4h3hl",
                "title" : "static func fileExists(ParseFile) throws -> URL",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsefilemanager",
            "title" : "ParseFileManager",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(coordinate:)",
                "title" : "init(coordinate: CLLocationCoordinate2D) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(latitude:longitude:)",
                "title" : "init(latitude: Double, longitude: Double) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/init(location:)",
                "title" : "init(location: CLLocation) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/latitude",
                "title" : "var latitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/longitude",
                "title" : "var longitude: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocation",
                "title" : "var toCLLocation: CLLocation",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/tocllocationcoordinate2d",
                "title" : "var toCLLocationCoordinate2D: CLLocationCoordinate2D",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinkilometers(_:)",
                "title" : "func distanceInKilometers(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinmiles(_:)",
                "title" : "func distanceInMiles(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegeopoint\/distanceinradians(_:)",
                "title" : "func distanceInRadians(ParseGeoPoint) -> Double",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegeopoint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegeopoint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegeopoint",
            "title" : "ParseGeoPoint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/link(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(id:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/login(id:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(id:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegithub\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegithub\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegithub",
            "title" : "ParseGitHub",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/link(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func linkPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/login(id:idtoken:accesstoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, idToken: String?, accessToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(id:idtoken:accesstoken:options:)",
                "title" : "func loginPublisher(id: String, idToken: String?, accessToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsegoogle\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsegoogle\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsegoogle",
            "title" : "ParseGoogle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/check(options:)",
                "title" : "static func check(options: API.Options) async throws -> Status",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/check(options:callbackqueue:allowintermediateresponses:completion:)",
                "title" : "static func check(options: API.Options, callbackQueue: DispatchQueue, allowIntermediateResponses: Bool, completion: (Result<Status, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehealth\/checkpublisher(options:)",
                "title" : "static func checkPublisher(options: API.Options) -> AnyPublisher<Status, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/error",
                    "title" : "case error",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/initialized",
                    "title" : "case initialized",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/ok",
                    "title" : "case ok",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/starting",
                    "title" : "case starting",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsehealth\/status\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsehealth\/status\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/status",
                "title" : "ParseHealth.Status",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehealth\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehealth\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehealth",
            "title" : "ParseHealth",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/functionname",
                "title" : "var functionName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parameters",
                "title" : "var parameters: P",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/userttype",
                "title" : "ParseHookFunctionRequest.UsertType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookfunctionrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookfunctionrequest",
            "title" : "ParseHookFunctionRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(error:)",
                "title" : "init(error: ParseError)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/init(success:)",
                "title" : "init(success: R)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error",
                "title" : "var error: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehookresponse\/success",
                "title" : "var success: R?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1ahdr",
                    "title" : "func containedIn(ParseError.Code...) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-1zvnk",
                    "title" : "func containedIn([ParseError.Code]) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-2ui18",
                    "title" : "func containedIn([ParseError.Code]) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/containedin(_:)-3necj",
                    "title" : "func containedIn(ParseError.Code...) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-4kve4",
                    "title" : "func equalsTo(ParseError.Code) -> ParseError?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/equalsto(_:)-6whsf",
                    "title" : "func equalsTo(ParseError.Code) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/errordescription-4cwpp",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/errordescription-7cvu5",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehookresponse\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehookresponse\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehookresponse",
            "title" : "ParseHookResponse",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/event",
                "title" : "var event: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/isget",
                "title" : "var isGet: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/object",
                "title" : "var object: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/objects",
                "title" : "var objects: [T]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/original",
                "title" : "var original: T?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/query",
                "title" : "var query: Query<T>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/sendevent",
                "title" : "var sendEvent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/subscriptions",
                "title" : "var subscriptions: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/usertype",
                "title" : "ParseHookTriggerObjectRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerobjectrequest",
            "title" : "ParseHookTriggerObjectRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/clients",
                "title" : "var clients: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/file",
                "title" : "var file: ParseFile?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/filesize",
                "title" : "var fileSize: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/headers",
                "title" : "var headers: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/installationid",
                "title" : "var installationId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/ipaddress",
                "title" : "var ipAddress: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/primarykey",
                "title" : "var primaryKey: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/triggername",
                "title" : "var triggerName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/user",
                "title" : "var user: U?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getcontext()",
                "title" : "func getContext<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/getlog()",
                "title" : "func getLog<V>() throws -> V",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/usertype",
                "title" : "ParseHookTriggerRequest.UserType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:)",
                    "title" : "func hydrateUser(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuser(options:callbackqueue:completion:)",
                    "title" : "func hydrateUser(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/hydrateuserpublisher(options:)",
                    "title" : "func hydrateUserPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/options()",
                    "title" : "func options() -> API.Options",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggerrequest\/parsehookrequestable-implementations",
                "title" : "ParseHookRequestable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggerrequest",
            "title" : "ParseHookTriggerRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/link(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/login(id:accesstoken:apiurl:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, apiURL: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(id:accesstoken:apiurl:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, apiURL: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseinstagram\/graphapibaseurl",
                "title" : "static var graphAPIBaseURL: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseinstagram\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseinstagram\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseinstagram",
            "title" : "ParseInstagram",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:)",
                "title" : "func link(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/link(id:password:options:callbackqueue:completion:)",
                "title" : "func link(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(id:password:options:)",
                "title" : "func linkPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:)",
                "title" : "func login(id: String, password: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/login(id:password:options:callbackqueue:completion:)",
                "title" : "func login(id: String, password: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(id:password:options:)",
                "title" : "func loginPublisher(id: String, password: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseldap\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseldap\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseldap",
            "title" : "ParseLDAP",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/link(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/login(id:accesstoken:ismobilesdk:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(id:accesstoken:ismobilesdk:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, isMobileSDK: Bool, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parselinkedin\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parselinkedin\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parselinkedin",
            "title" : "ParseLinkedIn",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/init(target:)",
                "title" : "init(target: T)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-16zkg",
                "title" : "func add<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/add(_:objects:)-4or5w",
                "title" : "func add<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-47ckx",
                "title" : "func addRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addrelation(_:objects:)-gw2h",
                "title" : "func addRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-3v3y",
                "title" : "func addUnique<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/addunique(_:objects:)-9mi29",
                "title" : "func addUnique<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/batch(_:operations:)",
                "title" : "func batch(String, operations: ParseOperationBatch) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:to:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/forceset(_:value:)",
                "title" : "func forceSet<W>((String, WritableKeyPath<T, W?>), value: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/increment(_:by:)-19wfq",
                "title" : "func increment(String, by: Double) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/increment(_:by:)-2jfll",
                "title" : "func increment(String, by: Int) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-290yc",
                "title" : "func remove<W>(String, objects: [W]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/remove(_:objects:)-9b7ai",
                "title" : "func remove<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-1wbm6",
                "title" : "func removeRelation<W>(String, objects: [W]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/removerelation(_:objects:)-3ty5e",
                "title" : "func removeRelation<V>((String, WritableKeyPath<T, [V]?>), objects: [V]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/save(options:callbackqueue:completion:)",
                "title" : "func save(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<T, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/savepublisher(options:)",
                "title" : "func savePublisher(options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-6e7l2",
                "title" : "func set<W>(WritableKeyPath<T, W?>, to: W) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/set(_:to:)-88uvh",
                "title" : "func set<W>((String, WritableKeyPath<T, W?>), to: W?) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-1atuj",
                "title" : "func unset<V>((String, WritableKeyPath<T, V?>)) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperation\/unset(_:)-7dqb3",
                "title" : "func unset(String) -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperation\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperation\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperation",
            "title" : "ParseOperation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationadd\/objects",
                "title" : "var objects: [T]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationadd\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationadd\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationadd\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationadd\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationadd",
            "title" : "ParseOperationAdd",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/init(objects:)",
                "title" : "init(objects: [T]) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/objects",
                "title" : "var objects: [Pointer<T>]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddrelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationaddrelation",
            "title" : "ParseOperationAddRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/objects",
                "title" : "var objects: Set<T>",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddunique\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationaddunique\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationaddunique\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationaddunique",
            "title" : "ParseOperationAddUnique",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/init(operations:)",
                "title" : "init<T>(operations: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/appendoperations(operations:)",
                "title" : "func appendOperations<T>(operations: [T]) -> ParseOperationBatch",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationbatch\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationbatch\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationbatch\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationbatch",
            "title" : "ParseOperationBatch",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationdelete\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationdelete\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationdelete\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationdelete",
            "title" : "ParseOperationDelete",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/init(amount:)",
                "title" : "init(amount: Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrement\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrement\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrement\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationincrement",
            "title" : "ParseOperationIncrement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/init(amount:)",
                "title" : "init(amount: Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationincrementdouble\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationincrementdouble",
            "title" : "ParseOperationIncrementDouble",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/init(objects:)",
                "title" : "init(objects: [T])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremove\/objects",
                "title" : "let objects: [T]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremove\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremove\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremove\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremove\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationremove",
            "title" : "ParseOperationRemove",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/objects",
                "title" : "var objects: [Pointer<T>]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationremoverelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationremoverelation",
            "title" : "ParseOperationRemoveRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-61vkc",
                "title" : "init([ParseGeoPoint]) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/init(_:)-8n95l",
                "title" : "init(ParseGeoPoint...) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/coordinates",
                "title" : "let coordinates: [ParseGeoPoint]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepolygon\/containspoint(_:)",
                "title" : "func containsPoint(ParseGeoPoint) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepolygon\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepolygon\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepolygon",
            "title" : "ParsePolygon",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationdate:)",
                "title" : "init(payload: V, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:pushtime:expirationinterval:)",
                "title" : "init(payload: V, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationdate:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationDate: Date?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/init(payload:query:pushtime:expirationinterval:)",
                "title" : "init<U>(payload: V, query: Query<U>, pushTime: Date?, expirationInterval: Int?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/channels",
                "title" : "var channels: Set<String>?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/expirationinterval",
                "title" : "var expirationInterval: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/payload",
                "title" : "var payload: V?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/where",
                "title" : "var `where`: QueryWhere?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:)",
                "title" : "func fetchStatus(String, options: API.Options) async throws -> ParsePushStatus<V>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatus(_:options:callbackqueue:completion:)",
                "title" : "func fetchStatus(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ParsePushStatus<V>, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/fetchstatuspublisher(_:options:)",
                "title" : "func fetchStatusPublisher(String, options: API.Options) -> Future<ParsePushStatus<V>, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:)",
                "title" : "func send(options: API.Options) async throws -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/send(options:callbackqueue:completion:)",
                "title" : "func send(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<String, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepush\/sendpublisher(options:)",
                "title" : "func sendPublisher(options: API.Options) -> Future<String, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepush\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepush\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepush",
            "title" : "ParsePush",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/action",
                "title" : "var action: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/actionlockey",
                "title" : "var actionLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/launchimage",
                "title" : "var launchImage: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/locargs",
                "title" : "var locArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/lockey",
                "title" : "var locKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelocargs",
                "title" : "var subtitleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/subtitlelockey",
                "title" : "var subtitleLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplealert\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplealert\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplealert",
            "title" : "ParsePushAppleAlert",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushapplesound\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushapplesound\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushapplesound",
            "title" : "ParsePushAppleSound",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:icon:)",
                "title" : "init(title: String?, body: String?, icon: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/init(title:body:image:)",
                "title" : "init(title: String?, body: String?, image: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/androidchannelid",
                "title" : "var androidChannelId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/badge",
                "title" : "var badge: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylocargs",
                "title" : "var bodyLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/bodylockey",
                "title" : "var bodyLocKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/clickaction",
                "title" : "var clickAction: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/color",
                "title" : "var color: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/icon",
                "title" : "var icon: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/image",
                "title" : "var image: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/sound",
                "title" : "var sound: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/subtitle",
                "title" : "var subtitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/tag",
                "title" : "var tag: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelocargs",
                "title" : "var titleLocArgs: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/titlelockey",
                "title" : "var titleLocKey: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushfirebasenotification\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushfirebasenotification",
            "title" : "ParsePushFirebaseNotification",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/pushtype",
                "title" : "var pushType: ParsePushPayloadApple.PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttoapple()",
                "title" : "func convertToApple() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/converttofirebase()",
                "title" : "func convertToFirebase() -> ParsePushPayloadFirebase",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadany\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadany\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadany",
            "title" : "ParsePushPayloadAny",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(alert:)",
                "title" : "init(alert: ParsePushAppleAlert)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(body:)",
                "title" : "init(body: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/alert",
                "title" : "var alert: ParsePushAppleAlert?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/body",
                "title" : "var body: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/category",
                "title" : "var category: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/collapseid",
                "title" : "var collapseId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/contentavailable",
                "title" : "var contentAvailable: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/interruptionlevel",
                "title" : "var interruptionLevel: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mdm",
                "title" : "var mdm: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/mutablecontent",
                "title" : "var mutableContent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/priority",
                "title" : "var priority: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.property",
                "title" : "var pushType: PushType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/relevancescore",
                "title" : "var relevanceScore: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/targetcontentid",
                "title" : "var targetContentId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/threadid",
                "title" : "var threadId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/topic",
                "title" : "var topic: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/urlargs",
                "title" : "var urlArgs: [String]?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/getsound()",
                "title" : "func getSound<V>() throws -> V",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/incrementbadge()",
                "title" : "func incrementBadge() -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setbadge(_:)",
                "title" : "func setBadge(Int) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-27wko",
                "title" : "func setSound(ParsePushAppleSound) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/setsound(_:)-4d1ma",
                "title" : "func setSound<V>(V) -> ParsePushPayloadApple",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/alert",
                    "title" : "case alert",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/background",
                    "title" : "case background",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/pushtype-swift.enum",
                "title" : "ParsePushPayloadApple.PushType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadapple\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadapple",
            "title" : "ParsePushPayloadApple",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/init(notification:)",
                "title" : "init(notification: ParsePushFirebaseNotification)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/collapsekey",
                "title" : "var collapseKey: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/contentavailable",
                "title" : "var contentAvailable: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/data",
                "title" : "var data: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/delaywhileidle",
                "title" : "var delayWhileIdle: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/dryrun",
                "title" : "var dryRun: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/mutablecontent",
                "title" : "var mutableContent: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/notification",
                "title" : "var notification: ParsePushFirebaseNotification?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/priority",
                "title" : "var priority: `Self`.PushPriority?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/restrictedpackagename",
                "title" : "var restrictedPackageName: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/uri",
                "title" : "var uri: URL?",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/high",
                    "title" : "case high",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/normal",
                    "title" : "case normal",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/init(from:)",
                        "title" : "init(from: Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/encode(to:)",
                        "title" : "func encode(to: Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/pushpriority",
                "title" : "ParsePushPayloadFirebase.PushPriority",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushpayloadfirebase",
            "title" : "ParsePushPayloadFirebase",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/acl",
                "title" : "var ACL: ParseACL?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/count",
                "title" : "var count: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/createdat",
                "title" : "var createdAt: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/errormessage",
                "title" : "var errorMessage: ParseError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expirationinterval",
                "title" : "var expirationInterval: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/expiry",
                "title" : "var expiry: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedpertype",
                "title" : "var failedPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/failedperutcoffset",
                "title" : "var failedPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numfailed",
                "title" : "var numFailed: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/numsent",
                "title" : "var numSent: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectid",
                "title" : "var objectId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/originaldata",
                "title" : "var originalData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payload",
                "title" : "var payload: PayloadType?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushhash",
                "title" : "var pushHash: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/pushtime",
                "title" : "var pushTime: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/query-swift.property",
                "title" : "var query: QueryWhere?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentpertype",
                "title" : "var sentPerType: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/sentperutcoffset",
                "title" : "var sentPerUTCOffset: [String : Int]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/status",
                "title" : "var status: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/updatedat",
                "title" : "var updatedAt: Date?",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsepushstatus\/payloadtype",
                "title" : "ParsePushStatus.PayloadType",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription-2tlk7",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription-6688q",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description-2p7v0",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description-owjn",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete()",
                    "title" : "func delete() async throws -> DeletingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/deletable-implementations",
                "title" : "Deletable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch()",
                    "title" : "func fetch() async throws -> FetchingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/id-7tlx4",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname-swift.property",
                    "title" : "var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/endpoint",
                    "title" : "var endpoint: API.Endpoint",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/issaved",
                    "title" : "var isSaved: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname-swift.type.property-2eb96",
                    "title" : "static var className: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/classname-swift.type.property-978do",
                    "title" : "static var className: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/objectable-implementations",
                "title" : "Objectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/debugdescription-2urok",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/description-5dp66",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/parseencodable-implementations",
                "title" : "ParseEncodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/init(objectid:)",
                    "title" : "init(objectId: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/id-27z0a",
                    "title" : "var id: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeable",
                    "title" : "var mergeable: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/operation",
                    "title" : "var operation: ParseOperation<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation",
                    "title" : "var relation: ParseRelation<Self>?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:)",
                    "title" : "func create(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/create(options:callbackqueue:completion:)",
                    "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/createpublisher(options:)",
                    "title" : "func createPublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:)",
                    "title" : "func delete(options: API.Options) async throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/delete(options:callbackqueue:completion:)",
                    "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/deletepublisher(options:)",
                    "title" : "func deletePublisher(options: API.Options) -> Future<Void, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetch(includekeys:options:callbackqueue:completion:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/fetchpublisher(includekeys:options:)",
                    "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/get(_:)",
                    "title" : "func get<W>(KeyPath<Self, W?>) throws -> W",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getdecoder()",
                    "title" : "func getDecoder() -> JSONDecoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getencoder()",
                    "title" : "func getEncoder() -> ParseEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/getjsonencoder()",
                    "title" : "func getJSONEncoder() -> JSONEncoder",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/hassameobjectid(as:)",
                    "title" : "func hasSameObjectId<T>(as: T) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/isdirtyforkey(_:)",
                    "title" : "func isDirtyForKey<W>(KeyPath<Self, W?>) throws -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/merge(with:)",
                    "title" : "func merge(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/mergeparse(with:)",
                    "title" : "func mergeParse(with: Self) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:child:)",
                    "title" : "func relation<U>(String, child: U) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:classname:)",
                    "title" : "func relation(String, className: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:)",
                    "title" : "func relation(ParseRelation<Self>?, key: String) throws -> ParseRelation<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.method-473ct",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.method-6n2lm",
                    "title" : "func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:)",
                    "title" : "func replace(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replace(options:callbackqueue:completion:)",
                    "title" : "func replace(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/replacepublisher(options:)",
                    "title" : "func replacePublisher(options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert()",
                    "title" : "func revert() throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/revert(_:)",
                    "title" : "func revert<W>(WritableKeyPath<Self, W?>) throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(ignoringcustomobjectidconfig:options:callbackqueue:completion:)",
                    "title" : "func save(ignoringCustomObjectIdConfig: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Self, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save(options:)",
                    "title" : "func save(options: API.Options) async throws -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/savepublisher(ignoringcustomobjectidconfig:options:)",
                    "title" : "func savePublisher(ignoringCustomObjectIdConfig: Bool, options: API.Options) -> Future<Self, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/set(_:to:)",
                    "title" : "func set<W>(WritableKeyPath<Self, W?>, to: W) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/shouldrestorekey(_:original:)",
                    "title" : "func shouldRestoreKey<W>(KeyPath<Self, W?>, original: Self) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/topointer()",
                    "title" : "func toPointer() throws -> Pointer<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query-swift.type.property",
                    "title" : "static var query: Query<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-1f2xg",
                    "title" : "static func query([QueryConstraint]) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/query(_:)-m51y",
                    "title" : "static func query(QueryConstraint...) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-4cj59",
                    "title" : "static func queryRelations<U>(String, parent: U) throws -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/queryrelations(_:parent:)-p3o1",
                    "title" : "static func queryRelations<U>(String, parent: Pointer<U>) -> Query<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.type.method-4n4k6",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: T) throws -> ParseRelation<T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/relation(_:key:with:)-swift.type.method-9k0oc",
                    "title" : "static func relation<T>(ParseRelation<T>?, key: String, with: Pointer<T>) throws -> ParseRelation<T>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/parseobject-implementations",
                "title" : "ParseObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsepushstatus\/save()",
                    "title" : "func save() async throws -> SavingType",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsepushstatus\/savable-implementations",
                "title" : "Savable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsepushstatus",
            "title" : "ParsePushStatus",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-25hfj",
                "title" : "init(parent: Pointer<T>, key: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:)-9iv6m",
                "title" : "init(parent: T, key: String?) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-6zxtt",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: U)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-7ek9i",
                "title" : "init<U>(parent: Pointer<T>, key: String?, child: Pointer<U>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-8evhy",
                "title" : "init<U>(parent: T, key: String?, child: U) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:child:)-912hj",
                "title" : "init<U>(parent: T, key: String?, child: Pointer<U>) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-5ijuf",
                "title" : "init(parent: T, key: String?, className: String) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/init(parent:key:classname:)-7xhg8",
                "title" : "init(parent: Pointer<T>, key: String?, className: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/classname",
                "title" : "var className: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/parent",
                "title" : "var parent: Pointer<T>?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-89hhl",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-fiw5",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:)-ob98",
                "title" : "func add<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/add(_:objects:)",
                "title" : "func add<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query()",
                "title" : "func query<U>() throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:)",
                "title" : "func query<U>(String) throws -> Query<U>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.method-2ymy3",
                "title" : "func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.method-6niph",
                "title" : "func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-5sx9o",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-8lzzm",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:)-ks5y",
                "title" : "func remove<U>([U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/remove(_:objects:)",
                "title" : "func remove<U>(String, objects: [U]) throws -> ParseOperation<T>",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.type.method-4a90y",
                "title" : "static func query<U>(String, parent: Pointer<U>) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parserelation\/query(_:parent:)-swift.type.method-52scm",
                "title" : "static func query<U>(String, parent: U) throws -> Query<T>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parserelation\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parserelation\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parserelation",
            "title" : "ParseRelation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(classlevelpermissions:)",
                "title" : "init(classLevelPermissions: ParseCLP)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classlevelpermissions",
                "title" : "var classLevelPermissions: ParseCLP?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-2gkz6",
                "title" : "func addField<T>(String, type: ParseField.FieldType, options: ParseFieldOptions<T>) throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addfield(_:type:options:)-v4zh",
                "title" : "func addField<V>(String, type: ParseField.FieldType, options: ParseFieldOptions<V>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addindex(_:field:index:)",
                "title" : "func addIndex(String, field: String, index: Encodable) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addpointer(_:options:)",
                "title" : "func addPointer<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/addrelation(_:options:)",
                "title" : "func addRelation<T>(String, options: ParseFieldOptions<T>) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:)",
                "title" : "func create(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/create(options:callbackqueue:completion:)",
                "title" : "func create(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/createpublisher(includekeys:options:)",
                "title" : "func createPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:)",
                "title" : "func delete(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/delete(options:callbackqueue:completion:)",
                "title" : "func delete(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletefield(_:)",
                "title" : "func deleteField(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deleteindex(_:)",
                "title" : "func deleteIndex(String) -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/deletepublisher(includekeys:options:)",
                "title" : "func deletePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:)",
                "title" : "func fetch(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetch(options:callbackqueue:completion:)",
                "title" : "func fetch(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getfields()",
                "title" : "func getFields() -> [String : String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/getindexes()",
                "title" : "func getIndexes() -> [String : [String : String]]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:)",
                "title" : "func purge(options: API.Options) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purge(options:callbackqueue:completion:)",
                "title" : "func purge(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Void, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/purgepublisher(includekeys:options:)",
                "title" : "func purgePublisher(includeKeys: [String]?, options: API.Options) -> Future<Void, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:)",
                "title" : "func update(options: API.Options) async throws -> ParseSchema<SchemaObject>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/update(options:callbackqueue:completion:)",
                "title" : "func update(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<`Self`, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/updatepublisher(includekeys:options:)",
                "title" : "func updatePublisher(includeKeys: [String]?, options: API.Options) -> Future<`Self`, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseschema\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseschema\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseschema\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseschema",
            "title" : "ParseSchema",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/link(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func link(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func linkPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/login(id:accesstoken:expiresin:refreshtoken:options:callbackqueue:completion:)",
                "title" : "func login(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(id:accesstoken:expiresin:refreshtoken:options:)",
                "title" : "func loginPublisher(id: String, accessToken: String, expiresIn: Int?, refreshToken: String?, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsespotify\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsespotify\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsespotify",
            "title" : "ParseSpotify",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/link(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:callbackqueue:completion:)",
                "title" : "func link(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func linkPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:)",
                "title" : "func login(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func login(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) async throws -> AuthenticatedUser",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/login(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:callbackqueue:completion:)",
                "title" : "func login(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(userid:screenname:consumerkey:consumersecret:authtoken:authtokensecret:options:)",
                "title" : "func loginPublisher(userId: String, screenName: String?, consumerKey: String, consumerSecret: String, authToken: String, authTokenSecret: String, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked()",
                    "title" : "func isLinked() async -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:)",
                    "title" : "func link(authData: [String : String], options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/link(authdata:options:callbackqueue:completion:)",
                    "title" : "func link(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/linkpublisher(authdata:options:)",
                    "title" : "func linkPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/login(authdata:options:callbackqueue:completion:)",
                    "title" : "func login(authData: [String : String], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/loginpublisher(authdata:options:)",
                    "title" : "func loginPublisher(authData: [String : String], options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip()",
                    "title" : "func strip() async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/strip(_:)",
                    "title" : "func strip(AuthenticatedUser) -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(_:options:callbackqueue:completion:)",
                    "title" : "func unlink(AuthenticatedUser, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:)",
                    "title" : "func unlink(options: API.Options) async throws -> AuthenticatedUser",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlink(options:callbackqueue:completion:)",
                    "title" : "func unlink(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<AuthenticatedUser, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(_:options:)",
                    "title" : "func unlinkPublisher(AuthenticatedUser, options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/unlinkpublisher(options:)",
                    "title" : "func unlinkPublisher(options: API.Options) -> Future<AuthenticatedUser, ParseError>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetwitter\/islinked(with:)",
                    "title" : "static func isLinked(with: AuthenticatedUser) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetwitter\/parseauthentication-implementations",
                "title" : "ParseAuthentication Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetwitter",
            "title" : "ParseTwitter",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseversion\/current()",
                "title" : "static func current() async throws -> ParseVersion",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-1ju9p",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:)-7523g",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2eh5t",
                    "title" : "static func > (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2fa7s",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_(_:_:)-2ie1v",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-4xugm",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-5i0hp",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7dags",
                    "title" : "static func >= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/_=(_:_:)-7eh1a",
                    "title" : "static func <= (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/debugdescription-3205l",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/debugdescription-7o1c2",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseversion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseversion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseversion",
            "title" : "ParseVersion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(_:)",
                "title" : "init(T) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/init(objectid:)",
                "title" : "init(objectId: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/classname",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/objectid",
                "title" : "var objectId: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/fetch(includekeys:options:callbackqueue:completion:)",
                "title" : "func fetch(includeKeys: [String]?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<T, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/fetchpublisher(includekeys:options:)",
                "title" : "func fetchPublisher(includeKeys: [String]?, options: API.Options) -> Future<T, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/hassameobjectid(as:)-9vqk4",
                "title" : "func hasSameObjectId(as: `Self`) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/hassameobjectid(as:)-zpjg",
                "title" : "func hasSameObjectId(as: T) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/pointer\/toobject()",
                "title" : "func toObject() -> T",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch()",
                    "title" : "func fetch() async throws -> FetchingType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/pointer\/fetch(includekeys:options:)",
                    "title" : "func fetch(includeKeys: [String]?, options: API.Options) async throws -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/pointer\/fetchable-implementations",
                "title" : "Fetchable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/pointer",
            "title" : "Pointer",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-16e61",
                "title" : "init(QueryConstraint...)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/init(_:)-6muig",
                "title" : "init([QueryConstraint])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.property",
                "title" : "var className: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel",
                "title" : "var viewModel: QueryViewModel<ResultType>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregate(_:options:callbackqueue:completion:)",
                "title" : "func aggregate([[String : Encodable]], options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:)",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func aggregateExplain<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregateexplainpublisher(_:usingmongodb:options:)",
                "title" : "func aggregateExplainPublisher<U>([[String : Encodable]], usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/aggregatepublisher(_:options:)",
                "title" : "func aggregatePublisher([[String : Encodable]], options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:)",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func countExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countexplainpublisher(usingmongodb:options:)",
                "title" : "func countExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/countpublisher(options:)",
                "title" : "func countPublisher(options: API.Options) -> Future<Int, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:)",
                "title" : "func distinct(String, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinct(_:options:callbackqueue:completion:)",
                "title" : "func distinct(String, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:)",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplain(_:usingmongodb:options:callbackqueue:completion:)",
                "title" : "func distinctExplain<U>(String, usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctexplainpublisher(_:usingmongodb:options:)",
                "title" : "func distinctExplainPublisher<U>(String, usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/distinctpublisher(_:options:)",
                "title" : "func distinctPublisher(String, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-1jvpb",
                "title" : "func exclude(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/exclude(_:)-717l0",
                "title" : "func exclude([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-2q1ez",
                "title" : "func fields(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/fields(_:)-71x3d",
                "title" : "func fields([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options) async throws -> [ResultType]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findall(batchlimit:options:callbackqueue:completion:)",
                "title" : "func findAll(batchLimit: Int?, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findallpublisher(batchlimit:options:)",
                "title" : "func findAllPublisher(batchLimit: Int?, options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:)",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func findExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findexplainpublisher(usingmongodb:options:)",
                "title" : "func findExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/findpublisher(options:)",
                "title" : "func findPublisher(options: API.Options) -> Future<[ResultType], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:)",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func firstExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<U, ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstexplainpublisher(usingmongodb:options:)",
                "title" : "func firstExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<U, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/firstpublisher(options:)",
                "title" : "func firstPublisher(options: API.Options) -> Future<ResultType, ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/hint(_:)",
                "title" : "func hint<U>(U) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-323ik",
                "title" : "func include(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/include(_:)-47jms",
                "title" : "func include([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/includeall()",
                "title" : "func includeAll() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/limit(_:)",
                "title" : "func limit(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-75g9s",
                "title" : "func order([Order]?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/order(_:)-779cz",
                "title" : "func order(Order...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/readpreference(_:includereadpreference:subqueryreadpreference:)",
                "title" : "func readPreference(String?, includeReadPreference: String?, subqueryReadPreference: String?) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-23ewt",
                "title" : "func select(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/select(_:)-689ic",
                "title" : "func select([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/skip(_:)",
                "title" : "func skip(Int) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/sortbytextscore()",
                "title" : "func sortByTextScore() -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe()",
                "title" : "func subscribe() async throws -> Subscription<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.method",
                "title" : "func subscribe(ParseLiveQuery) async throws -> Subscription<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback()",
                "title" : "func subscribeCallback() async throws -> SubscriptionCallback<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribecallback(_:)",
                "title" : "func subscribeCallback(ParseLiveQuery) async throws -> SubscriptionCallback<ResultType>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe()",
                "title" : "func unsubscribe() async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:)",
                "title" : "func unsubscribe<T>(T) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(_:client:)",
                "title" : "func unsubscribe<T>(T, client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/unsubscribe(client:)",
                "title" : "func unsubscribe(client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:)",
                "title" : "func update<T>(T) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/update(_:client:)",
                "title" : "func update<T>(T, client: ParseLiveQuery) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-41gct",
                "title" : "func watch(String...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/watch(_:)-9h5yl",
                "title" : "func watch([String]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-60ukn",
                "title" : "func `where`(QueryConstraint...) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/where(_:)-m71l",
                "title" : "func `where`([QueryConstraint]) -> Query<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:)",
                "title" : "func withCount(options: API.Options) async throws -> ([ResultType], Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcount(options:callbackqueue:completion:)",
                "title" : "func withCount(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<([ResultType], Int), ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options) async throws -> [U]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplain(usingmongodb:options:callbackqueue:completion:)",
                "title" : "func withCountExplain<U>(usingMongoDB: Bool, options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[U], ParseError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountexplainpublisher(usingmongodb:options:)",
                "title" : "func withCountExplainPublisher<U>(usingMongoDB: Bool, options: API.Options) -> Future<[U], ParseError>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/withcountpublisher(options:)",
                "title" : "func withCountPublisher(options: API.Options) -> Future<([ResultType], Int), ParseError>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/classname-swift.type.property",
                "title" : "static var className: String",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:)-swift.type.method",
                "title" : "static func subscribe<T>(T) async throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/subscribe(_:client:)",
                "title" : "static func subscribe<T>(T, client: ParseLiveQuery) async throws -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/parseswift\/query\/viewmodel(_:)",
                "title" : "static func viewModel(`Self`) -> QueryViewModel<ResultType>",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/ascending(_:)",
                    "title" : "case ascending(String)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/descending(_:)",
                    "title" : "case descending(String)",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/order\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/parseswift\/query\/order\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/parseswift\/query\/order\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/order",
                "title" : "Query.Order",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:)",
                    "title" : "func count(options: API.Options) async throws -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/count(options:callbackqueue:completion:)",
                    "title" : "func count(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<Int, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:)",
                    "title" : "func find(options: API.Options) async throws -> [ResultType]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/find(options:callbackqueue:completion:)",
                    "title" : "func find(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<[ResultType], ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:)",
                    "title" : "func first(options: API.Options) async throws -> ResultType",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/first(options:callbackqueue:completion:)",
                    "title" : "func first(options: API.Options, callbackQueue: DispatchQueue, completion: (Result<ResultType, ParseError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/query\/resulttype",
                    "title" : "Query.ResultType",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/parseswift\/query\/queryable-implementations",
                "title" : "Queryable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/query",
            "title" : "Query",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/queryconstraint\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/queryconstraint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/queryconstraint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/queryconstraint",
            "title" : "QueryConstraint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/querywhere\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/querywhere\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/querywhere\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/querywhere",
            "title" : "QueryWhere",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/parseswift\/triggerrequest",
            "title" : "TriggerRequest",
            "type" : "struct"
          },
          {
            "title" : "Variables",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/configuration",
            "title" : "var configuration: ParseConfiguration",
            "type" : "var"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-4ugox",
            "title" : "func and<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/and(queries:)-8cafq",
            "title" : "func and<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/clearcache()",
            "title" : "func clearCache()",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-3irrl",
            "title" : "func containedBy<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedby(key:array:)-8m6r2",
            "title" : "func containedBy<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-36xo5",
            "title" : "func containedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containedin(key:array:)-f8wn",
            "title" : "func containedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-1g8ks",
            "title" : "func containsAll<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsall(key:array:)-7bkbc",
            "title" : "func containsAll<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/containsstring(key:substring:modifiers:)",
            "title" : "func containsString(key: String, substring: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/deleteobjectiveckeychain()",
            "title" : "func deleteObjectiveCKeychain() async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotexist(key:)",
            "title" : "func doesNotExist(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/doesnotmatchkeyinquery(key:querykey:query:)",
            "title" : "func doesNotMatchKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:object:usingeqcomparator:)",
            "title" : "func equalTo<T>(key: String, object: T, usingEqComparator: Bool) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/equalto(key:value:usingeqcomparator:)",
            "title" : "func equalTo<T>(key: String, value: T, usingEqComparator: Bool) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/exists(key:)",
            "title" : "func exists(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hasprefix(key:prefix:modifiers:)",
            "title" : "func hasPrefix(key: String, prefix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/hassuffix(key:suffix:modifiers:)",
            "title" : "func hasSuffix(key: String, suffix: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(applicationid:clientkey:primarykey:serverurl:livequeryserverurl:requiringcustomobjectids:usingtransactions:usingequalqueryconstraint:usingpostforquery:primitivestore:requestcachepolicy:cachememorycapacity:cachediskcapacity:usingd-5pbr0",
            "title" : "func initialize(applicationId: String, clientKey: String?, primaryKey: String?, serverURL: URL, liveQueryServerURL: URL?, requiringCustomObjectIds: Bool, usingTransactions: Bool, usingEqualQueryConstraint: Bool, usingPostForQuery: Bool, primitiveStore: ParsePrimitiveStorable?, requestCachePolicy: URLRequest.CachePolicy, cacheMemoryCapacity: Int, cacheDiskCapacity: Int, usingDataProtectionKeychain: Bool, deletingKeychainIfNeeded: Bool, httpAdditionalHeaders: [AnyHashable : Any]?, maxConnectionAttempts: Int, liveQueryMaxConnectionAttempts: Int, parseFileTransfer: ParseFileTransferable?, authentication: ((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?) async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/initialize(configuration:)",
            "title" : "func initialize(configuration: ParseConfiguration) async throws",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnotnull(key:)",
            "title" : "func isNotNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/isnull(key:)",
            "title" : "func isNull(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matcheskeyinquery(key:querykey:query:)",
            "title" : "func matchesKeyInQuery<T>(key: String, queryKey: String, query: Query<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchesregex(key:regex:modifiers:)",
            "title" : "func matchesRegex(key: String, regex: String, modifiers: String?) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:)",
            "title" : "func matchesText(key: String, text: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/matchestext(key:text:options:)",
            "title" : "func matchesText(key: String, text: String, options: [ParseTextOption : Encodable]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/near(key:geopoint:)",
            "title" : "func near(key: String, geoPoint: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-4b4r0",
            "title" : "func nor<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/nor(queries:)-l87w",
            "title" : "func nor<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-2eqxa",
            "title" : "func notContainedIn<T>(key: String, array: [T]) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/notcontainedin(key:array:)-lma5",
            "title" : "func notContainedIn<T>(key: String, array: [T]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-1117v",
            "title" : "func or<T>(queries: Query<T>...) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/or(queries:)-8hqvz",
            "title" : "func or<T>(queries: [Query<T>]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/polygoncontains(key:point:)",
            "title" : "func polygonContains(key: String, point: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:)",
            "title" : "func related(key: String) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-23s9i",
            "title" : "func related<T>(key: String, object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(key:object:)-6tnr6",
            "title" : "func related<T>(key: String, object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-3ndwf",
            "title" : "func related<T>(object: Pointer<T>) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/related(object:)-9ex2g",
            "title" : "func related<T>(object: T) throws -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/relative(_:)",
            "title" : "func relative(QueryConstraint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/setaccessgroup(_:synchronizeacrossdevices:)",
            "title" : "func setAccessGroup(String?, synchronizeAcrossDevices: Bool) async throws -> Bool",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/updateauthentication(_:)",
            "title" : "func updateAuthentication(((URLAuthenticationChallenge, (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) -> Void)?)",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withingeobox(key:fromsouthwest:tonortheast:)",
            "title" : "func withinGeoBox(key: String, fromSouthWest: ParseGeoPoint, toNortheast: ParseGeoPoint) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinkilometers(key:geopoint:distance:sorted:)",
            "title" : "func withinKilometers(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinmiles(key:geopoint:distance:sorted:)",
            "title" : "func withinMiles(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:points:)",
            "title" : "func withinPolygon(key: String, points: [ParseGeoPoint]) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinpolygon(key:polygon:)",
            "title" : "func withinPolygon(key: String, polygon: ParsePolygon) -> QueryConstraint",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/parseswift\/withinradians(key:geopoint:distance:sorted:)",
            "title" : "func withinRadians(key: String, geoPoint: ParseGeoPoint, distance: Double, sorted: Bool) -> [QueryConstraint]",
            "type" : "func"
          },
          {
            "title" : "Operators",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-4oylc",
            "title" : "func != <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-6f2gk",
            "title" : "func != <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/!=(_:_:)-8iwik",
            "title" : "func != <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-5jg5t",
            "title" : "func == <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-8pl0h",
            "title" : "func == <T>(String, T) throws -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/==(_:_:)-998hz",
            "title" : "func == <T>(String, Query<T>) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-35vq2",
            "title" : "func > <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_(_:_:)-4bsb2",
            "title" : "func < <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-434pw",
            "title" : "func >= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "path" : "\/documentation\/parseswift\/_=(_:_:)-6tzg",
            "title" : "func <= <T>(String, T) -> QueryConstraint",
            "type" : "op"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/==(_:_:)",
                "title" : "static func == <T>(Event<T>, Event<T>) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/created(_:)",
                "title" : "case created(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/deleted(_:)",
                "title" : "case deleted(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/entered(_:)",
                "title" : "case entered(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/left(_:)",
                "title" : "case left(T)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/event\/updated(_:)",
                "title" : "case updated(T)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/event\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/event\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/event",
            "title" : "Event",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterdelete",
                "title" : "case afterDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterevent",
                "title" : "case afterEvent",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterfind",
                "title" : "case afterFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogin",
                "title" : "case afterLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/afterlogout",
                "title" : "case afterLogout",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/aftersave",
                "title" : "case afterSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforeconnect",
                "title" : "case beforeConnect",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforedelete",
                "title" : "case beforeDelete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforefind",
                "title" : "case beforeFind",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforelogin",
                "title" : "case beforeLogin",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesave",
                "title" : "case beforeSave",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/beforesubscribe",
                "title" : "case beforeSubscribe",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsehooktriggertype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsehooktriggertype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsehooktriggertype",
            "title" : "ParseHookTriggerType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/add",
                "title" : "case add",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/addrelation",
                "title" : "case addRelation",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/addunique",
                "title" : "case addUnique",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/batch",
                "title" : "case batch",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/delete",
                "title" : "case delete",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/increment",
                "title" : "case increment",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/remove",
                "title" : "case remove",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/removerelation",
                "title" : "case removeRelation",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parseoperationcommand\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parseoperationcommand\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parseoperationcommand",
            "title" : "ParseOperationCommand",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/casesensitive",
                "title" : "case caseSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/diacriticsensitive",
                "title" : "case diacriticSensitive",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/language",
                "title" : "case language",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/parseswift\/parsetextoption\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/parseswift\/parsetextoption\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/parseswift\/parsetextoption\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/parseswift\/parsetextoption",
            "title" : "ParseTextOption",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/parseswift",
        "title" : "ParseSwift",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 0
  }
}