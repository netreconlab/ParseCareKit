{
  "abstract" : [
    {
      "text" : "An ",
      "type" : "text"
    },
    {
      "code" : "AsyncIterator",
      "type" : "codeVoice"
    },
    {
      "text" : " that provides a convenient and high-performance implementation",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "of a common architecture for ",
      "type" : "text"
    },
    {
      "code" : "AsyncSequence",
      "type" : "codeVoice"
    },
    {
      "text" : " of ",
      "type" : "text"
    },
    {
      "code" : "UInt8",
      "type" : "codeVoice"
    },
    {
      "text" : ", otherwise known as byte streams.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:15AsyncAlgorithms0A20BufferedByteIteratorV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "struct"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "AsyncBufferedByteIterator"
      }
    ],
    "modules" : [
      {
        "name" : "AsyncAlgorithms"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "AsyncBufferedByteIterator"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Structure",
    "symbolKind" : "struct",
    "title" : "AsyncBufferedByteIterator"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "iOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "struct"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "AsyncBufferedByteIterator"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Bytes are read into an internal buffer of ",
              "type" : "text"
            },
            {
              "code" : "capacity",
              "type" : "codeVoice"
            },
            {
              "text" : " bytes via the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "readFunction",
              "type" : "codeVoice"
            },
            {
              "text" : ". Invoking ",
              "type" : "text"
            },
            {
              "code" : "next()",
              "type" : "codeVoice"
            },
            {
              "text" : " returns bytes from the internal buffer until itâ€™s",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "empty, and then suspends and awaits another invocation of ",
              "type" : "text"
            },
            {
              "code" : "readFunction",
              "type" : "codeVoice"
            },
            {
              "text" : " to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "refill. If ",
              "type" : "text"
            },
            {
              "code" : "readFunction",
              "type" : "codeVoice"
            },
            {
              "text" : " returns 0 (indicating nothing was read), ",
              "type" : "text"
            },
            {
              "code" : "next()",
              "type" : "codeVoice"
            },
            {
              "text" : " will",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "return ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " from then on. Cancellation is checked before each invocation of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "readFunction",
              "type" : "codeVoice"
            },
            {
              "text" : ", which means that many calls to ",
              "type" : "text"
            },
            {
              "code" : "next()",
              "type" : "codeVoice"
            },
            {
              "text" : " will not check for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "cancellation.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "A typical use of ",
              "type" : "text"
            },
            {
              "code" : "AsyncBufferedByteIterator",
              "type" : "codeVoice"
            },
            {
              "text" : " looks something like this:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct AsyncBytes: AsyncSequence {",
            "  public typealias Element = UInt8",
            "  var handle: ReadableThing",
            "",
            "  internal init(_ readable: ReadableThing) {",
            "    handle = readable",
            "  }",
            "",
            "  public func makeAsyncIterator() -> AsyncBufferedByteIterator {",
            "    return AsyncBufferedByteIterator(capacity: 16384) { buffer in",
            "      \/\/ This runs once every 16384 invocations of next()",
            "      return try await handle.read(into: buffer)",
            "    }",
            "  }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/ScI"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/init(capacity:readFunction:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/next()"
      ],
      "title" : "Instance Methods"
    },
    {
      "identifiers" : [
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/Element"
      ],
      "title" : "Type Aliases"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseCareKit/ScI": {
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/ScI",
  "title" : "_Concurrency.AsyncIteratorProtocol",
  "type" : "unresolvable"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/AsyncAlgorithms": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "AsyncAlgorithms",
  "type" : "topic",
  "url" : "\/documentation\/asyncalgorithms"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/AsyncAlgorithms/AsyncBufferedByteIterator": {
  "abstract" : [
    {
      "text" : "An ",
      "type" : "text"
    },
    {
      "code" : "AsyncIterator",
      "type" : "codeVoice"
    },
    {
      "text" : " that provides a convenient and high-performance implementation",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "of a common architecture for ",
      "type" : "text"
    },
    {
      "code" : "AsyncSequence",
      "type" : "codeVoice"
    },
    {
      "text" : " of ",
      "type" : "text"
    },
    {
      "code" : "UInt8",
      "type" : "codeVoice"
    },
    {
      "text" : ", otherwise known as byte streams.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AsyncBufferedByteIterator"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AsyncBufferedByteIterator"
    }
  ],
  "role" : "symbol",
  "title" : "AsyncBufferedByteIterator",
  "type" : "topic",
  "url" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/AsyncAlgorithms/AsyncBufferedByteIterator/Element": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Element"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/Element",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Element"
    }
  ],
  "role" : "symbol",
  "title" : "AsyncBufferedByteIterator.Element",
  "type" : "topic",
  "url" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/element"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/AsyncAlgorithms/AsyncBufferedByteIterator/init(capacity:readFunction:)": {
  "abstract" : [
    {
      "text" : "Creates an asynchronous buffered byte iterator with a specified capacity and read function.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "capacity"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "readFunction"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sw",
      "text" : "UnsafeMutableRawBufferPointer"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/init(capacity:readFunction:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(capacity:readFunction:)",
  "type" : "topic",
  "url" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/init(capacity:readfunction:)"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/AsyncAlgorithms/AsyncBufferedByteIterator/next()": {
  "abstract" : [
    {
      "text" : "Reads a byte out of the buffer if available. When no bytes are available, this will trigger",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "the read function to reload the buffer and then return the next byte from that buffer.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "next"
    },
    {
      "kind" : "text",
      "text" : "() "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s5UInt8V",
      "text" : "UInt8"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/next()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "next()",
  "type" : "topic",
  "url" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/next()"
}
}
}