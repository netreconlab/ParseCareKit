{
  "abstract" : [
    {
      "text" : "Merges two ",
      "type" : "text"
    },
    {
      "code" : "ParseObject",
      "type" : "codeVoice"
    },
    {
      "text" : "’s with the resulting object consisting of all modified",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and unchanged properties.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit",
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit\/PCKContact",
        "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit\/PCKContact\/ParseObject-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit\/PCKContact\/merge(with:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "ParseSwift",
    "externalID" : "s:10ParseSwift0A6ObjectPAAE5merge4withxx_tKF::SYNTHESIZED::s:12ParseCareKit10PCKContactV",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "merge"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "with"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : ") "
      },
      {
        "kind" : "keyword",
        "text" : "throws"
      },
      {
        "kind" : "text",
        "text" : " -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      }
    ],
    "modules" : [
      {
        "name" : "ParseCareKit"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "merge(with:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "iOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "merge"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "with"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "object"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : ") "
            },
            {
              "kind" : "keyword",
              "text" : "throws"
            },
            {
              "kind" : "text",
              "text" : " -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "return-value",
          "level" : 2,
          "text" : "Return Value",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The merged object.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The original object.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "with"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "code" : [
            "\/\/: Create your own value typed `ParseObject`.",
            "struct GameScore: ParseObject {",
            "    \/\/: These are required by ParseObject",
            "    var objectId: String?",
            "    var createdAt: Date?",
            "    var updatedAt: Date?",
            "    var ACL: ParseACL?",
            "",
            "    \/\/: Your own properties.",
            "    var points: Int?",
            "",
            "    \/\/: Implement your own version of merge",
            "    func merge(with object: Self) throws -> Self {",
            "        var updated = try mergeParse(with: object)",
            "        if updated.shouldRestoreKey(\\.points,",
            "                                         original: object) {",
            "            updated.points = object.points",
            "        }",
            "        return updated",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "An error of type ",
                  "type" : "text"
                },
                {
                  "code" : "ParseError",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Throws",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Use this in combination with ",
                  "type" : "text"
                },
                {
                  "code" : "ParseMutable",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to only send updated",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "properties to the server and then merge those changes with the original object.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "It is recommend you provide an implementation of this method",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "for all of your ",
                  "type" : "text"
                },
                {
                  "code" : "ParseObject",
                  "type" : "codeVoice"
                },
                {
                  "text" : "’s as the developer has access to all properties of a",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "ParseObject",
                  "type" : "codeVoice"
                },
                {
                  "text" : ". You should always call ",
                  "type" : "text"
                },
                {
                  "code" : "mergeParse",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "in the beginning of your implementation to handle all default Parse properties. In addition,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "use ",
                  "type" : "text"
                },
                {
                  "code" : "shouldRestoreKey",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to compare key modifications between objects.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "style" : "important",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/parsecarekit\/pckcontact\/merge(with:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/ParseCareKit": {
  "abstract" : [
    {
      "text" : "Seamlessly Synchronize CareKit 2.1+ data with a Parse Server.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ParseCareKit",
  "type" : "topic",
  "url" : "\/documentation\/parsecarekit"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/ParseCareKit/PCKContact": {
  "abstract" : [
    {
      "text" : "An ",
      "type" : "text"
    },
    {
      "code" : "PCKContact",
      "type" : "codeVoice"
    },
    {
      "text" : " is the ParseCareKit equivalent of ",
      "type" : "text"
    },
    {
      "code" : "OCKContact",
      "type" : "codeVoice"
    },
    {
      "text" : ".  An ",
      "type" : "text"
    },
    {
      "code" : "OCKContact",
      "type" : "codeVoice"
    },
    {
      "text" : "represents a contact that a user",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "may want to get in touch with. A contact may be a care provider, a friend, or a family member. Contacts must have at",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "least a name, and may optionally have numerous other addresses at which to be contacted.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "PCKContact"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit\/PCKContact",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "PCKContact"
    }
  ],
  "role" : "symbol",
  "title" : "PCKContact",
  "type" : "topic",
  "url" : "\/documentation\/parsecarekit\/pckcontact"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/ParseCareKit/PCKContact/ParseObject-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit\/PCKContact\/ParseObject-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "ParseObject Implementations",
  "type" : "topic",
  "url" : "\/documentation\/parsecarekit\/pckcontact\/parseobject-implementations"
},
"doc://edu.uky.cs.netreconlab.ParseCareKit/documentation/ParseCareKit/PCKContact/merge(with:)": {
  "abstract" : [
    {
      "text" : "Merges two ",
      "type" : "text"
    },
    {
      "code" : "ParseObject",
      "type" : "codeVoice"
    },
    {
      "text" : "’s with the resulting object consisting of all modified",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and unchanged properties.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "merge"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "with"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    }
  ],
  "identifier" : "doc:\/\/edu.uky.cs.netreconlab.ParseCareKit\/documentation\/ParseCareKit\/PCKContact\/merge(with:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "merge(with:)",
  "type" : "topic",
  "url" : "\/documentation\/parsecarekit\/pckcontact\/merge(with:)"
}
}
}